
ChaeburatorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a4  080098a4  0000b064  2**0
                  CONTENTS
  4 .ARM          00000008  080098a4  080098a4  0000a8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ac  080098ac  0000b064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ac  080098ac  0000a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080098b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033bc  20000064  08009918  0000b064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003420  08009918  0000b420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccd6  00000000  00000000  0000b08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004825  00000000  00000000  00027d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131b  00000000  00000000  0002de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006be1  00000000  00000000  0002f13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021961  00000000  00000000  00035d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1295  00000000  00000000  0005767d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  000f8958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ff36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08009430 	.word	0x08009430

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08009430 	.word	0x08009430

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <HAL_GPIO_EXTI_Callback>:
// Перемененная указывающая причину звуковой и световой сигнализации
uint8_t BatteryStatus = 0;

// Переходит сюда при прерывании при приеме нового пакета.
// Запускает чтение пакетов (DMA использовать не получилось)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	80fb      	strh	r3, [r7, #6]
//	IT_GPIO_Handl(GPIO_Pin);
	if(GPIO_Pin == DIO0_Pin){
 800017e:	88fb      	ldrh	r3, [r7, #6]
 8000180:	2b80      	cmp	r3, #128	@ 0x80
 8000182:	d116      	bne.n	80001b2 <HAL_GPIO_EXTI_Callback+0x3e>
//		RxContLoRaCmpl(ComArr1,&hspi1);
		BaseType_t xHigherPriorityTaskWoken;
		xSemaphoreGiveFromISR(SemDMA_LoRaHandle,&xHigherPriorityTaskWoken);
 8000184:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <HAL_GPIO_EXTI_Callback+0x48>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f107 020c 	add.w	r2, r7, #12
 800018c:	4611      	mov	r1, r2
 800018e:	4618      	mov	r0, r3
 8000190:	f006 f87a 	bl	8006288 <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d007      	beq.n	80001aa <HAL_GPIO_EXTI_Callback+0x36>
 800019a:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800019c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	f3bf 8f4f 	dsb	sy
 80001a6:	f3bf 8f6f 	isb	sy
//		RxContLoRaCmplV2(&hspi1);
		RxContLoRaCmpl(ComArr1, &hspi1);
 80001aa:	4906      	ldr	r1, [pc, #24]	@ (80001c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80001ac:	4806      	ldr	r0, [pc, #24]	@ (80001c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80001ae:	f008 fa45 	bl	800863c <RxContLoRaCmpl>
		// Может добавить функцию проверки принятого ключа?
	}

}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000528 	.word	0x20000528
 80001c0:	e000ed04 	.word	0xe000ed04
 80001c4:	200003a8 	.word	0x200003a8
 80001c8:	200032c8 	.word	0x200032c8

080001cc <HAL_TIM_PeriodElapsedCallback>:

// Может приостановить задачу приема, обнулить массив команд.

// Если принятых пакетов нет включить сигнализацию.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;

  if (htim->Instance == TIM1)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a27      	ldr	r2, [pc, #156]	@ (8000278 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d148      	bne.n	8000270 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
	  if(NumSuccessPack == 0){
 80001de:	4b27      	ldr	r3, [pc, #156]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d113      	bne.n	800020e <HAL_TIM_PeriodElapsedCallback+0x42>
		  // Если нет принятых пакетов включить сигнализацию ( задачу сигнализации)
			xSemaphoreGiveFromISR(Sem_Time_RxErrHandle,&xHigherPriorityTaskWoken);
 80001e6:	4b26      	ldr	r3, [pc, #152]	@ (8000280 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	4611      	mov	r1, r2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f006 f849 	bl	8006288 <xQueueGiveFromISR>
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d02e      	beq.n	800025a <HAL_TIM_PeriodElapsedCallback+0x8e>
 80001fc:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	f3bf 8f4f 	dsb	sy
 8000208:	f3bf 8f6f 	isb	sy
 800020c:	e025      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x8e>
	  }
	  else {
		  if(PayLoadCRCError > NumSuccessPack){
 800020e:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b1a      	ldr	r3, [pc, #104]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d913      	bls.n	8000242 <HAL_TIM_PeriodElapsedCallback+0x76>
			  // Много поврежденных пакетов тоже включить сигнализацию.
				xSemaphoreGiveFromISR(Sem_Time_RxErrHandle,&xHigherPriorityTaskWoken);
 800021a:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f107 020c 	add.w	r2, r7, #12
 8000222:	4611      	mov	r1, r2
 8000224:	4618      	mov	r0, r3
 8000226:	f006 f82f 	bl	8006288 <xQueueGiveFromISR>
				portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d014      	beq.n	800025a <HAL_TIM_PeriodElapsedCallback+0x8e>
 8000230:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	f3bf 8f4f 	dsb	sy
 800023c:	f3bf 8f6f 	isb	sy
 8000240:	e00b      	b.n	800025a <HAL_TIM_PeriodElapsedCallback+0x8e>
		  }
		  else{
			  // отключаю гудело и фары если запущены из этой задачи
			  if(BatteryStatus == VOLT_OK){
 8000242:	4b12      	ldr	r3, [pc, #72]	@ (800028c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d107      	bne.n	800025a <HAL_TIM_PeriodElapsedCallback+0x8e>
					xSemaphoreGiveFromISR(SemControlTaskHandle,&xHigherPriorityTaskWoken);
 800024a:	4b11      	ldr	r3, [pc, #68]	@ (8000290 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f107 020c 	add.w	r2, r7, #12
 8000252:	4611      	mov	r1, r2
 8000254:	4618      	mov	r0, r3
 8000256:	f006 f817 	bl	8006288 <xQueueGiveFromISR>
			  }
		  }
	  }
//	В противном случае ничего не делать все хорошо. Принимать пакеты дальше.

	  OutputNumSuccessPack = (int8_t)NumSuccessPack;
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	b25a      	sxtb	r2, r3
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000262:	701a      	strb	r2, [r3, #0]
	  NumSuccessPack = 	0;
 8000264:	4b05      	ldr	r3, [pc, #20]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
	  PayLoadCRCError = 0;
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
  }
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40012c00 	.word	0x40012c00
 800027c:	20000084 	.word	0x20000084
 8000280:	20000530 	.word	0x20000530
 8000284:	e000ed04 	.word	0xe000ed04
 8000288:	20000080 	.word	0x20000080
 800028c:	20000089 	.word	0x20000089
 8000290:	20000538 	.word	0x20000538
 8000294:	20000088 	.word	0x20000088

08000298 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4a06      	ldr	r2, [pc, #24]	@ (80002c0 <vApplicationGetIdleTaskMemory+0x28>)
 80002a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	2000008c 	.word	0x2000008c
 80002c4:	20000134 	.word	0x20000134

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b096      	sub	sp, #88	@ 0x58
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ce:	f000 fe85 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d2:	f000 f895 	bl	8000400 <SystemClock_Config>
//  osSemaphoreDef(SemDMA_LoRa);
//  SemDMA_LoRaHandle = osSemaphoreCreate(osSemaphore(SemDMA_LoRa), 1);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d6:	f000 faeb 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80002da:	f000 facb 	bl	8000874 <MX_DMA_Init>
  MX_TIM3_Init();
 80002de:	f000 fa39 	bl	8000754 <MX_TIM3_Init>
  MX_TIM2_Init();
 80002e2:	f000 f9bd 	bl	8000660 <MX_TIM2_Init>
  MX_SPI1_Init();
 80002e6:	f000 f933 	bl	8000550 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002ea:	f000 fa97 	bl	800081c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80002ee:	f000 f965 	bl	80005bc <MX_TIM1_Init>
  MX_ADC1_Init();
 80002f2:	f000 f8e1 	bl	80004b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Test
//  TestFunction();
  StartUartRX();
 80002f6:	f004 fd4b 	bl	8004d90 <StartUartRX>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemDMA_LoRa */
  osSemaphoreDef(SemDMA_LoRa);
 80002fa:	2300      	movs	r3, #0
 80002fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80002fe:	2300      	movs	r3, #0
 8000300:	657b      	str	r3, [r7, #84]	@ 0x54
  SemDMA_LoRaHandle = osSemaphoreCreate(osSemaphore(SemDMA_LoRa), 1);
 8000302:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000306:	2101      	movs	r1, #1
 8000308:	4618      	mov	r0, r3
 800030a:	f005 fb7e 	bl	8005a0a <osSemaphoreCreate>
 800030e:	4603      	mov	r3, r0
 8000310:	4a32      	ldr	r2, [pc, #200]	@ (80003dc <main+0x114>)
 8000312:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemDMA_UART */
  osSemaphoreDef(SemDMA_UART);
 8000314:	2300      	movs	r3, #0
 8000316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000318:	2300      	movs	r3, #0
 800031a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  SemDMA_UARTHandle = osSemaphoreCreate(osSemaphore(SemDMA_UART), 1);
 800031c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000320:	2101      	movs	r1, #1
 8000322:	4618      	mov	r0, r3
 8000324:	f005 fb71 	bl	8005a0a <osSemaphoreCreate>
 8000328:	4603      	mov	r3, r0
 800032a:	4a2d      	ldr	r2, [pc, #180]	@ (80003e0 <main+0x118>)
 800032c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sem_Time_RxErr */
  osSemaphoreDef(Sem_Time_RxErr);
 800032e:	2300      	movs	r3, #0
 8000330:	643b      	str	r3, [r7, #64]	@ 0x40
 8000332:	2300      	movs	r3, #0
 8000334:	647b      	str	r3, [r7, #68]	@ 0x44
  Sem_Time_RxErrHandle = osSemaphoreCreate(osSemaphore(Sem_Time_RxErr), 1);
 8000336:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800033a:	2101      	movs	r1, #1
 800033c:	4618      	mov	r0, r3
 800033e:	f005 fb64 	bl	8005a0a <osSemaphoreCreate>
 8000342:	4603      	mov	r3, r0
 8000344:	4a27      	ldr	r2, [pc, #156]	@ (80003e4 <main+0x11c>)
 8000346:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemDMA_VoltMeas */
  osSemaphoreDef(SemDMA_VoltMeas);
 8000348:	2300      	movs	r3, #0
 800034a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800034c:	2300      	movs	r3, #0
 800034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  SemDMA_VoltMeasHandle = osSemaphoreCreate(osSemaphore(SemDMA_VoltMeas), 1);
 8000350:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f005 fb57 	bl	8005a0a <osSemaphoreCreate>
 800035c:	4603      	mov	r3, r0
 800035e:	4a22      	ldr	r2, [pc, #136]	@ (80003e8 <main+0x120>)
 8000360:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemControlTask */
  osSemaphoreDef(SemControlTask);
 8000362:	2300      	movs	r3, #0
 8000364:	633b      	str	r3, [r7, #48]	@ 0x30
 8000366:	2300      	movs	r3, #0
 8000368:	637b      	str	r3, [r7, #52]	@ 0x34
  SemControlTaskHandle = osSemaphoreCreate(osSemaphore(SemControlTask), 1);
 800036a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800036e:	2101      	movs	r1, #1
 8000370:	4618      	mov	r0, r3
 8000372:	f005 fb4a 	bl	8005a0a <osSemaphoreCreate>
 8000376:	4603      	mov	r3, r0
 8000378:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <main+0x124>)
 800037a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreWait(SemControlTaskHandle, 0);
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <main+0x124>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f005 fb74 	bl	8005a70 <osSemaphoreWait>
  osSemaphoreWait(SemDMA_VoltMeasHandle, 0);
 8000388:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <main+0x120>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f005 fb6e 	bl	8005a70 <osSemaphoreWait>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UART_Rx_Que */
  osMessageQDef(UART_Rx_Que, 25, uint8_t);
 8000394:	4b16      	ldr	r3, [pc, #88]	@ (80003f0 <main+0x128>)
 8000396:	f107 0420 	add.w	r4, r7, #32
 800039a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART_Rx_QueHandle = osMessageCreate(osMessageQ(UART_Rx_Que), NULL);
 80003a0:	f107 0320 	add.w	r3, r7, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f005 fbb0 	bl	8005b0c <osMessageCreate>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4a11      	ldr	r2, [pc, #68]	@ (80003f4 <main+0x12c>)
 80003b0:	6013      	str	r3, [r2, #0]
//  /* definition and creation of ControlTask */
//  osThreadDef(ControlTask, StartControlTask, osPriorityHigh, 0, 200);
//  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, StartConsoleTask, osPriorityLow, 0, 426);
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <main+0x130>)
 80003b4:	1d3c      	adds	r4, r7, #4
 80003b6:	461d      	mov	r5, r3
 80003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f005 fad2 	bl	8005972 <osThreadCreate>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <main+0x134>)
 80003d2:	6013      	str	r3, [r2, #0]
   * I'll be testing in one task. Before launching the scheduler.
   */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003d4:	f005 fac6 	bl	8005964 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <main+0x110>
 80003dc:	20000528 	.word	0x20000528
 80003e0:	2000052c 	.word	0x2000052c
 80003e4:	20000530 	.word	0x20000530
 80003e8:	20000534 	.word	0x20000534
 80003ec:	20000538 	.word	0x20000538
 80003f0:	08009448 	.word	0x08009448
 80003f4:	20000524 	.word	0x20000524
 80003f8:	08009464 	.word	0x08009464
 80003fc:	20000520 	.word	0x20000520

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b094      	sub	sp, #80	@ 0x50
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800040a:	2228      	movs	r2, #40	@ 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f008 fb42 	bl	8008a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000450:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fd0a 	bl	8001e70 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000462:	f000 fb10 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 ff76 	bl	8002374 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800048e:	f000 fafa 	bl	8000a86 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000492:	2302      	movs	r3, #2
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800049a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f8f6 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004aa:	f000 faec 	bl	8000a86 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3750      	adds	r7, #80	@ 0x50
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004ca:	4a20      	ldr	r2, [pc, #128]	@ (800054c <MX_ADC1_Init+0x94>)
 80004cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004d8:	2201      	movs	r2, #1
 80004da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004de:	2200      	movs	r2, #0
 80004e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e2:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004e4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ea:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f6:	4814      	ldr	r0, [pc, #80]	@ (8000548 <MX_ADC1_Init+0x90>)
 80004f8:	f000 fdd2 	bl	80010a0 <HAL_ADC_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000502:	f000 fac0 	bl	8000a86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000506:	2304      	movs	r3, #4
 8000508:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050a:	2301      	movs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800050e:	2305      	movs	r3, #5
 8000510:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4619      	mov	r1, r3
 8000516:	480c      	ldr	r0, [pc, #48]	@ (8000548 <MX_ADC1_Init+0x90>)
 8000518:	f000 fe9a 	bl	8001250 <HAL_ADC_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 fab0 	bl	8000a86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000526:	2302      	movs	r3, #2
 8000528:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	@ (8000548 <MX_ADC1_Init+0x90>)
 8000530:	f000 fe8e 	bl	8001250 <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800053a:	f000 faa4 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000334 	.word	0x20000334
 800054c:	40012400 	.word	0x40012400

08000550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000556:	4a18      	ldr	r2, [pc, #96]	@ (80005b8 <MX_SPI1_Init+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <MX_SPI1_Init+0x64>)
 800055c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <MX_SPI1_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056e:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000574:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_SPI1_Init+0x64>)
 800057c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000584:	2238      	movs	r2, #56	@ 0x38
 8000586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <MX_SPI1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <MX_SPI1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <MX_SPI1_Init+0x64>)
 800059c:	220a      	movs	r2, #10
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <MX_SPI1_Init+0x64>)
 80005a2:	f002 f92b 	bl	80027fc <HAL_SPI_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005ac:	f000 fa6b 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200003a8 	.word	0x200003a8
 80005b8:	40013000 	.word	0x40013000

080005bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005da:	4a20      	ldr	r2, [pc, #128]	@ (800065c <MX_TIM1_Init+0xa0>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005ee:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80005f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_TIM1_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <MX_TIM1_Init+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000606:	4814      	ldr	r0, [pc, #80]	@ (8000658 <MX_TIM1_Init+0x9c>)
 8000608:	f002 fe8d 	bl	8003326 <HAL_TIM_Base_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000612:	f000 fa38 	bl	8000a86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <MX_TIM1_Init+0x9c>)
 8000624:	f003 f8d0 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800062e:	f000 fa2a 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_TIM1_Init+0x9c>)
 8000640:	f003 fc3a 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800064a:	f000 fa1c 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000400 	.word	0x20000400
 800065c:	40012c00 	.word	0x40012c00

08000660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000682:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000684:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <MX_TIM2_Init+0xf0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000698:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800069c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_TIM2_Init+0xf0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <MX_TIM2_Init+0xf0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006aa:	4829      	ldr	r0, [pc, #164]	@ (8000750 <MX_TIM2_Init+0xf0>)
 80006ac:	f002 fe8a 	bl	80033c4 <HAL_TIM_PWM_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006b6:	f000 f9e6 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <MX_TIM2_Init+0xf0>)
 80006ca:	f003 fbf5 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006d4:	f000 f9d7 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_TIM2_Init+0xf0>)
 80006f0:	f002 ffa8 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006fa:	f000 f9c4 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2204      	movs	r2, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000706:	f002 ff9d 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000710:	f000 f9b9 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2208      	movs	r2, #8
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_TIM2_Init+0xf0>)
 800071c:	f002 ff92 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000726:	f000 f9ae 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	220c      	movs	r2, #12
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000732:	f002 ff87 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800073c:	f000 f9a3 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <MX_TIM2_Init+0xf0>)
 8000742:	f000 faf7 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000448 	.word	0x20000448

08000754 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000776:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <MX_TIM3_Init+0xc0>)
 8000778:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <MX_TIM3_Init+0xc4>)
 800077a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 800077c:	4b25      	ldr	r3, [pc, #148]	@ (8000814 <MX_TIM3_Init+0xc0>)
 800077e:	2215      	movs	r2, #21
 8000780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <MX_TIM3_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <MX_TIM3_Init+0xc0>)
 800078a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_TIM3_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_TIM3_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800079c:	481d      	ldr	r0, [pc, #116]	@ (8000814 <MX_TIM3_Init+0xc0>)
 800079e:	f002 fe11 	bl	80033c4 <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f96d 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4619      	mov	r1, r3
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <MX_TIM3_Init+0xc0>)
 80007bc:	f003 fb7c 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f95e 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	@ 0x60
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <MX_TIM3_Init+0xc0>)
 80007e2:	f002 ff2f 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007ec:	f000 f94b 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2204      	movs	r2, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_TIM3_Init+0xc0>)
 80007f8:	f002 ff24 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 f940 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <MX_TIM3_Init+0xc0>)
 8000808:	f000 fa94 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000490 	.word	0x20000490
 8000818:	40000400 	.word	0x40000400

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <MX_USART1_UART_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000828:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000830:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000834:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART1_UART_Init+0x50>)
 800083e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART1_UART_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART1_UART_Init+0x50>)
 8000858:	f003 fb9e 	bl	8003f98 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f910 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004d8 	.word	0x200004d8
 8000870:	40013800 	.word	0x40013800

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x38>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x38>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x38>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	200b      	movs	r0, #11
 8000898:	f000 feeb 	bl	8001672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800089c:	200b      	movs	r0, #11
 800089e:	f000 ff04 	bl	80016aa <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b5f      	ldr	r3, [pc, #380]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a5e      	ldr	r2, [pc, #376]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008dc:	4b59      	ldr	r3, [pc, #356]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a58      	ldr	r2, [pc, #352]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b56      	ldr	r3, [pc, #344]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b53      	ldr	r3, [pc, #332]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a52      	ldr	r2, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x194>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <MX_GPIO_Init+0x194>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a44 <MX_GPIO_Init+0x194>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a4c      	ldr	r2, [pc, #304]	@ (8000a44 <MX_GPIO_Init+0x194>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b4a      	ldr	r3, [pc, #296]	@ (8000a44 <MX_GPIO_Init+0x194>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M2_IN1_Pin|M1_IN1_Pin|M1_IN2_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800092a:	4847      	ldr	r0, [pc, #284]	@ (8000a48 <MX_GPIO_Init+0x198>)
 800092c:	f001 fa70 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_CONTROL_Pin|LOAD2_Pin|LOAD1_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f649 0120 	movw	r1, #38944	@ 0x9820
 8000936:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x19c>)
 8000938:	f001 fa6a 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|M3_IN1_Pin|M4_IN1_Pin|M4_IN2_Pin
 800093c:	2200      	movs	r2, #0
 800093e:	f647 7144 	movw	r1, #32580	@ 0x7f44
 8000942:	4843      	ldr	r0, [pc, #268]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 8000944:	f001 fa64 	bl	8001e10 <HAL_GPIO_WritePin>
                          |STBY_M3_M4_Pin|BOOZER_Pin|Reset_Pin|STBY_M1_M2_Pin
                          |M2_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT2_GPIO_Port, LIGHT2_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094e:	4840      	ldr	r0, [pc, #256]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 8000950:	f001 fa5e 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT1_GPIO_Port, LIGHT1_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095a:	483c      	ldr	r0, [pc, #240]	@ (8000a4c <MX_GPIO_Init+0x19c>)
 800095c:	f001 fa58 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M2_IN1_Pin M1_IN1_Pin M1_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN1_Pin|M1_IN1_Pin|M1_IN2_Pin;
 8000960:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	4833      	ldr	r0, [pc, #204]	@ (8000a48 <MX_GPIO_Init+0x198>)
 800097a:	f001 f8c5 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_CONTROL_Pin LOAD2_Pin LOAD1_Pin */
  GPIO_InitStruct.Pin = P_CONTROL_Pin|LOAD2_Pin|LOAD1_Pin;
 800097e:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	482d      	ldr	r0, [pc, #180]	@ (8000a4c <MX_GPIO_Init+0x19c>)
 8000998:	f001 f8b6 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin M3_IN1_Pin M4_IN1_Pin M4_IN2_Pin
                           STBY_M3_M4_Pin STBY_M1_M2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = M3_IN2_Pin|M3_IN1_Pin|M4_IN1_Pin|M4_IN2_Pin
 800099c:	f643 7304 	movw	r3, #16132	@ 0x3f04
 80009a0:	613b      	str	r3, [r7, #16]
                          |STBY_M3_M4_Pin|STBY_M1_M2_Pin|M2_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4826      	ldr	r0, [pc, #152]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 80009b6:	f001 f8a7 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOZER_Pin */
  GPIO_InitStruct.Pin = BOOZER_Pin;
 80009ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOZER_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	481f      	ldr	r0, [pc, #124]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 80009d4:	f001 f898 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT2_Pin Reset_Pin */
  GPIO_InitStruct.Pin = LIGHT2_Pin|Reset_Pin;
 80009d8:	f248 0340 	movw	r3, #32832	@ 0x8040
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4817      	ldr	r0, [pc, #92]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 80009f2:	f001 f889 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT1_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LIGHT1_Pin|NSS_Pin;
 80009f6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480f      	ldr	r0, [pc, #60]	@ (8000a4c <MX_GPIO_Init+0x19c>)
 8000a10:	f001 f87a 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_GPIO_Init+0x1a4>)
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480a      	ldr	r0, [pc, #40]	@ (8000a50 <MX_GPIO_Init+0x1a0>)
 8000a28:	f001 f86e 	bl	8001b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2105      	movs	r1, #5
 8000a30:	2017      	movs	r0, #23
 8000a32:	f000 fe1e 	bl	8001672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a36:	2017      	movs	r0, #23
 8000a38:	f000 fe37 	bl	80016aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	40010c00 	.word	0x40010c00
 8000a54:	10110000 	.word	0x10110000

08000a58 <StartConsoleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsoleTask */
void StartConsoleTask(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	@ 0x50
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConsoleTask */
	uint8_t Buffer[64];
	uint32_t len;
	MyConsole_Setup();
 8000a60:	f004 fa12 	bl	8004e88 <MyConsole_Setup>
  /* Infinite loop */
  for(;;)
  {
      len = USART1_Receive(0x0D,Buffer,sizeof(Buffer),portMAX_DELAY);
 8000a64:	f107 010c 	add.w	r1, r7, #12
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	2240      	movs	r2, #64	@ 0x40
 8000a6e:	200d      	movs	r0, #13
 8000a70:	f004 f9bc 	bl	8004dec <USART1_Receive>
 8000a74:	64f8      	str	r0, [r7, #76]	@ 0x4c
      console_process(Buffer, len);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 fdef 	bl	8005660 <console_process>
      len = USART1_Receive(0x0D,Buffer,sizeof(Buffer),portMAX_DELAY);
 8000a82:	bf00      	nop
 8000a84:	e7ee      	b.n	8000a64 <StartConsoleTask+0xc>

08000a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8e:	bf00      	nop
 8000a90:	e7fd      	b.n	8000a8e <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_MspInit+0x68>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_MspInit+0x68>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_MspInit+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_MspInit+0x68>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_MspInit+0x68>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x68>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	210f      	movs	r1, #15
 8000ace:	f06f 0001 	mvn.w	r0, #1
 8000ad2:	f000 fdce 	bl	8001672 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x6c>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <HAL_MspInit+0x6c>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <HAL_ADC_MspInit+0xbc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d149      	bne.n	8000bb8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a26      	ldr	r2, [pc, #152]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a20      	ldr	r2, [pc, #128]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <HAL_ADC_MspInit+0xc0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b54:	2310      	movs	r3, #16
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4819      	ldr	r0, [pc, #100]	@ (8000bc8 <HAL_ADC_MspInit+0xc4>)
 8000b64:	f000 ffd0 	bl	8001b08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b6a:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_ADC_MspInit+0xcc>)
 8000b6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b92:	2220      	movs	r2, #32
 8000b94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000b9e:	f000 fd9f 	bl	80016e0 <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba8:	f7ff ff6d 	bl	8000a86 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000bb0:	621a      	str	r2, [r3, #32]
 8000bb2:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <HAL_ADC_MspInit+0xc8>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40012400 	.word	0x40012400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000364 	.word	0x20000364
 8000bd0:	40020008 	.word	0x40020008

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a22      	ldr	r2, [pc, #136]	@ (8000c78 <HAL_SPI_MspInit+0xa4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13d      	bne.n	8000c70 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_SPI_MspInit+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c24:	2328      	movs	r3, #40	@ 0x28
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <HAL_SPI_MspInit+0xac>)
 8000c38:	f000 ff66 	bl	8001b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <HAL_SPI_MspInit+0xac>)
 8000c50:	f000 ff5a 	bl	8001b08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_SPI_MspInit+0xb0>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c6a:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_SPI_MspInit+0xb0>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	6053      	str	r3, [r2, #4]

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40010000 	.word	0x40010000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_TIM_Base_MspInit+0x44>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d113      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 fcdb 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cbc:	2019      	movs	r0, #25
 8000cbe:	f000 fcf4 	bl	80016aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce4:	d10c      	bne.n	8000d00 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cfe:	e010      	b.n	8000d22 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x5c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10b      	bne.n	8000d22 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a07      	ldr	r2, [pc, #28]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x58>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40000400 	.word	0x40000400

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d52:	d118      	bne.n	8000d86 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4813      	ldr	r0, [pc, #76]	@ (8000dcc <HAL_TIM_MspPostInit+0x98>)
 8000d80:	f000 fec2 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d84:	e01c      	b.n	8000dc0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <HAL_TIM_MspPostInit+0x9c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d117      	bne.n	8000dc0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_MspPostInit+0x94>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 8000da8:	23c0      	movs	r3, #192	@ 0xc0
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <HAL_TIM_MspPostInit+0x98>)
 8000dbc:	f000 fea4 	bl	8001b08 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a20      	ldr	r2, [pc, #128]	@ (8000e70 <HAL_UART_MspInit+0x9c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d139      	bne.n	8000e68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_UART_MspInit+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	@ (8000e78 <HAL_UART_MspInit+0xa4>)
 8000e3a:	f000 fe65 	bl	8001b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <HAL_UART_MspInit+0xa4>)
 8000e54:	f000 fe58 	bl	8001b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	2025      	movs	r0, #37	@ 0x25
 8000e5e:	f000 fc08 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e62:	2025      	movs	r0, #37	@ 0x25
 8000e64:	f000 fc21 	bl	80016aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8d8 	bl	8001068 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000eb8:	f006 fdb4 	bl	8007a24 <xTaskGetSchedulerState>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ec2:	f007 f941 	bl	8008148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <DMA1_Channel1_IRQHandler+0x10>)
 8000ed2:	f000 fd13 	bl	80018fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000364 	.word	0x20000364

08000ee0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000ee4:	2080      	movs	r0, #128	@ 0x80
 8000ee6:	f000 ffab 	bl	8001e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM1_UP_IRQHandler+0x10>)
 8000ef6:	f002 fab4 	bl	8003462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000400 	.word	0x20000400

08000f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <USART1_IRQHandler+0x10>)
 8000f0a:	f003 f945 	bl	8004198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200004d8 	.word	0x200004d8

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f007 fe04 	bl	8008b54 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20005000 	.word	0x20005000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	2000053c 	.word	0x2000053c
 8000f80:	20003420 	.word	0x20003420

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff fff8 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f96:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fac:	4c09      	ldr	r4, [pc, #36]	@ (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f007 fdd1 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff f983 	bl	80002c8 <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fcc:	080098b4 	.word	0x080098b4
  ldr r2, =_sbss
 8000fd0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fd4:	20003420 	.word	0x20003420

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 fb35 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fd4c 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb4d 	bl	80016c6 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 fb15 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x20>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000008 	.word	0x20000008
 8001088:	20000540 	.word	0x20000540

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000540 	.word	0x20000540

080010a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0be      	b.n	8001240 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fd10 	bl	8000b04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f9ab 	bl	8001440 <ADC_ConversionStop_Disable>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8099 	bne.w	800122e <HAL_ADC_Init+0x18e>
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 8095 	bne.w	800122e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800110c:	f023 0302 	bic.w	r3, r3, #2
 8001110:	f043 0202 	orr.w	r2, r3, #2
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001120:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7b1b      	ldrb	r3, [r3, #12]
 8001126:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001128:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4313      	orrs	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001138:	d003      	beq.n	8001142 <HAL_ADC_Init+0xa2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_ADC_Init+0xa8>
 8001142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001146:	e000      	b.n	800114a <HAL_ADC_Init+0xaa>
 8001148:	2300      	movs	r3, #0
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7d1b      	ldrb	r3, [r3, #20]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d119      	bne.n	800118c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b1b      	ldrb	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	3b01      	subs	r3, #1
 8001166:	035a      	lsls	r2, r3, #13
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	e00b      	b.n	800118c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	f043 0220 	orr.w	r2, r3, #32
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_ADC_Init+0x1a8>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_Init+0x126>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d104      	bne.n	80011d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_ADC_Init+0x1ac>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120a:	e018      	b.n	800123e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	f023 0312 	bic.w	r3, r3, #18
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	f043 0210 	orr.w	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	ffe1f7fd 	.word	0xffe1f7fd
 800124c:	ff1f0efe 	.word	0xff1f0efe

08001250 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x20>
 800126c:	2302      	movs	r3, #2
 800126e:	e0dc      	b.n	800142a <HAL_ADC_ConfigChannel+0x1da>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d81c      	bhi.n	80012ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b05      	subs	r3, #5
 8001292:	221f      	movs	r2, #31
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4019      	ands	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b05      	subs	r3, #5
 80012ac:	fa00 f203 	lsl.w	r2, r0, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b8:	e03c      	b.n	8001334 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d81c      	bhi.n	80012fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b23      	subs	r3, #35	@ 0x23
 80012d4:	221f      	movs	r2, #31
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	4019      	ands	r1, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	@ 0x23
 80012ee:	fa00 f203 	lsl.w	r2, r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80012fa:	e01b      	b.n	8001334 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b41      	subs	r3, #65	@ 0x41
 800130e:	221f      	movs	r2, #31
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	4019      	ands	r1, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3b41      	subs	r3, #65	@ 0x41
 8001328:	fa00 f203 	lsl.w	r2, r0, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d91c      	bls.n	8001376 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68d9      	ldr	r1, [r3, #12]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	3b1e      	subs	r3, #30
 800134e:	2207      	movs	r2, #7
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	4019      	ands	r1, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	6898      	ldr	r0, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	3b1e      	subs	r3, #30
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	e019      	b.n	80013aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6919      	ldr	r1, [r3, #16]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	2207      	movs	r2, #7
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6898      	ldr	r0, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d003      	beq.n	80013ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013b6:	2b11      	cmp	r3, #17
 80013b8:	d132      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_ADC_ConfigChannel+0x1e4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d125      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d126      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80013e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d11a      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <HAL_ADC_ConfigChannel+0x1e8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a13      	ldr	r2, [pc, #76]	@ (800143c <HAL_ADC_ConfigChannel+0x1ec>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0c9a      	lsrs	r2, r3, #18
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001400:	e002      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3b01      	subs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f9      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x1b2>
 800140e:	e007      	b.n	8001420 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40012400 	.word	0x40012400
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83

08001440 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d12e      	bne.n	80014b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800146a:	f7ff fe0f 	bl	800108c <HAL_GetTick>
 800146e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001470:	e01b      	b.n	80014aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001472:	f7ff fe0b 	bl	800108c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d914      	bls.n	80014aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10d      	bne.n	80014aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001492:	f043 0210 	orr.w	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d0dc      	beq.n	8001472 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4906      	ldr	r1, [pc, #24]	@ (800155c <__NVIC_EnableIRQ+0x34>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	@ (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	@ 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff90 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2d 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff42 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff35 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e043      	b.n	800177e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <HAL_DMA_Init+0xa8>)
 80016fe:	4413      	add	r3, r2
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_DMA_Init+0xac>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	009a      	lsls	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <HAL_DMA_Init+0xb0>)
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800172a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800172e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	bffdfff8 	.word	0xbffdfff8
 800178c:	cccccccd 	.word	0xcccccccd
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2204      	movs	r2, #4
 80017b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e020      	b.n	8001800 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 020e 	bic.w	r2, r2, #14
 80017cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d005      	beq.n	8001830 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e051      	b.n	80018d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020e 	bic.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <HAL_DMA_Abort_IT+0xd4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d029      	beq.n	80018ae <HAL_DMA_Abort_IT+0xa2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <HAL_DMA_Abort_IT+0xd8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <HAL_DMA_Abort_IT+0x9e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <HAL_DMA_Abort_IT+0xdc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01a      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x98>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_DMA_Abort_IT+0xe0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d012      	beq.n	800189e <HAL_DMA_Abort_IT+0x92>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <HAL_DMA_Abort_IT+0xe4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00a      	beq.n	8001898 <HAL_DMA_Abort_IT+0x8c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <HAL_DMA_Abort_IT+0xe8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d102      	bne.n	8001892 <HAL_DMA_Abort_IT+0x86>
 800188c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001890:	e00e      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 8001892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001896:	e00b      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 8001898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800189c:	e008      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 800189e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a2:	e005      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 80018a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a8:	e002      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 80018aa:	2310      	movs	r3, #16
 80018ac:	e000      	b.n	80018b0 <HAL_DMA_Abort_IT+0xa4>
 80018ae:	2301      	movs	r3, #1
 80018b0:	4a11      	ldr	r2, [pc, #68]	@ (80018f8 <HAL_DMA_Abort_IT+0xec>)
 80018b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
    } 
  }
  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40020008 	.word	0x40020008
 80018e4:	4002001c 	.word	0x4002001c
 80018e8:	40020030 	.word	0x40020030
 80018ec:	40020044 	.word	0x40020044
 80018f0:	40020058 	.word	0x40020058
 80018f4:	4002006c 	.word	0x4002006c
 80018f8:	40020000 	.word	0x40020000

080018fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	2204      	movs	r2, #4
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d04f      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xc8>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d04a      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a66      	ldr	r2, [pc, #408]	@ (8001aec <HAL_DMA_IRQHandler+0x1f0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d029      	beq.n	80019aa <HAL_DMA_IRQHandler+0xae>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a65      	ldr	r2, [pc, #404]	@ (8001af0 <HAL_DMA_IRQHandler+0x1f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_IRQHandler+0xaa>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a63      	ldr	r2, [pc, #396]	@ (8001af4 <HAL_DMA_IRQHandler+0x1f8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01a      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xa4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a62      	ldr	r2, [pc, #392]	@ (8001af8 <HAL_DMA_IRQHandler+0x1fc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d012      	beq.n	800199a <HAL_DMA_IRQHandler+0x9e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a60      	ldr	r2, [pc, #384]	@ (8001afc <HAL_DMA_IRQHandler+0x200>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x98>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5f      	ldr	r2, [pc, #380]	@ (8001b00 <HAL_DMA_IRQHandler+0x204>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <HAL_DMA_IRQHandler+0x92>
 8001988:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800198c:	e00e      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 800198e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001992:	e00b      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 8001994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001998:	e008      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 800199a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800199e:	e005      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 80019a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a4:	e002      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 80019a6:	2340      	movs	r3, #64	@ 0x40
 80019a8:	e000      	b.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 80019aa:	2304      	movs	r3, #4
 80019ac:	4a55      	ldr	r2, [pc, #340]	@ (8001b04 <HAL_DMA_IRQHandler+0x208>)
 80019ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8094 	beq.w	8001ae2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019c2:	e08e      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	2202      	movs	r2, #2
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d056      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x186>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d051      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10b      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 020a 	bic.w	r2, r2, #10
 80019fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a38      	ldr	r2, [pc, #224]	@ (8001aec <HAL_DMA_IRQHandler+0x1f0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d029      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x166>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a37      	ldr	r2, [pc, #220]	@ (8001af0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x162>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a35      	ldr	r2, [pc, #212]	@ (8001af4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01a      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x15c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a34      	ldr	r2, [pc, #208]	@ (8001af8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d012      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x156>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <HAL_DMA_IRQHandler+0x200>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00a      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x150>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a31      	ldr	r2, [pc, #196]	@ (8001b00 <HAL_DMA_IRQHandler+0x204>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d102      	bne.n	8001a46 <HAL_DMA_IRQHandler+0x14a>
 8001a40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a44:	e00e      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a4a:	e00b      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a50:	e008      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a56:	e005      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a5c:	e002      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_IRQHandler+0x168>
 8001a62:	2302      	movs	r3, #2
 8001a64:	4a27      	ldr	r2, [pc, #156]	@ (8001b04 <HAL_DMA_IRQHandler+0x208>)
 8001a66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d034      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a80:	e02f      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	2208      	movs	r2, #8
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d028      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x1e8>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d023      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 020e 	bic.w	r2, r2, #14
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
    }
  }
  return;
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
}
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40020008 	.word	0x40020008
 8001af0:	4002001c 	.word	0x4002001c
 8001af4:	40020030 	.word	0x40020030
 8001af8:	40020044 	.word	0x40020044
 8001afc:	40020058 	.word	0x40020058
 8001b00:	4002006c 	.word	0x4002006c
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b08b      	sub	sp, #44	@ 0x2c
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e169      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8158 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a9a      	ldr	r2, [pc, #616]	@ (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d05e      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b44:	4a98      	ldr	r2, [pc, #608]	@ (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d875      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a98      	ldr	r2, [pc, #608]	@ (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d058      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b50:	4a96      	ldr	r2, [pc, #600]	@ (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d86f      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b56:	4a96      	ldr	r2, [pc, #600]	@ (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d052      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a94      	ldr	r2, [pc, #592]	@ (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d869      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b62:	4a94      	ldr	r2, [pc, #592]	@ (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04c      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b68:	4a92      	ldr	r2, [pc, #584]	@ (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d863      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b6e:	4a92      	ldr	r2, [pc, #584]	@ (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d046      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b74:	4a90      	ldr	r2, [pc, #576]	@ (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d85d      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d82a      	bhi.n	8001bd4 <HAL_GPIO_Init+0xcc>
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d859      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b82:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <HAL_GPIO_Init+0x80>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001bdd 	.word	0x08001bdd
 8001b90:	08001bef 	.word	0x08001bef
 8001b94:	08001c31 	.word	0x08001c31
 8001b98:	08001c37 	.word	0x08001c37
 8001b9c:	08001c37 	.word	0x08001c37
 8001ba0:	08001c37 	.word	0x08001c37
 8001ba4:	08001c37 	.word	0x08001c37
 8001ba8:	08001c37 	.word	0x08001c37
 8001bac:	08001c37 	.word	0x08001c37
 8001bb0:	08001c37 	.word	0x08001c37
 8001bb4:	08001c37 	.word	0x08001c37
 8001bb8:	08001c37 	.word	0x08001c37
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c37 	.word	0x08001c37
 8001bc4:	08001c37 	.word	0x08001c37
 8001bc8:	08001c37 	.word	0x08001c37
 8001bcc:	08001be5 	.word	0x08001be5
 8001bd0:	08001bf9 	.word	0x08001bf9
 8001bd4:	4a79      	ldr	r2, [pc, #484]	@ (8001dbc <HAL_GPIO_Init+0x2b4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bda:	e02c      	b.n	8001c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e029      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	3304      	adds	r3, #4
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e024      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e01f      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e01a      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e013      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	611a      	str	r2, [r3, #16]
          break;
 8001c22:	e009      	b.n	8001c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c24:	2308      	movs	r3, #8
 8001c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	615a      	str	r2, [r3, #20]
          break;
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          break;
 8001c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2bff      	cmp	r3, #255	@ 0xff
 8001c3c:	d801      	bhi.n	8001c42 <HAL_GPIO_Init+0x13a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_Init+0x13e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2bff      	cmp	r3, #255	@ 0xff
 8001c4c:	d802      	bhi.n	8001c54 <HAL_GPIO_Init+0x14c>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x152>
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	3b08      	subs	r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	210f      	movs	r1, #15
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	6a39      	ldr	r1, [r7, #32]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b1 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c88:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ca0:	4a48      	ldr	r2, [pc, #288]	@ (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	@ (8001dc8 <HAL_GPIO_Init+0x2c0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_GPIO_Init+0x1ec>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3f      	ldr	r2, [pc, #252]	@ (8001dcc <HAL_GPIO_Init+0x2c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001dd0 <HAL_GPIO_Init+0x2c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x1e4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <HAL_GPIO_Init+0x2cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_GPIO_Init+0x1e0>
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e006      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e004      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d06:	492f      	ldr	r1, [pc, #188]	@ (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	492c      	ldr	r1, [pc, #176]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4928      	ldr	r1, [pc, #160]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4922      	ldr	r1, [pc, #136]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	491e      	ldr	r1, [pc, #120]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4918      	ldr	r1, [pc, #96]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4914      	ldr	r1, [pc, #80]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e021      	b.n	8001dea <HAL_GPIO_Init+0x2e2>
 8001da6:	bf00      	nop
 8001da8:	10320000 	.word	0x10320000
 8001dac:	10310000 	.word	0x10310000
 8001db0:	10220000 	.word	0x10220000
 8001db4:	10210000 	.word	0x10210000
 8001db8:	10120000 	.word	0x10120000
 8001dbc:	10110000 	.word	0x10110000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4909      	ldr	r1, [pc, #36]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	3301      	adds	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f47f ae8e 	bne.w	8001b1c <HAL_GPIO_Init+0x14>
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	372c      	adds	r7, #44	@ 0x2c
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e4a:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe f988 	bl	8000174 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40010400 	.word	0x40010400

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e272      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8087 	beq.w	8001f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e90:	4b92      	ldr	r3, [pc, #584]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d112      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb6:	4b89      	ldr	r3, [pc, #548]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d06c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x12c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d168      	bne.n	8001f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e24c      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x76>
 8001ed8:	4b80      	ldr	r3, [pc, #512]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a7f      	ldr	r2, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e02e      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b7b      	ldr	r3, [pc, #492]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7a      	ldr	r2, [pc, #488]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b78      	ldr	r3, [pc, #480]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0xbc>
 8001f12:	4b72      	ldr	r3, [pc, #456]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a71      	ldr	r2, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6e      	ldr	r2, [pc, #440]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b68      	ldr	r3, [pc, #416]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f89e 	bl	800108c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f89a 	bl	800108c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e200      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b5d      	ldr	r3, [pc, #372]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe4>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f88a 	bl	800108c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f886 	bl	800108c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1ec      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x10c>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1c0      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4939      	ldr	r1, [pc, #228]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff f83f 	bl	800108c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff f83b 	bl	800108c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1a1      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4927      	ldr	r1, [pc, #156]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f81e 	bl	800108c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f81a 	bl	800108c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e180      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03a      	beq.n	80020f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7fe fffe 	bl	800108c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe fffa 	bl	800108c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e160      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 face 	bl	8002654 <RCC_Delay>
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7fe ffe4 	bl	800108c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c6:	e00f      	b.n	80020e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe ffe0 	bl	800108c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d908      	bls.n	80020e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e146      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	42420000 	.word	0x42420000
 80020e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b92      	ldr	r3, [pc, #584]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e9      	bne.n	80020c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a6 	beq.w	800224e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b8b      	ldr	r3, [pc, #556]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b88      	ldr	r3, [pc, #544]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a87      	ldr	r2, [pc, #540]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b85      	ldr	r3, [pc, #532]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b82      	ldr	r3, [pc, #520]	@ (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <HAL_RCC_OscConfig+0x4c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7e      	ldr	r2, [pc, #504]	@ (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe ffa1 	bl	800108c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe ff9d 	bl	800108c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	@ 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e103      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b75      	ldr	r3, [pc, #468]	@ (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x312>
 8002174:	4b6f      	ldr	r3, [pc, #444]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a6e      	ldr	r2, [pc, #440]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e02d      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x334>
 800218a:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a69      	ldr	r2, [pc, #420]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b67      	ldr	r3, [pc, #412]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a66      	ldr	r2, [pc, #408]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	e01c      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x356>
 80021ac:	4b61      	ldr	r3, [pc, #388]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a60      	ldr	r2, [pc, #384]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	4b58      	ldr	r3, [pc, #352]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a57      	ldr	r2, [pc, #348]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe ff51 	bl	800108c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe ff4d 	bl	800108c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0b1      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b4b      	ldr	r3, [pc, #300]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCC_OscConfig+0x37e>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe ff3b 	bl	800108c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe ff37 	bl	800108c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e09b      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	4b40      	ldr	r3, [pc, #256]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b3c      	ldr	r3, [pc, #240]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a3b      	ldr	r2, [pc, #236]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8087 	beq.w	8002366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d061      	beq.n	8002328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d146      	bne.n	80022fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_RCC_OscConfig+0x4cc>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe ff0b 	bl	800108c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe ff07 	bl	800108c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e06d      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4921      	ldr	r1, [pc, #132]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a19      	ldr	r1, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	430b      	orrs	r3, r1
 80022c6:	491b      	ldr	r1, [pc, #108]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fedb 	bl	800108c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fed7 	bl	800108c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x46a>
 80022f8:	e035      	b.n	8002366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RCC_OscConfig+0x4cc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fec4 	bl	800108c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fec0 	bl	800108c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e026      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x498>
 8002326:	e01e      	b.n	8002366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e019      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_OscConfig+0x500>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4965      	ldr	r1, [pc, #404]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe fe12 	bl	800108c <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fe0e 	bl	800108c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4922      	ldr	r1, [pc, #136]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fd70 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	080096e4 	.word	0x080096e4
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x30>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x36>
 8002576:	e027      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	e027      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002596:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0c5b      	lsrs	r3, r3, #17
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	613b      	str	r3, [r7, #16]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	693b      	ldr	r3, [r7, #16]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	080096fc 	.word	0x080096fc
 80025e8:	0800970c 	.word	0x0800970c
 80025ec:	003d0900 	.word	0x003d0900

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	@ (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	080096f4 	.word	0x080096f4

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffde 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0adb      	lsrs	r3, r3, #11
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080096f4 	.word	0x080096f4

08002654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <RCC_Delay+0x34>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <RCC_Delay+0x38>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002670:	bf00      	nop
  }
  while (Delay --);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <RCC_Delay+0x1c>
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000000 	.word	0x20000000
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d07d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b0:	4b4f      	ldr	r3, [pc, #316]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	61d3      	str	r3, [r2, #28]
 80026c8:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d118      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e4:	4b43      	ldr	r3, [pc, #268]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a42      	ldr	r2, [pc, #264]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f0:	f7fe fccc 	bl	800108c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	e008      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7fe fcc8 	bl	800108c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e06d      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002716:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02e      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d027      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002734:	4b2e      	ldr	r3, [pc, #184]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273e:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800274a:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fc97 	bl	800108c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fc93 	bl	800108c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e036      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4917      	ldr	r1, [pc, #92]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	4313      	orrs	r3, r2
 8002794:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b4:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	490b      	ldr	r1, [pc, #44]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	42420440 	.word	0x42420440

080027fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e076      	b.n	80028fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281e:	d009      	beq.n	8002834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
 8002826:	e005      	b.n	8002834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe f9c0 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800286a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	0c1a      	lsrs	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 0204 	and.w	r2, r2, #4
 80028da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002914:	f7fe fbba 	bl	800108c <HAL_GetTick>
 8002918:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	e12a      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_Transmit+0x36>
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e122      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_SPI_Transmit+0x48>
 8002948:	2302      	movs	r3, #2
 800294a:	e11b      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299a:	d10f      	bne.n	80029bc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d007      	beq.n	80029da <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e2:	d152      	bne.n	8002a8a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_SPI_Transmit+0xee>
 80029ec:	8b7b      	ldrh	r3, [r7, #26]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d145      	bne.n	8002a7e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a16:	e032      	b.n	8002a7e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d112      	bne.n	8002a4c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	1c9a      	adds	r2, r3, #2
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a4a:	e018      	b.n	8002a7e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4c:	f7fe fb1e 	bl	800108c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d803      	bhi.n	8002a64 <HAL_SPI_Transmit+0x160>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d102      	bne.n	8002a6a <HAL_SPI_Transmit+0x166>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e082      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1c7      	bne.n	8002a18 <HAL_SPI_Transmit+0x114>
 8002a88:	e053      	b.n	8002b32 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_SPI_Transmit+0x194>
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d147      	bne.n	8002b28 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002abe:	e033      	b.n	8002b28 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d113      	bne.n	8002af6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002af4:	e018      	b.n	8002b28 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af6:	f7fe fac9 	bl	800108c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d803      	bhi.n	8002b0e <HAL_SPI_Transmit+0x20a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Transmit+0x210>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e02d      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1c6      	bne.n	8002ac0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fbc4 	bl	80032c4 <SPI_EndRxTxTransaction>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d001      	beq.n	8002bac <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e104      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb4:	d112      	bne.n	8002bdc <HAL_SPI_Receive+0x50>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f8f3 	bl	8002dbe <HAL_SPI_TransmitReceive>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e0ec      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bdc:	f7fe fa56 	bl	800108c <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_Receive+0x62>
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0e1      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_SPI_Receive+0x74>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0da      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4e:	d10f      	bne.n	8002c70 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d007      	beq.n	8002c8e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d170      	bne.n	8002d78 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c96:	e035      	b.n	8002d04 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d115      	bne.n	8002cd2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f103 020c 	add.w	r2, r3, #12
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cd0:	e018      	b.n	8002d04 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd2:	f7fe f9db 	bl	800108c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d803      	bhi.n	8002cea <HAL_SPI_Receive+0x15e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_Receive+0x164>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e058      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1c4      	bne.n	8002c98 <HAL_SPI_Receive+0x10c>
 8002d0e:	e038      	b.n	8002d82 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d113      	bne.n	8002d46 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d30:	1c9a      	adds	r2, r3, #2
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d44:	e018      	b.n	8002d78 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d46:	f7fe f9a1 	bl	800108c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d803      	bhi.n	8002d5e <HAL_SPI_Receive+0x1d2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Receive+0x1d8>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e01e      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1c6      	bne.n	8002d10 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fa4a 	bl	8003220 <SPI_EndRxTransaction>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	@ 0x28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd0:	f7fe f95c 	bl	800108c <HAL_GetTick>
 8002dd4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ddc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d00c      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x4a>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df4:	d106      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x46>
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d001      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	e17f      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x5c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x5c>
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e174      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x6e>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e16d      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d003      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2205      	movs	r2, #5
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d007      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea4:	d17e      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0xf6>
 8002eae:	8afb      	ldrh	r3, [r7, #22]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d16c      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	881a      	ldrh	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed8:	e059      	b.n	8002f8e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d11b      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x162>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0x162>
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d113      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d119      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1a4>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	b292      	uxth	r2, r2
 8002f44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f62:	f7fe f893 	bl	800108c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d80d      	bhi.n	8002f8e <HAL_SPI_TransmitReceive+0x1d0>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d009      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0bc      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1a0      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x11c>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d19b      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x11c>
 8002fa2:	e082      	b.n	80030aa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x1f4>
 8002fac:	8afb      	ldrh	r3, [r7, #22]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d171      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd8:	e05d      	b.n	8003096 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11c      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x264>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x264>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d114      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d119      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x2a6>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d014      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003060:	2301      	movs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003064:	f7fe f812 	bl	800108c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003070:	429a      	cmp	r2, r3
 8003072:	d803      	bhi.n	800307c <HAL_SPI_TransmitReceive+0x2be>
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d102      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x2c4>
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e038      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d19c      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x21c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d197      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f908 	bl	80032c4 <SPI_EndRxTxTransaction>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e01d      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	@ 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003120:	f7fd ffb4 	bl	800108c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	4413      	add	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003130:	f7fd ffac 	bl	800108c <HAL_GetTick>
 8003134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003136:	4b39      	ldr	r3, [pc, #228]	@ (800321c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	0d1b      	lsrs	r3, r3, #20
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003146:	e054      	b.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d050      	beq.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003150:	f7fd ff9c 	bl	800108c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d902      	bls.n	8003166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d13d      	bne.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800317e:	d111      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003188:	d004      	beq.n	8003194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d107      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ac:	d10f      	bne.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e017      	b.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d19b      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000000 	.word	0x20000000

08003220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003234:	d111      	bne.n	800325a <SPI_EndRxTransaction+0x3a>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800323e:	d004      	beq.n	800324a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003248:	d107      	bne.n	800325a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003258:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003262:	d117      	bne.n	8003294 <SPI_EndRxTransaction+0x74>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326c:	d112      	bne.n	8003294 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	2101      	movs	r1, #1
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff ff49 	bl	8003110 <SPI_WaitFlagStateUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01a      	beq.n	80032ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e013      	b.n	80032bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff36 	bl	8003110 <SPI_WaitFlagStateUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e000      	b.n	80032bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2201      	movs	r2, #1
 80032d8:	2102      	movs	r1, #2
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff ff18 	bl	8003110 <SPI_WaitFlagStateUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e013      	b.n	800331e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2180      	movs	r1, #128	@ 0x80
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff05 	bl	8003110 <SPI_WaitFlagStateUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e000      	b.n	800331e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e041      	b.n	80033bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fc9b 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4610      	mov	r0, r2
 8003366:	f000 fb1b 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fc72 	bl	8000cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 facc 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01b      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0202 	mvn.w	r2, #2
 8003496:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa5b 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 80034b2:	e005      	b.n	80034c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa4e 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa5d 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01b      	beq.n	8003512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0204 	mvn.w	r2, #4
 80034e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa35 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 80034fe:	e005      	b.n	800350c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa28 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa37 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01b      	beq.n	800355e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0208 	mvn.w	r2, #8
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2204      	movs	r2, #4
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa0f 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fa02 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa11 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f06f 0210 	mvn.w	r2, #16
 800357a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2208      	movs	r2, #8
 8003580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9e9 	bl	8003968 <HAL_TIM_IC_CaptureCallback>
 8003596:	e005      	b.n	80035a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f9dc 	bl	8003956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9eb 	bl	800397a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0201 	mvn.w	r2, #1
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fc fdff 	bl	80001cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fcca 	bl	8003f86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9bb 	bl	800398c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0220 	mvn.w	r2, #32
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fc9d 	bl	8003f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ae      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	f200 809f 	bhi.w	80037b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080037b1 	.word	0x080037b1
 8003680:	080037b1 	.word	0x080037b1
 8003684:	080037b1 	.word	0x080037b1
 8003688:	080036ed 	.word	0x080036ed
 800368c:	080037b1 	.word	0x080037b1
 8003690:	080037b1 	.word	0x080037b1
 8003694:	080037b1 	.word	0x080037b1
 8003698:	0800372f 	.word	0x0800372f
 800369c:	080037b1 	.word	0x080037b1
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	080037b1 	.word	0x080037b1
 80036a8:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f9e2 	bl	8003a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
      break;
 80036ea:	e064      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa28 	bl	8003b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
      break;
 800372c:	e043      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa71 	bl	8003c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0208 	orr.w	r2, r2, #8
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
      break;
 800376c:	e023      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fabb 	bl	8003cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_ConfigClockSource+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0b4      	b.n	800394e <HAL_TIM_ConfigClockSource+0x186>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d03e      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xd4>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	f200 8087 	bhi.w	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382a:	f000 8086 	beq.w	800393a <HAL_TIM_ConfigClockSource+0x172>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003832:	d87f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b70      	cmp	r3, #112	@ 0x70
 8003836:	d01a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xa6>
 8003838:	2b70      	cmp	r3, #112	@ 0x70
 800383a:	d87b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b60      	cmp	r3, #96	@ 0x60
 800383e:	d050      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003840:	2b60      	cmp	r3, #96	@ 0x60
 8003842:	d877      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b50      	cmp	r3, #80	@ 0x50
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003848:	2b50      	cmp	r3, #80	@ 0x50
 800384a:	d873      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d058      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x13a>
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d86f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b30      	cmp	r3, #48	@ 0x30
 8003856:	d064      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b30      	cmp	r3, #48	@ 0x30
 800385a:	d86b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d060      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d867      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d05a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	e062      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	f000 fafc 	bl	8003e7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e04f      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	f000 fae5 	bl	8003e7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e03c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa5c 	bl	8003d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	@ 0x50
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fab3 	bl	8003e46 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e02c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 fa7a 	bl	8003de8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	@ 0x60
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 faa3 	bl	8003e46 <TIM_ITRx_SetConfig>
      break;
 8003900:	e01c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	461a      	mov	r2, r3
 8003910:	f000 fa3c 	bl	8003d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa93 	bl	8003e46 <TIM_ITRx_SetConfig>
      break;
 8003920:	e00c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fa8a 	bl	8003e46 <TIM_ITRx_SetConfig>
      break;
 8003932:	e003      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800393a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
	...

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a70 <TIM_Base_SetConfig+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x30>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <TIM_Base_SetConfig+0xd4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x30>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <TIM_Base_SetConfig+0xd8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <TIM_Base_SetConfig+0xd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0x62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <TIM_Base_SetConfig+0xd4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0x62>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <TIM_Base_SetConfig+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <TIM_Base_SetConfig+0xd0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d103      	bne.n	8003a48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]
  }
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800

08003a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 0201 	bic.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f023 0302 	bic.w	r3, r3, #2
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <TIM_OC1_SetConfig+0xc8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10c      	bne.n	8003af2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0308 	bic.w	r3, r3, #8
 8003ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <TIM_OC1_SetConfig+0xc8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d111      	bne.n	8003b1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40012c00 	.word	0x40012c00

08003b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 0210 	bic.w	r2, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0320 	bic.w	r3, r3, #32
 8003b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c18 <TIM_OC2_SetConfig+0xd0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10d      	bne.n	8003bc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	@ (8003c18 <TIM_OC2_SetConfig+0xd0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d113      	bne.n	8003bf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40012c00 	.word	0x40012c00

08003c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1d      	ldr	r2, [pc, #116]	@ (8003cec <TIM_OC3_SetConfig+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10d      	bne.n	8003c96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <TIM_OC3_SetConfig+0xd0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00

08003cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <TIM_OC4_SetConfig+0x98>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00

08003d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f023 030a 	bic.w	r3, r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	031b      	lsls	r3, r3, #12
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f043 0307 	orr.w	r3, r3, #7
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e046      	b.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d009      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10c      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800

08003f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e042      	b.n	8004030 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc ff08 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	@ 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fdaf 	bl	8004b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	@ 0x28
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b20      	cmp	r3, #32
 8004056:	d175      	bne.n	8004144 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Transmit+0x2c>
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e06e      	b.n	8004146 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	@ 0x21
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004076:	f7fd f809 	bl	800108c <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004090:	d108      	bne.n	80040a4 <HAL_UART_Transmit+0x6c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e003      	b.n	80040ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ac:	e02e      	b.n	800410c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	@ 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fb13 	bl	80046e4 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e03a      	b.n	8004146 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3302      	adds	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e007      	b.n	80040fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1cb      	bne.n	80040ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	@ 0x40
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fadf 	bl	80046e4 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e006      	b.n	8004146 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	d112      	bne.n	800418e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Receive_IT+0x26>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e00b      	b.n	8004190 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	461a      	mov	r2, r3
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fb06 	bl	8004796 <UART_Start_Receive_IT>
 800418a:	4603      	mov	r3, r0
 800418c:	e000      	b.n	8004190 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b0ba      	sub	sp, #232	@ 0xe8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_UART_IRQHandler+0x66>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fbe3 	bl	80049c2 <UART_Receive_IT>
      return;
 80041fc:	e25b      	b.n	80046b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80de 	beq.w	80043c4 <HAL_UART_IRQHandler+0x22c>
 8004208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80d1 	beq.w	80043c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_UART_IRQHandler+0xae>
 800422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f043 0201 	orr.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xd2>
 8004252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_UART_IRQHandler+0xf6>
 8004276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	f043 0204 	orr.w	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d011      	beq.n	80042be <HAL_UART_IRQHandler+0x126>
 800429a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	f043 0208 	orr.w	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 81f2 	beq.w	80046ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_UART_IRQHandler+0x14e>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb6e 	bl	80049c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <HAL_UART_IRQHandler+0x17a>
 800430a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04f      	beq.n	80043b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa78 	bl	8004808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d041      	beq.n	80043aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800435e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800436a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1d9      	bne.n	8004326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	4a7e      	ldr	r2, [pc, #504]	@ (8004578 <HAL_UART_IRQHandler+0x3e0>)
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fa40 	bl	800180c <HAL_DMA_Abort_IT>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00e      	b.n	80043c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f98a 	bl	80046bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00a      	b.n	80043c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f986 	bl	80046bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e006      	b.n	80043c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f982 	bl	80046bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043be:	e175      	b.n	80046ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	bf00      	nop
    return;
 80043c2:	e173      	b.n	80046ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	f040 814f 	bne.w	800466c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8148 	beq.w	800466c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8141 	beq.w	800466c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80b6 	beq.w	800457c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800441c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8145 	beq.w	80046b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800442e:	429a      	cmp	r2, r3
 8004430:	f080 813e 	bcs.w	80046b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800443a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b20      	cmp	r3, #32
 8004444:	f000 8088 	beq.w	8004558 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800445e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004474:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800448c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1d9      	bne.n	8004448 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e1      	bne.n	8004494 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e3      	bne.n	80044d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800453a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800453c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e3      	bne.n	8004516 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd f91e 	bl	8001794 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004566:	b29b      	uxth	r3, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8ad 	bl	80046ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004574:	e09c      	b.n	80046b0 <HAL_UART_IRQHandler+0x518>
 8004576:	bf00      	nop
 8004578:	080048cd 	.word	0x080048cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 808e 	beq.w	80046b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8089 	beq.w	80046b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80045c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e3      	bne.n	80045a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	623b      	str	r3, [r7, #32]
   return(result);
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e3      	bne.n	80045da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004644:	61fa      	str	r2, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	617b      	str	r3, [r7, #20]
   return(result);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e3      	bne.n	8004620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f832 	bl	80046ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800466a:	e023      	b.n	80046b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_IRQHandler+0x4f4>
 8004678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f935 	bl	80048f4 <UART_Transmit_IT>
    return;
 800468a:	e014      	b.n	80046b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_UART_IRQHandler+0x51e>
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f974 	bl	8004992 <UART_EndTransmit_IT>
    return;
 80046aa:	e004      	b.n	80046b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046b4:	bf00      	nop
  }
}
 80046b6:	37e8      	adds	r7, #232	@ 0xe8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f4:	e03b      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d037      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fc fcc5 	bl	800108c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <UART_WaitOnFlagUntilTimeout+0x30>
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e03a      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d023      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b80      	cmp	r3, #128	@ 0x80
 800472a:	d020      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	d01d      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b08      	cmp	r3, #8
 800473e:	d116      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f856 	bl	8004808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2208      	movs	r2, #8
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e00f      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4013      	ands	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	429a      	cmp	r2, r3
 800478a:	d0b4      	beq.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2222      	movs	r2, #34	@ 0x22
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0220 	orr.w	r2, r2, #32
 80047fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b095      	sub	sp, #84	@ 0x54
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004830:	643a      	str	r2, [r7, #64]	@ 0x40
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e5      	bne.n	8004810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3314      	adds	r3, #20
 800484a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	61fb      	str	r3, [r7, #28]
   return(result);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800486a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	2b01      	cmp	r3, #1
 800487e:	d119      	bne.n	80048b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f023 0310 	bic.w	r3, r3, #16
 8004896:	647b      	str	r3, [r7, #68]	@ 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048a0:	61ba      	str	r2, [r7, #24]
 80048a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6979      	ldr	r1, [r7, #20]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	613b      	str	r3, [r7, #16]
   return(result);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048c2:	bf00      	nop
 80048c4:	3754      	adds	r7, #84	@ 0x54
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fee8 	bl	80046bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b21      	cmp	r3, #33	@ 0x21
 8004906:	d13e      	bne.n	8004986 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004910:	d114      	bne.n	800493c <UART_Transmit_IT+0x48>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	621a      	str	r2, [r3, #32]
 800493a:	e008      	b.n	800494e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6211      	str	r1, [r2, #32]
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4619      	mov	r1, r3
 800495c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004970:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004980:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f003 ff8c 	bl	80088d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08c      	sub	sp, #48	@ 0x30
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b22      	cmp	r3, #34	@ 0x22
 80049d4:	f040 80ae 	bne.w	8004b34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	d117      	bne.n	8004a12 <UART_Receive_IT+0x50>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a10:	e026      	b.n	8004a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d007      	beq.n	8004a36 <UART_Receive_IT+0x74>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <UART_Receive_IT+0x82>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e008      	b.n	8004a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d15d      	bne.n	8004b30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0220 	bic.w	r2, r2, #32
 8004a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d135      	bne.n	8004b26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f023 0310 	bic.w	r3, r3, #16
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	623a      	str	r2, [r7, #32]
 8004ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e5      	bne.n	8004ac0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d10a      	bne.n	8004b18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fdd5 	bl	80046ce <HAL_UARTEx_RxEventCallback>
 8004b24:	e002      	b.n	8004b2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f93a 	bl	8004da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e002      	b.n	8004b36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3730      	adds	r7, #48	@ 0x30
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b7a:	f023 030c 	bic.w	r3, r3, #12
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	430b      	orrs	r3, r1
 8004b86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <UART_SetConfig+0x114>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fd fd40 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	e002      	b.n	8004bb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fd fd28 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009a      	lsls	r2, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	4a22      	ldr	r2, [pc, #136]	@ (8004c58 <UART_SetConfig+0x118>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	0119      	lsls	r1, r3, #4
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009a      	lsls	r2, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bec:	4b1a      	ldr	r3, [pc, #104]	@ (8004c58 <UART_SetConfig+0x118>)
 8004bee:	fba3 0302 	umull	r0, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2064      	movs	r0, #100	@ 0x64
 8004bf6:	fb00 f303 	mul.w	r3, r0, r3
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	3332      	adds	r3, #50	@ 0x32
 8004c00:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <UART_SetConfig+0x118>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0c:	4419      	add	r1, r3
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <UART_SetConfig+0x118>)
 8004c26:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2064      	movs	r0, #100	@ 0x64
 8004c2e:	fb00 f303 	mul.w	r3, r0, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	3332      	adds	r3, #50	@ 0x32
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <UART_SetConfig+0x118>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	440a      	add	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40013800 	.word	0x40013800
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <hello_command_handler>:
#include "stdio.h"

CONSOLE_COMMAND_DEF(hello, "Say hello!");

static void hello_command_handler(const hello_args_t* args)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	console_write_function("Hi!\n");
 8004c64:	4803      	ldr	r0, [pc, #12]	@ (8004c74 <hello_command_handler+0x18>)
 8004c66:	f000 f8f9 	bl	8004e5c <console_write_function>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	08009494 	.word	0x08009494

08004c78 <s_command_handler>:

CONSOLE_COMMAND_DEF(s, "Gets a task info",
		CONSOLE_STR_ARG_DEF(task, "RTOS Task Name"));

static void s_command_handler(const s_args_t* args)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08e      	sub	sp, #56	@ 0x38
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	static char Mas[30];
	uint16_t LenStr = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	86fb      	strh	r3, [r7, #54]	@ 0x36
	// Show the free heap size.
	// Calling this function frequently will show if there is a memory leak.
	LenStr = sprintf(Mas,"Heap Size = %d \r\n", (int)xPortGetFreeHeapSize());
 8004c84:	f003 fc16 	bl	80084b4 <xPortGetFreeHeapSize>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4937      	ldr	r1, [pc, #220]	@ (8004d6c <s_command_handler+0xf4>)
 8004c8e:	4838      	ldr	r0, [pc, #224]	@ (8004d70 <s_command_handler+0xf8>)
 8004c90:	f003 fec8 	bl	8008a24 <siprintf>
 8004c94:	4603      	mov	r3, r0
 8004c96:	86fb      	strh	r3, [r7, #54]	@ 0x36
	HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004c98:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004c9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c9e:	4934      	ldr	r1, [pc, #208]	@ (8004d70 <s_command_handler+0xf8>)
 8004ca0:	4834      	ldr	r0, [pc, #208]	@ (8004d74 <s_command_handler+0xfc>)
 8004ca2:	f7ff f9c9 	bl	8004038 <HAL_UART_Transmit>

	// Show task uptime in seconds. FreeRTOS counts ticks, but mine are set to 1ms.
	LenStr = sprintf(Mas,"Uptime = %d s \r\n", (int)(xTaskGetTickCount()/1000));
 8004ca6:	f002 fa53 	bl	8007150 <xTaskGetTickCount>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4a32      	ldr	r2, [pc, #200]	@ (8004d78 <s_command_handler+0x100>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4931      	ldr	r1, [pc, #196]	@ (8004d7c <s_command_handler+0x104>)
 8004cb8:	482d      	ldr	r0, [pc, #180]	@ (8004d70 <s_command_handler+0xf8>)
 8004cba:	f003 feb3 	bl	8008a24 <siprintf>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004cc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004cc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cc8:	4929      	ldr	r1, [pc, #164]	@ (8004d70 <s_command_handler+0xf8>)
 8004cca:	482a      	ldr	r0, [pc, #168]	@ (8004d74 <s_command_handler+0xfc>)
 8004ccc:	f7ff f9b4 	bl	8004038 <HAL_UART_Transmit>
    TaskStatus_t xTaskStatus; // Create a structure for the status.

    // We read and obtain the title of the desired task.
    //The task's text label is passed as a parameter.
    // The task name is specified in quotation marks when created.
    TaskHandle_t xTask = xTaskGetHandle(args->task);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f002 fab7 	bl	8007248 <xTaskGetHandle>
 8004cda:	6338      	str	r0, [r7, #48]	@ 0x30

    // Read the task data by its title
    vTaskGetInfo(xTask, &xTaskStatus, pdTRUE, eInvalid);
 8004cdc:	f107 010c 	add.w	r1, r7, #12
 8004ce0:	2305      	movs	r3, #5
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ce6:	f002 fdc7 	bl	8007878 <vTaskGetInfo>

    // Display information about the task
    LenStr = sprintf(Mas,"Task name: %s \r\n", xTaskStatus.pcTaskName);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	461a      	mov	r2, r3
 8004cee:	4924      	ldr	r1, [pc, #144]	@ (8004d80 <s_command_handler+0x108>)
 8004cf0:	481f      	ldr	r0, [pc, #124]	@ (8004d70 <s_command_handler+0xf8>)
 8004cf2:	f003 fe97 	bl	8008a24 <siprintf>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004cfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004cfc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d00:	491b      	ldr	r1, [pc, #108]	@ (8004d70 <s_command_handler+0xf8>)
 8004d02:	481c      	ldr	r0, [pc, #112]	@ (8004d74 <s_command_handler+0xfc>)
 8004d04:	f7ff f998 	bl	8004038 <HAL_UART_Transmit>
    // 0 - running, 1 - waiting to start, ready,
    // 2 - blocked (waiting for something on a timer),
    // 3 - dormant (blocked with an infinite timeout),
    // 4 - deleted,
    // 5 - error.
    LenStr = sprintf(Mas,"Task status: %d \r\n", xTaskStatus.eCurrentState);
 8004d08:	7e3b      	ldrb	r3, [r7, #24]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	491d      	ldr	r1, [pc, #116]	@ (8004d84 <s_command_handler+0x10c>)
 8004d0e:	4818      	ldr	r0, [pc, #96]	@ (8004d70 <s_command_handler+0xf8>)
 8004d10:	f003 fe88 	bl	8008a24 <siprintf>
 8004d14:	4603      	mov	r3, r0
 8004d16:	86fb      	strh	r3, [r7, #54]	@ 0x36
    HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004d18:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d1e:	4914      	ldr	r1, [pc, #80]	@ (8004d70 <s_command_handler+0xf8>)
 8004d20:	4814      	ldr	r0, [pc, #80]	@ (8004d74 <s_command_handler+0xfc>)
 8004d22:	f7ff f989 	bl	8004038 <HAL_UART_Transmit>

    // Show the current priority of the task.
    LenStr = sprintf(Mas,"Task priority: %d \r\n", (int)xTaskStatus.uxCurrentPriority);
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4917      	ldr	r1, [pc, #92]	@ (8004d88 <s_command_handler+0x110>)
 8004d2c:	4810      	ldr	r0, [pc, #64]	@ (8004d70 <s_command_handler+0xf8>)
 8004d2e:	f003 fe79 	bl	8008a24 <siprintf>
 8004d32:	4603      	mov	r3, r0
 8004d34:	86fb      	strh	r3, [r7, #54]	@ 0x36
    HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004d36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d38:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d3c:	490c      	ldr	r1, [pc, #48]	@ (8004d70 <s_command_handler+0xf8>)
 8004d3e:	480d      	ldr	r0, [pc, #52]	@ (8004d74 <s_command_handler+0xfc>)
 8004d40:	f7ff f97a 	bl	8004038 <HAL_UART_Transmit>

    // Show the largest stack occupancy in the entire execution history.
    // How much free space remains in the worst case.
    LenStr = sprintf(Mas,"Task Freespace: %d \r\n", xTaskStatus.usStackHighWaterMark);
 8004d44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d46:	461a      	mov	r2, r3
 8004d48:	4910      	ldr	r1, [pc, #64]	@ (8004d8c <s_command_handler+0x114>)
 8004d4a:	4809      	ldr	r0, [pc, #36]	@ (8004d70 <s_command_handler+0xf8>)
 8004d4c:	f003 fe6a 	bl	8008a24 <siprintf>
 8004d50:	4603      	mov	r3, r0
 8004d52:	86fb      	strh	r3, [r7, #54]	@ 0x36
    HAL_UART_Transmit(&huart1, (uint8_t*)Mas, LenStr, 5000);
 8004d54:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d5a:	4905      	ldr	r1, [pc, #20]	@ (8004d70 <s_command_handler+0xf8>)
 8004d5c:	4805      	ldr	r0, [pc, #20]	@ (8004d74 <s_command_handler+0xfc>)
 8004d5e:	f7ff f96b 	bl	8004038 <HAL_UART_Transmit>
}
 8004d62:	bf00      	nop
 8004d64:	3738      	adds	r7, #56	@ 0x38
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	080094cc 	.word	0x080094cc
 8004d70:	2000054c 	.word	0x2000054c
 8004d74:	200004d8 	.word	0x200004d8
 8004d78:	10624dd3 	.word	0x10624dd3
 8004d7c:	080094e0 	.word	0x080094e0
 8004d80:	080094f4 	.word	0x080094f4
 8004d84:	08009508 	.word	0x08009508
 8004d88:	0800951c 	.word	0x0800951c
 8004d8c:	08009534 	.word	0x08009534

08004d90 <StartUartRX>:
#include <string.h>
#include "Console_Func.c"

uint8_t CharUartRX = 0; // принятый символ

void StartUartRX(){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
	HAL_UART_RxCpltCallback(NULL);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f000 f803 	bl	8004da0 <HAL_UART_RxCpltCallback>
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_UART_RxCpltCallback>:


/*
 * The task writes bytes received from the console to the queue
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	if(huart!= NULL){
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_UART_RxCpltCallback+0x2e>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
		xQueueSendFromISR(UART_Rx_QueHandle,&CharUartRX, &xHigherPriorityTaskWoken);
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_UART_RxCpltCallback+0x40>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	f107 020c 	add.w	r2, r7, #12
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4909      	ldr	r1, [pc, #36]	@ (8004de4 <HAL_UART_RxCpltCallback+0x44>)
 8004dbe:	f001 f9c5 	bl	800614c <xQueueGenericSendFromISR>

		HAL_UART_Receive_IT(huart, &CharUartRX, 1);
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4907      	ldr	r1, [pc, #28]	@ (8004de4 <HAL_UART_RxCpltCallback+0x44>)
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff f9c1 	bl	800414e <HAL_UART_Receive_IT>
	else{
		HAL_UART_Receive_IT(&huart1, &CharUartRX, 1);
	}
	// commented, assuming the context doesn't need to be changed. I'll wait for the tick.
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
 8004dcc:	e004      	b.n	8004dd8 <HAL_UART_RxCpltCallback+0x38>
		HAL_UART_Receive_IT(&huart1, &CharUartRX, 1);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4904      	ldr	r1, [pc, #16]	@ (8004de4 <HAL_UART_RxCpltCallback+0x44>)
 8004dd2:	4805      	ldr	r0, [pc, #20]	@ (8004de8 <HAL_UART_RxCpltCallback+0x48>)
 8004dd4:	f7ff f9bb 	bl	800414e <HAL_UART_Receive_IT>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000524 	.word	0x20000524
 8004de4:	20000548 	.word	0x20000548
 8004de8:	200004d8 	.word	0x200004d8

08004dec <USART1_Receive>:
 * Checks the end-of-line character and replaces it with the one accepted in
 * the given terminal application.
 */

uint32_t USART1_Receive(uint8_t chr, uint8_t *Buffer, uint32_t Length, TickType_t TimesUp)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
uint8_t Receive;
uint32_t i=0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

    while(1)
    {
        if(pdTRUE!=xQueueReceive(UART_Rx_QueHandle,&Receive,TimesUp)) return 0;
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <USART1_Receive+0x6c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f107 0113 	add.w	r1, r7, #19
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 facc 	bl	80063a8 <xQueueReceive>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d001      	beq.n	8004e1a <USART1_Receive+0x2e>
 8004e16:	2300      	movs	r3, #0
 8004e18:	e019      	b.n	8004e4e <USART1_Receive+0x62>

        if(Receive == chr)
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d108      	bne.n	8004e34 <USART1_Receive+0x48>
        {
            Buffer[i++] = 0x0A; //LF  OLD = chr
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	617a      	str	r2, [r7, #20]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	220a      	movs	r2, #10
 8004e2e:	701a      	strb	r2, [r3, #0]
            return i;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	e00c      	b.n	8004e4e <USART1_Receive+0x62>
        }

        if(i<Length)
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d207      	bcs.n	8004e4c <USART1_Receive+0x60>
        {
            Buffer[i++]=Receive;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	617a      	str	r2, [r7, #20]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	7cfa      	ldrb	r2, [r7, #19]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e7d9      	b.n	8004e00 <USART1_Receive+0x14>
        }
        else
        {
            return i;
 8004e4c:	697b      	ldr	r3, [r7, #20]
        }
    }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000524 	.word	0x20000524

08004e5c <console_write_function>:
* I'm creating a UART output function in blocking mode.
* The function is used by the terminal to output to the console.
 */

void console_write_function(const char* str)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	uint16_t Size = strlen(str);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fb f97d 	bl	8000164 <strlen>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, Size, 5000);
 8004e6e:	89fa      	ldrh	r2, [r7, #14]
 8004e70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4803      	ldr	r0, [pc, #12]	@ (8004e84 <console_write_function+0x28>)
 8004e78:	f7ff f8de 	bl	8004038 <HAL_UART_Transmit>
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200004d8 	.word	0x200004d8

08004e88 <MyConsole_Setup>:
 * Call this once in the task before using the console
 * Register all new commands here. Before doing this, don't forget to register
 * the macros and functions for these tasks in the Console_Func.c file
 */
void MyConsole_Setup(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	static console_init_t init_func;
	// Start receiving via UART using interrupts.
	StartUartRX();
 8004e8c:	f7ff ff80 	bl	8004d90 <StartUartRX>

	// Set the output function.
	init_func.write_function = console_write_function;
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <MyConsole_Setup+0x28>)
 8004e92:	4a08      	ldr	r2, [pc, #32]	@ (8004eb4 <MyConsole_Setup+0x2c>)
 8004e94:	601a      	str	r2, [r3, #0]
    console_init(&init_func);
 8004e96:	4806      	ldr	r0, [pc, #24]	@ (8004eb0 <MyConsole_Setup+0x28>)
 8004e98:	f000 fb64 	bl	8005564 <console_init>

    //Register commands. In this case, these are the commands hello, s
    console_command_register(hello);
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <MyConsole_Setup+0x30>)
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fb7a 	bl	8005598 <console_command_register>
    console_command_register(s);
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <MyConsole_Setup+0x34>)
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fb76 	bl	8005598 <console_command_register>
//    console_command_register(get);
}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000056c 	.word	0x2000056c
 8004eb4:	08004e5d 	.word	0x08004e5d
 8004eb8:	08009710 	.word	0x08009710
 8004ebc:	08009734 	.word	0x08009734

08004ec0 <validate_arg_def>:
static uint32_t m_history_start_index = 0;
static uint32_t m_history_len = 0;
static int32_t m_history_index = -1;
#endif

static bool validate_arg_def(const console_arg_def_t* arg, bool is_last) {
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
    switch (arg->type) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7a1b      	ldrb	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d814      	bhi.n	8004efe <validate_arg_def+0x3e>
        case CONSOLE_ARG_TYPE_INT:
        case CONSOLE_ARG_TYPE_STR:
            return arg->name && (!arg->is_optional || is_last);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <validate_arg_def+0x34>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7a5b      	ldrb	r3, [r3, #9]
 8004ee0:	f083 0301 	eor.w	r3, r3, #1
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <validate_arg_def+0x30>
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <validate_arg_def+0x34>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <validate_arg_def+0x36>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e000      	b.n	8004f00 <validate_arg_def+0x40>
        default:
            return false;
 8004efe:	2300      	movs	r3, #0
    }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
	...

08004f0c <get_command>:

static const console_command_def_t* get_command(const char* name) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < m_num_commands; i++) {
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e019      	b.n	8004f4e <get_command+0x42>
        if (!strcmp(m_commands[i].name, name)) {
 8004f1a:	4912      	ldr	r1, [pc, #72]	@ (8004f64 <get_command+0x58>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fb f90f 	bl	8000150 <strcmp>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <get_command+0x3c>
            return &m_commands[i];
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4a08      	ldr	r2, [pc, #32]	@ (8004f64 <get_command+0x58>)
 8004f44:	4413      	add	r3, r2
 8004f46:	e008      	b.n	8004f5a <get_command+0x4e>
    for (uint32_t i = 0; i < m_num_commands; i++) {
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <get_command+0x5c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3e0      	bcc.n	8004f1a <get_command+0xe>
        }
    }
    return NULL;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000578 	.word	0x20000578
 8004f68:	20000668 	.word	0x20000668

08004f6c <write_str>:

static void write_str(const char* str) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    if (!m_init.write_function) {
 8004f74:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <write_str+0x24>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <write_str+0x1a>
        return;
    }
    m_init.write_function(str);
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <write_str+0x24>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
 8004f84:	e000      	b.n	8004f88 <write_str+0x1c>
        return;
 8004f86:	bf00      	nop
}
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000574 	.word	0x20000574

08004f94 <parse_arg>:

static bool parse_arg(const char* arg_str, console_arg_type_t type, parsed_arg_t* parsed_arg) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <parse_arg+0x1a>
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d021      	beq.n	8004ff0 <parse_arg+0x5c>
 8004fac:	e025      	b.n	8004ffa <parse_arg+0x66>
        case CONSOLE_ARG_TYPE_INT: {
            char* end_ptr = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
            long int result = strtol(arg_str, &end_ptr, 0);
 8004fb2:	f107 0310 	add.w	r3, r7, #16
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f003 fd28 	bl	8008a10 <strtol>
 8004fc0:	6178      	str	r0, [r7, #20]
            if (result == LONG_MAX || result == LONG_MIN || end_ptr == NULL || *end_ptr != '\0') {
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00a      	beq.n	8004fe2 <parse_arg+0x4e>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fd2:	d006      	beq.n	8004fe2 <parse_arg+0x4e>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <parse_arg+0x4e>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <parse_arg+0x52>
                return false;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e00a      	b.n	8004ffc <parse_arg+0x68>
            }
            parsed_arg->value_int = (intptr_t)result;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	601a      	str	r2, [r3, #0]
            return true;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e005      	b.n	8004ffc <parse_arg+0x68>
        }
        case CONSOLE_ARG_TYPE_STR:
            parsed_arg->value_str = arg_str;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]
            return true;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <parse_arg+0x68>
        default:
            // should never get here
            return false;
 8004ffa:	2300      	movs	r3, #0
    }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <get_num_required_args>:

static uint32_t get_num_required_args(const console_command_def_t* cmd) {
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    if (cmd->num_args == 0) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <get_num_required_args+0x14>
        return 0;
 8005014:	2300      	movs	r3, #0
 8005016:	e01a      	b.n	800504e <get_num_required_args+0x4a>
    }
    const console_arg_def_t* last_arg = &cmd->args[cmd->num_args-1];
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68d9      	ldr	r1, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3b0c      	subs	r3, #12
 800502a:	440b      	add	r3, r1
 800502c:	60fb      	str	r3, [r7, #12]
    switch (last_arg->type) {
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	7a1b      	ldrb	r3, [r3, #8]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d80a      	bhi.n	800504c <get_num_required_args+0x48>
        case CONSOLE_ARG_TYPE_INT:
        case CONSOLE_ARG_TYPE_STR:
            if (last_arg->is_optional) {
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	7a5b      	ldrb	r3, [r3, #9]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <get_num_required_args+0x42>
                return cmd->num_args - 1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	3b01      	subs	r3, #1
 8005044:	e003      	b.n	800504e <get_num_required_args+0x4a>
            } else {
                return cmd->num_args;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	e000      	b.n	800504e <get_num_required_args+0x4a>
            }
        default:
            return 0;
 800504c:	2300      	movs	r3, #0
    }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <process_line>:

static void process_line(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
    if (m_line_invalid) {
 800505e:	4b69      	ldr	r3, [pc, #420]	@ (8005204 <process_line+0x1ac>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 80c6 	bne.w	80051f4 <process_line+0x19c>
        return;
    }

    // parse and validate the line
    const console_command_def_t* cmd = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]
    uint32_t arg_index = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    const char* current_token = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i <= m_line_len; i++) {
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e076      	b.n	8005168 <process_line+0x110>
        const char c = m_line_buffer[i];
 800507a:	4a63      	ldr	r2, [pc, #396]	@ (8005208 <process_line+0x1b0>)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	73fb      	strb	r3, [r7, #15]
        if (c == ' ' || c == '\0') {
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b20      	cmp	r3, #32
 8005088:	d002      	beq.n	8005090 <process_line+0x38>
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d161      	bne.n	8005154 <process_line+0xfc>
            // end of a token
            if (!current_token) {
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <process_line+0x4e>
                if (cmd) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80ad 	beq.w	80051f8 <process_line+0x1a0>
                    // too much whitespace
                    write_str("ERROR: Extra whitespace between arguments\n");
 800509e:	485b      	ldr	r0, [pc, #364]	@ (800520c <process_line+0x1b4>)
 80050a0:	f7ff ff64 	bl	8004f6c <write_str>
                    return;
 80050a4:	e0ab      	b.n	80051fe <process_line+0x1a6>
                    m_history_len++;
                }
            }
#endif
            // process this token
            m_line_buffer[i] = '\0';
 80050a6:	4a58      	ldr	r2, [pc, #352]	@ (8005208 <process_line+0x1b0>)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
            if (!cmd) {
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d110      	bne.n	80050d8 <process_line+0x80>
                // find the command
                cmd = get_command(current_token);
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff ff28 	bl	8004f0c <get_command>
 80050bc:	61f8      	str	r0, [r7, #28]
                if (!cmd) {
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d144      	bne.n	800514e <process_line+0xf6>
                    write_str("ERROR: Command not found (");
 80050c4:	4852      	ldr	r0, [pc, #328]	@ (8005210 <process_line+0x1b8>)
 80050c6:	f7ff ff51 	bl	8004f6c <write_str>
                    write_str(current_token);
 80050ca:	6978      	ldr	r0, [r7, #20]
 80050cc:	f7ff ff4e 	bl	8004f6c <write_str>
                    write_str(")\n");
 80050d0:	4850      	ldr	r0, [pc, #320]	@ (8005214 <process_line+0x1bc>)
 80050d2:	f7ff ff4b 	bl	8004f6c <write_str>
                    return;
 80050d6:	e092      	b.n	80051fe <process_line+0x1a6>
                }
            } else {
                // this is an argument
                if (arg_index == cmd->num_args) {
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d103      	bne.n	80050ea <process_line+0x92>
                    write_str("ERROR: Too many arguments\n");
 80050e2:	484d      	ldr	r0, [pc, #308]	@ (8005218 <process_line+0x1c0>)
 80050e4:	f7ff ff42 	bl	8004f6c <write_str>
                    return;
 80050e8:	e089      	b.n	80051fe <process_line+0x1a6>
                }
                // validate the argument
                const console_arg_def_t* arg = &cmd->args[arg_index];
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	60bb      	str	r3, [r7, #8]
                parsed_arg_t parsed_arg;
                if (!parse_arg(current_token, arg->type, &parsed_arg)) {
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	7a1b      	ldrb	r3, [r3, #8]
 8005100:	1d3a      	adds	r2, r7, #4
 8005102:	4619      	mov	r1, r3
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f7ff ff45 	bl	8004f94 <parse_arg>
 800510a:	4603      	mov	r3, r0
 800510c:	f083 0301 	eor.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <process_line+0xe2>
                    write_str("ERROR: Invalid value for '");
 8005116:	4841      	ldr	r0, [pc, #260]	@ (800521c <process_line+0x1c4>)
 8005118:	f7ff ff28 	bl	8004f6c <write_str>
                    write_str(arg->name);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff23 	bl	8004f6c <write_str>
                    write_str("' (");
 8005126:	483e      	ldr	r0, [pc, #248]	@ (8005220 <process_line+0x1c8>)
 8005128:	f7ff ff20 	bl	8004f6c <write_str>
                    write_str(current_token);
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f7ff ff1d 	bl	8004f6c <write_str>
                    write_str(")\n");
 8005132:	4838      	ldr	r0, [pc, #224]	@ (8005214 <process_line+0x1bc>)
 8005134:	f7ff ff1a 	bl	8004f6c <write_str>
                    return;
 8005138:	e061      	b.n	80051fe <process_line+0x1a6>
                }
                cmd->args_ptr[arg_index] = parsed_arg.ptr;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
                arg_index++;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3301      	adds	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
            }
            current_token = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e006      	b.n	8005162 <process_line+0x10a>
        } else if (!current_token) {
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <process_line+0x10a>
            current_token = &m_line_buffer[i];
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <process_line+0x1b0>)
 800515e:	4413      	add	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i <= m_line_len; i++) {
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3301      	adds	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <process_line+0x1cc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d983      	bls.n	800507a <process_line+0x22>
        }
    }

    if (!cmd) {
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d041      	beq.n	80051fc <process_line+0x1a4>
        // nothing entered - silently fail
        return;
    } else if (arg_index < get_num_required_args(cmd)) {
 8005178:	69f8      	ldr	r0, [r7, #28]
 800517a:	f7ff ff43 	bl	8005004 <get_num_required_args>
 800517e:	4602      	mov	r2, r0
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	4293      	cmp	r3, r2
 8005184:	d203      	bcs.n	800518e <process_line+0x136>
        write_str("ERROR: Too few arguments\n");
 8005186:	4828      	ldr	r0, [pc, #160]	@ (8005228 <process_line+0x1d0>)
 8005188:	f7ff fef0 	bl	8004f6c <write_str>
        return;
 800518c:	e037      	b.n	80051fe <process_line+0x1a6>
    }

    if (arg_index != cmd->num_args) {
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	429a      	cmp	r2, r3
 8005196:	d01e      	beq.n	80051d6 <process_line+0x17e>
        // set the optional argument to its default value
        switch (cmd->args[arg_index].type) {
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	7a1b      	ldrb	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <process_line+0x15c>
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d009      	beq.n	80051c6 <process_line+0x16e>
 80051b2:	e010      	b.n	80051d6 <process_line+0x17e>
            case CONSOLE_ARG_TYPE_INT:
                cmd->args_ptr[arg_index] = (void*)CONSOLE_INT_ARG_DEFAULT;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	601a      	str	r2, [r3, #0]
                break;
 80051c4:	e007      	b.n	80051d6 <process_line+0x17e>
            case CONSOLE_ARG_TYPE_STR:
                cmd->args_ptr[arg_index] = (void*)CONSOLE_STR_ARG_DEFAULT;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
                break;
 80051d4:	bf00      	nop
        }
    }

    // run the handler
    arg_index = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
    m_is_active = true;
 80051da:	4b14      	ldr	r3, [pc, #80]	@ (800522c <process_line+0x1d4>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
    cmd->handler(cmd->args_ptr);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	6952      	ldr	r2, [r2, #20]
 80051e8:	4610      	mov	r0, r2
 80051ea:	4798      	blx	r3
    m_is_active = false;
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <process_line+0x1d4>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e004      	b.n	80051fe <process_line+0x1a6>
        return;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <process_line+0x1a6>
                    return;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <process_line+0x1a6>
        return;
 80051fc:	bf00      	nop
}
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000688 	.word	0x20000688
 8005208:	2000066c 	.word	0x2000066c
 800520c:	080095c8 	.word	0x080095c8
 8005210:	080095f4 	.word	0x080095f4
 8005214:	08009610 	.word	0x08009610
 8005218:	08009614 	.word	0x08009614
 800521c:	08009630 	.word	0x08009630
 8005220:	0800964c 	.word	0x0800964c
 8005224:	20000680 	.word	0x20000680
 8005228:	08009650 	.word	0x08009650
 800522c:	20000689 	.word	0x20000689

08005230 <reset_line_and_print_prompt>:

static void reset_line_and_print_prompt(void) {
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
#if CONSOLE_HISTORY
    m_history_index = -1;
#endif
    m_escape_sequence_index = 0;
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <reset_line_and_print_prompt+0x2c>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
    m_line_len = 0;
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <reset_line_and_print_prompt+0x30>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    m_cursor_pos = 0;
 8005240:	4b08      	ldr	r3, [pc, #32]	@ (8005264 <reset_line_and_print_prompt+0x34>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
    m_line_invalid = false;
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <reset_line_and_print_prompt+0x38>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
    m_line_buffer[0] = '\0';
 800524c:	4b07      	ldr	r3, [pc, #28]	@ (800526c <reset_line_and_print_prompt+0x3c>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
    write_str(CONSOLE_PROMPT);
 8005252:	4807      	ldr	r0, [pc, #28]	@ (8005270 <reset_line_and_print_prompt+0x40>)
 8005254:	f7ff fe8a 	bl	8004f6c <write_str>
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	2000068c 	.word	0x2000068c
 8005260:	20000680 	.word	0x20000680
 8005264:	20000684 	.word	0x20000684
 8005268:	20000688 	.word	0x20000688
 800526c:	2000066c 	.word	0x2000066c
 8005270:	0800966c 	.word	0x0800966c

08005274 <push_char>:

static void push_char(char c) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
    if (m_cursor_pos != m_line_len) {
 800527e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <push_char+0x78>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <push_char+0x7c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d010      	beq.n	80052ac <push_char+0x38>
        // shift the existing data to the right to make space
        memmove(&m_line_buffer[m_cursor_pos + 1], &m_line_buffer[m_cursor_pos], m_line_len - m_cursor_pos);
 800528a:	4b18      	ldr	r3, [pc, #96]	@ (80052ec <push_char+0x78>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	4a18      	ldr	r2, [pc, #96]	@ (80052f4 <push_char+0x80>)
 8005292:	1898      	adds	r0, r3, r2
 8005294:	4b15      	ldr	r3, [pc, #84]	@ (80052ec <push_char+0x78>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <push_char+0x80>)
 800529a:	1899      	adds	r1, r3, r2
 800529c:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <push_char+0x7c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <push_char+0x78>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	f003 fbdc 	bl	8008a64 <memmove>
    }
    m_line_buffer[m_cursor_pos] = c;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <push_char+0x78>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4910      	ldr	r1, [pc, #64]	@ (80052f4 <push_char+0x80>)
 80052b2:	79fa      	ldrb	r2, [r7, #7]
 80052b4:	54ca      	strb	r2, [r1, r3]
    m_cursor_pos++;
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <push_char+0x78>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a0b      	ldr	r2, [pc, #44]	@ (80052ec <push_char+0x78>)
 80052be:	6013      	str	r3, [r2, #0]
    m_line_len++;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <push_char+0x7c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <push_char+0x7c>)
 80052c8:	6013      	str	r3, [r2, #0]
    m_line_buffer[m_line_len] = '\0';
 80052ca:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <push_char+0x7c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a09      	ldr	r2, [pc, #36]	@ (80052f4 <push_char+0x80>)
 80052d0:	2100      	movs	r1, #0
 80052d2:	54d1      	strb	r1, [r2, r3]
    if (m_line_len == CONSOLE_MAX_LINE_LENGTH) {
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <push_char+0x7c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b14      	cmp	r3, #20
 80052da:	d102      	bne.n	80052e2 <push_char+0x6e>
        // filled up the line buffer, so mark the line invalid
        m_line_invalid = true;
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <push_char+0x84>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
    }
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000684 	.word	0x20000684
 80052f0:	20000680 	.word	0x20000680
 80052f4:	2000066c 	.word	0x2000066c
 80052f8:	20000688 	.word	0x20000688

080052fc <help_command_handler>:
    }
}
#endif

#if CONSOLE_HELP_COMMAND
static void help_command_handler(const help_args_t* args) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b094      	sub	sp, #80	@ 0x50
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
    if (args->command != CONSOLE_STR_ARG_DEFAULT) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80ad 	beq.w	8005468 <help_command_handler+0x16c>
        const console_command_def_t* cmd_def = get_command(args->command);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fdfa 	bl	8004f0c <get_command>
 8005318:	61f8      	str	r0, [r7, #28]
        if (!cmd_def) {
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <help_command_handler+0x3c>
            write_str("ERROR: Unknown command (");
 8005320:	4884      	ldr	r0, [pc, #528]	@ (8005534 <help_command_handler+0x238>)
 8005322:	f7ff fe23 	bl	8004f6c <write_str>
            write_str(args->command);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fe1e 	bl	8004f6c <write_str>
            write_str(")\n");
 8005330:	4881      	ldr	r0, [pc, #516]	@ (8005538 <help_command_handler+0x23c>)
 8005332:	f7ff fe1b 	bl	8004f6c <write_str>
            return;
 8005336:	e0fa      	b.n	800552e <help_command_handler+0x232>
        }
        if (cmd_def->desc) {
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <help_command_handler+0x54>
            write_str(cmd_def->desc);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe11 	bl	8004f6c <write_str>
            write_str("\n");
 800534a:	487c      	ldr	r0, [pc, #496]	@ (800553c <help_command_handler+0x240>)
 800534c:	f7ff fe0e 	bl	8004f6c <write_str>
        }
        write_str("Usage: ");
 8005350:	487b      	ldr	r0, [pc, #492]	@ (8005540 <help_command_handler+0x244>)
 8005352:	f7ff fe0b 	bl	8004f6c <write_str>
        write_str(args->command);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fe06 	bl	8004f6c <write_str>
        uint32_t max_name_len = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for (uint32_t i = 0; i < cmd_def->num_args; i++) {
 8005364:	2300      	movs	r3, #0
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005368:	e035      	b.n	80053d6 <help_command_handler+0xda>
            const console_arg_def_t* arg_def = &cmd_def->args[i];
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	613b      	str	r3, [r7, #16]
            const uint32_t name_len = strlen(arg_def->name);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fa feef 	bl	8000164 <strlen>
 8005386:	60f8      	str	r0, [r7, #12]
            if (name_len > max_name_len) {
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538c:	429a      	cmp	r2, r3
 800538e:	d901      	bls.n	8005394 <help_command_handler+0x98>
                max_name_len = name_len;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
            if (arg_def->is_optional) {
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	7a5b      	ldrb	r3, [r3, #9]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <help_command_handler+0xa8>
                write_str(" [");
 800539c:	4869      	ldr	r0, [pc, #420]	@ (8005544 <help_command_handler+0x248>)
 800539e:	f7ff fde5 	bl	8004f6c <write_str>
 80053a2:	e002      	b.n	80053aa <help_command_handler+0xae>
            } else {
                write_str(" ");
 80053a4:	4868      	ldr	r0, [pc, #416]	@ (8005548 <help_command_handler+0x24c>)
 80053a6:	f7ff fde1 	bl	8004f6c <write_str>
            }
            write_str(cmd_def->args[i].name);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	68d9      	ldr	r1, [r3, #12]
 80053ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fdd5 	bl	8004f6c <write_str>
            if (arg_def->is_optional) {
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	7a5b      	ldrb	r3, [r3, #9]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <help_command_handler+0xd4>
                write_str("]");
 80053ca:	4860      	ldr	r0, [pc, #384]	@ (800554c <help_command_handler+0x250>)
 80053cc:	f7ff fdce 	bl	8004f6c <write_str>
        for (uint32_t i = 0; i < cmd_def->num_args; i++) {
 80053d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d2:	3301      	adds	r3, #1
 80053d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053dc:	429a      	cmp	r2, r3
 80053de:	d3c4      	bcc.n	800536a <help_command_handler+0x6e>
            }
        }
        write_str("\n");
 80053e0:	4856      	ldr	r0, [pc, #344]	@ (800553c <help_command_handler+0x240>)
 80053e2:	f7ff fdc3 	bl	8004f6c <write_str>
        for (uint32_t i = 0; i < cmd_def->num_args; i++) {
 80053e6:	2300      	movs	r3, #0
 80053e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ea:	e037      	b.n	800545c <help_command_handler+0x160>
            const console_arg_def_t* arg_def = &cmd_def->args[i];
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	68d9      	ldr	r1, [r3, #12]
 80053f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	61bb      	str	r3, [r7, #24]
            write_str("  ");
 80053fe:	4854      	ldr	r0, [pc, #336]	@ (8005550 <help_command_handler+0x254>)
 8005400:	f7ff fdb4 	bl	8004f6c <write_str>
            write_str(arg_def->name);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fdaf 	bl	8004f6c <write_str>
            if (arg_def->desc) {
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01c      	beq.n	8005450 <help_command_handler+0x154>
                // pad the description so they all line up
                const uint32_t name_len = strlen(arg_def->name);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa fea2 	bl	8000164 <strlen>
 8005420:	6178      	str	r0, [r7, #20]
                for (uint32_t j = 0; j < max_name_len - name_len; j++) {
 8005422:	2300      	movs	r3, #0
 8005424:	643b      	str	r3, [r7, #64]	@ 0x40
 8005426:	e005      	b.n	8005434 <help_command_handler+0x138>
                    write_str(" ");
 8005428:	4847      	ldr	r0, [pc, #284]	@ (8005548 <help_command_handler+0x24c>)
 800542a:	f7ff fd9f 	bl	8004f6c <write_str>
                for (uint32_t j = 0; j < max_name_len - name_len; j++) {
 800542e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005430:	3301      	adds	r3, #1
 8005432:	643b      	str	r3, [r7, #64]	@ 0x40
 8005434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800543c:	429a      	cmp	r2, r3
 800543e:	d3f3      	bcc.n	8005428 <help_command_handler+0x12c>
                }
                write_str(" - ");
 8005440:	4844      	ldr	r0, [pc, #272]	@ (8005554 <help_command_handler+0x258>)
 8005442:	f7ff fd93 	bl	8004f6c <write_str>
                write_str(arg_def->desc);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fd8e 	bl	8004f6c <write_str>
            }
            write_str("\n");
 8005450:	483a      	ldr	r0, [pc, #232]	@ (800553c <help_command_handler+0x240>)
 8005452:	f7ff fd8b 	bl	8004f6c <write_str>
        for (uint32_t i = 0; i < cmd_def->num_args; i++) {
 8005456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005458:	3301      	adds	r3, #1
 800545a:	647b      	str	r3, [r7, #68]	@ 0x44
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005462:	429a      	cmp	r2, r3
 8005464:	d3c2      	bcc.n	80053ec <help_command_handler+0xf0>
 8005466:	e062      	b.n	800552e <help_command_handler+0x232>
        }
    } else {
        write_str("Available commands:\n");
 8005468:	483b      	ldr	r0, [pc, #236]	@ (8005558 <help_command_handler+0x25c>)
 800546a:	f7ff fd7f 	bl	8004f6c <write_str>
        // get the max name length for padding
        uint32_t max_name_len = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (uint32_t i = 0; i < m_num_commands; i++) {
 8005472:	2300      	movs	r3, #0
 8005474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005476:	e016      	b.n	80054a6 <help_command_handler+0x1aa>
            const console_command_def_t* cmd_def = &m_commands[i];
 8005478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4a36      	ldr	r2, [pc, #216]	@ (800555c <help_command_handler+0x260>)
 8005484:	4413      	add	r3, r2
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
            const uint32_t name_len = strlen(cmd_def->name);
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fa fe69 	bl	8000164 <strlen>
 8005492:	6238      	str	r0, [r7, #32]
            if (name_len > max_name_len) {
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005498:	429a      	cmp	r2, r3
 800549a:	d901      	bls.n	80054a0 <help_command_handler+0x1a4>
                max_name_len = name_len;
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (uint32_t i = 0; i < m_num_commands; i++) {
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	3301      	adds	r3, #1
 80054a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005560 <help_command_handler+0x264>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d3e3      	bcc.n	8005478 <help_command_handler+0x17c>
            }
        }
        for (uint32_t i = 0; i < m_num_commands; i++) {
 80054b0:	2300      	movs	r3, #0
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b4:	e036      	b.n	8005524 <help_command_handler+0x228>
            const console_command_def_t* cmd_def = &m_commands[i];
 80054b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4a26      	ldr	r2, [pc, #152]	@ (800555c <help_command_handler+0x260>)
 80054c2:	4413      	add	r3, r2
 80054c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            write_str("  ");
 80054c6:	4822      	ldr	r0, [pc, #136]	@ (8005550 <help_command_handler+0x254>)
 80054c8:	f7ff fd50 	bl	8004f6c <write_str>
            write_str(cmd_def->name);
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fd4b 	bl	8004f6c <write_str>
            if (cmd_def->desc) {
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01c      	beq.n	8005518 <help_command_handler+0x21c>
                // pad the description so they all line up
                const uint32_t name_len = strlen(cmd_def->name);
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fa fe3e 	bl	8000164 <strlen>
 80054e8:	62b8      	str	r0, [r7, #40]	@ 0x28
                for (uint32_t j = 0; j < max_name_len - name_len; j++) {
 80054ea:	2300      	movs	r3, #0
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ee:	e005      	b.n	80054fc <help_command_handler+0x200>
                    write_str(" ");
 80054f0:	4815      	ldr	r0, [pc, #84]	@ (8005548 <help_command_handler+0x24c>)
 80054f2:	f7ff fd3b 	bl	8004f6c <write_str>
                for (uint32_t j = 0; j < max_name_len - name_len; j++) {
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	3301      	adds	r3, #1
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80054fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005504:	429a      	cmp	r2, r3
 8005506:	d3f3      	bcc.n	80054f0 <help_command_handler+0x1f4>
                }
                write_str(" - ");
 8005508:	4812      	ldr	r0, [pc, #72]	@ (8005554 <help_command_handler+0x258>)
 800550a:	f7ff fd2f 	bl	8004f6c <write_str>
                write_str(cmd_def->desc);
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fd2a 	bl	8004f6c <write_str>
            }
            write_str("\n");
 8005518:	4808      	ldr	r0, [pc, #32]	@ (800553c <help_command_handler+0x240>)
 800551a:	f7ff fd27 	bl	8004f6c <write_str>
        for (uint32_t i = 0; i < m_num_commands; i++) {
 800551e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005520:	3301      	adds	r3, #1
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
 8005524:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <help_command_handler+0x264>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800552a:	429a      	cmp	r2, r3
 800552c:	d3c3      	bcc.n	80054b6 <help_command_handler+0x1ba>
        }
    }
}
 800552e:	3750      	adds	r7, #80	@ 0x50
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08009680 	.word	0x08009680
 8005538:	08009610 	.word	0x08009610
 800553c:	0800969c 	.word	0x0800969c
 8005540:	080096a0 	.word	0x080096a0
 8005544:	080096a8 	.word	0x080096a8
 8005548:	08009678 	.word	0x08009678
 800554c:	080096ac 	.word	0x080096ac
 8005550:	080096b0 	.word	0x080096b0
 8005554:	080096b4 	.word	0x080096b4
 8005558:	080096b8 	.word	0x080096b8
 800555c:	20000578 	.word	0x20000578
 8005560:	20000668 	.word	0x20000668

08005564 <console_init>:
#endif

void console_init(const console_init_t* init) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    m_init = *init;
 800556c:	4a07      	ldr	r2, [pc, #28]	@ (800558c <console_init+0x28>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6013      	str	r3, [r2, #0]
#if CONSOLE_HELP_COMMAND
    console_command_register(help);
 8005574:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <console_init+0x2c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f80e 	bl	8005598 <console_command_register>
#endif
    write_str("\n" CONSOLE_PROMPT);
 800557c:	4805      	ldr	r0, [pc, #20]	@ (8005594 <console_init+0x30>)
 800557e:	f7ff fcf5 	bl	8004f6c <write_str>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000574 	.word	0x20000574
 8005590:	08009758 	.word	0x08009758
 8005594:	080096d0 	.word	0x080096d0

08005598 <console_command_register>:

bool console_command_register(const console_command_def_t* cmd) {
 8005598:	b5b0      	push	{r4, r5, r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    if (m_num_commands == CONSOLE_MAX_COMMANDS) {
 80055a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <console_command_register+0xc0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b0a      	cmp	r3, #10
 80055a6:	d101      	bne.n	80055ac <console_command_register+0x14>
        return false;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e051      	b.n	8005650 <console_command_register+0xb8>
    }
    // validate the command
    if (!cmd->name || !cmd->handler || strlen(cmd->name) >= CONSOLE_MAX_LINE_LENGTH) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <console_command_register+0x34>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <console_command_register+0x34>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fa fdcf 	bl	8000164 <strlen>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b13      	cmp	r3, #19
 80055ca:	d901      	bls.n	80055d0 <console_command_register+0x38>
        return false;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e03f      	b.n	8005650 <console_command_register+0xb8>
    }
    // validate the arguments
    for (uint32_t i = 0; i < cmd->num_args; i++) {
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e018      	b.n	8005608 <console_command_register+0x70>
        if (!validate_arg_def(cmd->args, i + 1 == cmd->num_args)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68d8      	ldr	r0, [r3, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	f7ff fc67 	bl	8004ec0 <validate_arg_def>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f083 0301 	eor.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <console_command_register+0x6a>
            return false;
 80055fe:	2300      	movs	r3, #0
 8005600:	e026      	b.n	8005650 <console_command_register+0xb8>
    for (uint32_t i = 0; i < cmd->num_args; i++) {
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	429a      	cmp	r2, r3
 8005610:	d3e1      	bcc.n	80055d6 <console_command_register+0x3e>
        }
    }
    // make sure it's not already registered
    if (get_command(cmd->name)) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fc78 	bl	8004f0c <get_command>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <console_command_register+0x8e>
        return false;
 8005622:	2300      	movs	r3, #0
 8005624:	e014      	b.n	8005650 <console_command_register+0xb8>
    }
    // add the command
    m_commands[m_num_commands++] = *cmd;
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <console_command_register+0xc0>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	1c53      	adds	r3, r2, #1
 800562c:	490a      	ldr	r1, [pc, #40]	@ (8005658 <console_command_register+0xc0>)
 800562e:	600b      	str	r3, [r1, #0]
 8005630:	490a      	ldr	r1, [pc, #40]	@ (800565c <console_command_register+0xc4>)
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	18ca      	adds	r2, r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4614      	mov	r4, r2
 8005640:	461d      	mov	r5, r3
 8005642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005646:	e895 0003 	ldmia.w	r5, {r0, r1}
 800564a:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
 800564e:	2301      	movs	r3, #1
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	20000668 	.word	0x20000668
 800565c:	20000578 	.word	0x20000578

08005660 <console_process>:

void console_process(const uint8_t* data, uint32_t length) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	@ 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
#if CONSOLE_FULL_CONTROL
    const char* echo_str = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint32_t i = 0; i < length; i++) {
 800566e:	2300      	movs	r3, #0
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	e13f      	b.n	80058f4 <console_process+0x294>
        const char c = data[i];
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	4413      	add	r3, r2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	75fb      	strb	r3, [r7, #23]
        if (m_escape_sequence_index == 0 && c == '\x1b') {
 800567e:	4b92      	ldr	r3, [pc, #584]	@ (80058c8 <console_process+0x268>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d108      	bne.n	8005698 <console_process+0x38>
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b1b      	cmp	r3, #27
 800568a:	d105      	bne.n	8005698 <console_process+0x38>
            // start of an escape sequence
            m_escape_sequence_index++;
 800568c:	4b8e      	ldr	r3, [pc, #568]	@ (80058c8 <console_process+0x268>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	4a8d      	ldr	r2, [pc, #564]	@ (80058c8 <console_process+0x268>)
 8005694:	6013      	str	r3, [r2, #0]
            continue;
 8005696:	e12a      	b.n	80058ee <console_process+0x28e>
        } else if (m_escape_sequence_index == 1) {
 8005698:	4b8b      	ldr	r3, [pc, #556]	@ (80058c8 <console_process+0x268>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <console_process+0x5a>
            if (c == '[') {
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80056a4:	d105      	bne.n	80056b2 <console_process+0x52>
                m_escape_sequence_index++;
 80056a6:	4b88      	ldr	r3, [pc, #544]	@ (80058c8 <console_process+0x268>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	4a86      	ldr	r2, [pc, #536]	@ (80058c8 <console_process+0x268>)
 80056ae:	6013      	str	r3, [r2, #0]
            } else {
                // invalid escape sequence
                m_escape_sequence_index = 0;
            }
            continue;
 80056b0:	e11d      	b.n	80058ee <console_process+0x28e>
                m_escape_sequence_index = 0;
 80056b2:	4b85      	ldr	r3, [pc, #532]	@ (80058c8 <console_process+0x268>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
            continue;
 80056b8:	e119      	b.n	80058ee <console_process+0x28e>
        } else if (m_escape_sequence_index == 2) {
 80056ba:	4b83      	ldr	r3, [pc, #524]	@ (80058c8 <console_process+0x268>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d130      	bne.n	8005724 <console_process+0xc4>
            // process the command
            m_escape_sequence_index = 0;
 80056c2:	4b81      	ldr	r3, [pc, #516]	@ (80058c8 <console_process+0x268>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
            if (c == 'C') {
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b43      	cmp	r3, #67	@ 0x43
 80056cc:	d118      	bne.n	8005700 <console_process+0xa0>
                // right arrow
                if (m_cursor_pos < m_line_len) {
 80056ce:	4b7f      	ldr	r3, [pc, #508]	@ (80058cc <console_process+0x26c>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b7f      	ldr	r3, [pc, #508]	@ (80058d0 <console_process+0x270>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f080 80f4 	bcs.w	80058c4 <console_process+0x264>
                    const char str[2] = {m_line_buffer[m_cursor_pos], '\0'};
 80056dc:	4b7b      	ldr	r3, [pc, #492]	@ (80058cc <console_process+0x26c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7c      	ldr	r2, [pc, #496]	@ (80058d4 <console_process+0x274>)
 80056e2:	5cd3      	ldrb	r3, [r2, r3]
 80056e4:	733b      	strb	r3, [r7, #12]
 80056e6:	2300      	movs	r3, #0
 80056e8:	737b      	strb	r3, [r7, #13]
                    write_str(str);
 80056ea:	f107 030c 	add.w	r3, r7, #12
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fc3c 	bl	8004f6c <write_str>
                    m_cursor_pos++;
 80056f4:	4b75      	ldr	r3, [pc, #468]	@ (80058cc <console_process+0x26c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	4a74      	ldr	r2, [pc, #464]	@ (80058cc <console_process+0x26c>)
 80056fc:	6013      	str	r3, [r2, #0]
                m_cursor_pos = m_line_len;
                write_str(CONSOLE_PROMPT);
                write_str(m_line_buffer);
            }
#endif
            continue;
 80056fe:	e0e1      	b.n	80058c4 <console_process+0x264>
            } else if (c == 'D') {
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b44      	cmp	r3, #68	@ 0x44
 8005704:	f040 80de 	bne.w	80058c4 <console_process+0x264>
                if (m_cursor_pos) {
 8005708:	4b70      	ldr	r3, [pc, #448]	@ (80058cc <console_process+0x26c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80d9 	beq.w	80058c4 <console_process+0x264>
                    write_str("\b");
 8005712:	4871      	ldr	r0, [pc, #452]	@ (80058d8 <console_process+0x278>)
 8005714:	f7ff fc2a 	bl	8004f6c <write_str>
                    m_cursor_pos--;
 8005718:	4b6c      	ldr	r3, [pc, #432]	@ (80058cc <console_process+0x26c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3b01      	subs	r3, #1
 800571e:	4a6b      	ldr	r2, [pc, #428]	@ (80058cc <console_process+0x26c>)
 8005720:	6013      	str	r3, [r2, #0]
            continue;
 8005722:	e0cf      	b.n	80058c4 <console_process+0x264>
        }
        if (c == '\n') {
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	2b0a      	cmp	r3, #10
 8005728:	d10f      	bne.n	800574a <console_process+0xea>
            if (echo_str) {
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <console_process+0xda>
                write_str(echo_str);
 8005730:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005732:	f7ff fc1b 	bl	8004f6c <write_str>
                echo_str = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            write_str("\n");
 800573a:	4868      	ldr	r0, [pc, #416]	@ (80058dc <console_process+0x27c>)
 800573c:	f7ff fc16 	bl	8004f6c <write_str>
            process_line();
 8005740:	f7ff fc8a 	bl	8005058 <process_line>
            reset_line_and_print_prompt();
 8005744:	f7ff fd74 	bl	8005230 <reset_line_and_print_prompt>
 8005748:	e0d1      	b.n	80058ee <console_process+0x28e>
        } else if (c == CHAR_CTRL_C) {
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d10f      	bne.n	8005770 <console_process+0x110>
            if (echo_str) {
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <console_process+0x100>
                write_str(echo_str);
 8005756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005758:	f7ff fc08 	bl	8004f6c <write_str>
                echo_str = NULL;
 800575c:	2300      	movs	r3, #0
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            write_str("\n");
 8005760:	485e      	ldr	r0, [pc, #376]	@ (80058dc <console_process+0x27c>)
 8005762:	f7ff fc03 	bl	8004f6c <write_str>
            reset_line_and_print_prompt();
 8005766:	f7ff fd63 	bl	8005230 <reset_line_and_print_prompt>
            echo_str = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
 800576e:	e0be      	b.n	80058ee <console_process+0x28e>
        } else if (!m_line_invalid && c == '\b') {
 8005770:	4b5b      	ldr	r3, [pc, #364]	@ (80058e0 <console_process+0x280>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f083 0301 	eor.w	r3, r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d05b      	beq.n	8005836 <console_process+0x1d6>
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d158      	bne.n	8005836 <console_process+0x1d6>
            if (echo_str) {
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <console_process+0x134>
                write_str(echo_str);
 800578a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800578c:	f7ff fbee 	bl	8004f6c <write_str>
                echo_str = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
            }
            if (m_cursor_pos) {
 8005794:	4b4d      	ldr	r3, [pc, #308]	@ (80058cc <console_process+0x26c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80a7 	beq.w	80058ec <console_process+0x28c>
                write_str("\b \b");
 800579e:	4851      	ldr	r0, [pc, #324]	@ (80058e4 <console_process+0x284>)
 80057a0:	f7ff fbe4 	bl	8004f6c <write_str>
                if (m_cursor_pos != m_line_len) {
 80057a4:	4b49      	ldr	r3, [pc, #292]	@ (80058cc <console_process+0x26c>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b49      	ldr	r3, [pc, #292]	@ (80058d0 <console_process+0x270>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d010      	beq.n	80057d2 <console_process+0x172>
                    // shift all the characters in the line down
                    memmove(&m_line_buffer[m_cursor_pos-1], &m_line_buffer[m_cursor_pos], m_line_len - m_cursor_pos);
 80057b0:	4b46      	ldr	r3, [pc, #280]	@ (80058cc <console_process+0x26c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4a47      	ldr	r2, [pc, #284]	@ (80058d4 <console_process+0x274>)
 80057b8:	1898      	adds	r0, r3, r2
 80057ba:	4b44      	ldr	r3, [pc, #272]	@ (80058cc <console_process+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a45      	ldr	r2, [pc, #276]	@ (80058d4 <console_process+0x274>)
 80057c0:	1899      	adds	r1, r3, r2
 80057c2:	4b43      	ldr	r3, [pc, #268]	@ (80058d0 <console_process+0x270>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b41      	ldr	r3, [pc, #260]	@ (80058cc <console_process+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	f003 f949 	bl	8008a64 <memmove>
                }
                m_cursor_pos--;
 80057d2:	4b3e      	ldr	r3, [pc, #248]	@ (80058cc <console_process+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	4a3c      	ldr	r2, [pc, #240]	@ (80058cc <console_process+0x26c>)
 80057da:	6013      	str	r3, [r2, #0]
                m_line_len--;
 80057dc:	4b3c      	ldr	r3, [pc, #240]	@ (80058d0 <console_process+0x270>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4a3b      	ldr	r2, [pc, #236]	@ (80058d0 <console_process+0x270>)
 80057e4:	6013      	str	r3, [r2, #0]
                m_line_buffer[m_line_len] = '\0';
 80057e6:	4b3a      	ldr	r3, [pc, #232]	@ (80058d0 <console_process+0x270>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3a      	ldr	r2, [pc, #232]	@ (80058d4 <console_process+0x274>)
 80057ec:	2100      	movs	r1, #0
 80057ee:	54d1      	strb	r1, [r2, r3]
                if (m_cursor_pos != m_line_len) {
 80057f0:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <console_process+0x26c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b36      	ldr	r3, [pc, #216]	@ (80058d0 <console_process+0x270>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d077      	beq.n	80058ec <console_process+0x28c>
                    write_str(&m_line_buffer[m_cursor_pos]);
 80057fc:	4b33      	ldr	r3, [pc, #204]	@ (80058cc <console_process+0x26c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a34      	ldr	r2, [pc, #208]	@ (80058d4 <console_process+0x274>)
 8005802:	4413      	add	r3, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fbb1 	bl	8004f6c <write_str>
                    write_str(" ");
 800580a:	4837      	ldr	r0, [pc, #220]	@ (80058e8 <console_process+0x288>)
 800580c:	f7ff fbae 	bl	8004f6c <write_str>
                    for (uint32_t i = 0; i < m_line_len - m_cursor_pos + 1; i++) {
 8005810:	2300      	movs	r3, #0
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e005      	b.n	8005822 <console_process+0x1c2>
                        write_str("\b");
 8005816:	4830      	ldr	r0, [pc, #192]	@ (80058d8 <console_process+0x278>)
 8005818:	f7ff fba8 	bl	8004f6c <write_str>
                    for (uint32_t i = 0; i < m_line_len - m_cursor_pos + 1; i++) {
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	4b2b      	ldr	r3, [pc, #172]	@ (80058d0 <console_process+0x270>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <console_process+0x26c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	3301      	adds	r3, #1
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3f0      	bcc.n	8005816 <console_process+0x1b6>
            if (m_cursor_pos) {
 8005834:	e05a      	b.n	80058ec <console_process+0x28c>
                write_str(echo_str);
                echo_str = NULL;
            }
            do_tab_complete();
#endif
        } else if (!m_line_invalid && c >= ' ' && c <= '~') {
 8005836:	4b2a      	ldr	r3, [pc, #168]	@ (80058e0 <console_process+0x280>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d054      	beq.n	80058ee <console_process+0x28e>
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	2b1f      	cmp	r3, #31
 8005848:	d951      	bls.n	80058ee <console_process+0x28e>
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b7e      	cmp	r3, #126	@ 0x7e
 800584e:	d84e      	bhi.n	80058ee <console_process+0x28e>
            // valid character
            if (m_cursor_pos != m_line_len) {
 8005850:	4b1e      	ldr	r3, [pc, #120]	@ (80058cc <console_process+0x26c>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <console_process+0x270>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d026      	beq.n	80058aa <console_process+0x24a>
                if (echo_str) {
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <console_process+0x20c>
                    write_str(echo_str);
 8005862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005864:	f7ff fb82 	bl	8004f6c <write_str>
                    echo_str = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
                const uint32_t prev_cursor_pos = m_cursor_pos;
 800586c:	4b17      	ldr	r3, [pc, #92]	@ (80058cc <console_process+0x26c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	613b      	str	r3, [r7, #16]
                push_char(c);
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fcfd 	bl	8005274 <push_char>
                write_str(&m_line_buffer[prev_cursor_pos]);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <console_process+0x274>)
 800587e:	4413      	add	r3, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fb73 	bl	8004f6c <write_str>
                for (uint32_t i = 0; i < m_line_len - m_cursor_pos; i++) {
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e005      	b.n	8005898 <console_process+0x238>
                    write_str("\b");
 800588c:	4812      	ldr	r0, [pc, #72]	@ (80058d8 <console_process+0x278>)
 800588e:	f7ff fb6d 	bl	8004f6c <write_str>
                for (uint32_t i = 0; i < m_line_len - m_cursor_pos; i++) {
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	3301      	adds	r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <console_process+0x270>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <console_process+0x26c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3f1      	bcc.n	800588c <console_process+0x22c>
 80058a8:	e021      	b.n	80058ee <console_process+0x28e>
                }
            } else {
                if (!echo_str) {
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <console_process+0x25a>
                    // FIXME for m_cursor_pos != m_line_len
                    echo_str = &m_line_buffer[m_line_len];
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <console_process+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <console_process+0x274>)
 80058b6:	4413      	add	r3, r2
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
                }
                push_char(c);
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fcd9 	bl	8005274 <push_char>
 80058c2:	e014      	b.n	80058ee <console_process+0x28e>
            continue;
 80058c4:	bf00      	nop
 80058c6:	e012      	b.n	80058ee <console_process+0x28e>
 80058c8:	2000068c 	.word	0x2000068c
 80058cc:	20000684 	.word	0x20000684
 80058d0:	20000680 	.word	0x20000680
 80058d4:	2000066c 	.word	0x2000066c
 80058d8:	08009674 	.word	0x08009674
 80058dc:	0800969c 	.word	0x0800969c
 80058e0:	20000688 	.word	0x20000688
 80058e4:	080096d8 	.word	0x080096d8
 80058e8:	08009678 	.word	0x08009678
            if (m_cursor_pos) {
 80058ec:	bf00      	nop
    for (uint32_t i = 0; i < length; i++) {
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	3301      	adds	r3, #1
 80058f2:	623b      	str	r3, [r7, #32]
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	f4ff aebb 	bcc.w	8005674 <console_process+0x14>
            }
        }
    }
    if (echo_str) {
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <console_process+0x2aa>
        write_str(echo_str);
 8005904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005906:	f7ff fb31 	bl	8004f6c <write_str>
        } else {
            m_line_invalid = true;
        }
    }
#endif
}
 800590a:	bf00      	nop
 800590c:	3728      	adds	r7, #40	@ 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005926:	2b84      	cmp	r3, #132	@ 0x84
 8005928:	d005      	beq.n	8005936 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800592a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	3303      	adds	r3, #3
 8005934:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005948:	f3ef 8305 	mrs	r3, IPSR
 800594c:	607b      	str	r3, [r7, #4]
  return(result);
 800594e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005968:	f001 fadc 	bl	8006f24 <vTaskStartScheduler>
  
  return osOK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	bd80      	pop	{r7, pc}

08005972 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005974:	b089      	sub	sp, #36	@ 0x24
 8005976:	af04      	add	r7, sp, #16
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <osThreadCreate+0x54>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01c      	beq.n	80059c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685c      	ldr	r4, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691e      	ldr	r6, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff ffb8 	bl	8005914 <makeFreeRtosPriority>
 80059a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ae:	9202      	str	r2, [sp, #8]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	9100      	str	r1, [sp, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	4632      	mov	r2, r6
 80059b8:	4629      	mov	r1, r5
 80059ba:	4620      	mov	r0, r4
 80059bc:	f001 f88f 	bl	8006ade <xTaskCreateStatic>
 80059c0:	4603      	mov	r3, r0
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e01c      	b.n	8005a00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685c      	ldr	r4, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff ff9a 	bl	8005914 <makeFreeRtosPriority>
 80059e0:	4602      	mov	r2, r0
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	9200      	str	r2, [sp, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	4632      	mov	r2, r6
 80059ee:	4629      	mov	r1, r5
 80059f0:	4620      	mov	r0, r4
 80059f2:	f001 f8d4 	bl	8006b9e <xTaskCreate>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e000      	b.n	8005a02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a0a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af02      	add	r7, sp, #8
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00f      	beq.n	8005a3c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10a      	bne.n	8005a38 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	9200      	str	r2, [sp, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 f9ae 	bl	8005d90 <xQueueGenericCreateStatic>
 8005a34:	4603      	mov	r3, r0
 8005a36:	e016      	b.n	8005a66 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e014      	b.n	8005a66 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d110      	bne.n	8005a64 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005a42:	2203      	movs	r2, #3
 8005a44:	2100      	movs	r1, #0
 8005a46:	2001      	movs	r0, #1
 8005a48:	f000 fa1f 	bl	8005e8a <xQueueGenericCreate>
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <osSemaphoreCreate+0x56>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2200      	movs	r2, #0
 8005a58:	2100      	movs	r1, #0
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fa74 	bl	8005f48 <xQueueGenericSend>
      return sema;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	e000      	b.n	8005a66 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005a64:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005a84:	2380      	movs	r3, #128	@ 0x80
 8005a86:	e03a      	b.n	8005afe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d103      	bne.n	8005a9c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005a94:	f04f 33ff 	mov.w	r3, #4294967295
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e009      	b.n	8005ab0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <osSemaphoreWait+0x40>
      ticks = 1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ab0:	f7ff ff47 	bl	8005942 <inHandlerMode>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fe62 	bl	800678c <xQueueReceiveFromISR>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005ace:	23ff      	movs	r3, #255	@ 0xff
 8005ad0:	e015      	b.n	8005afe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d011      	beq.n	8005afc <osSemaphoreWait+0x8c>
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <osSemaphoreWait+0x98>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e008      	b.n	8005afc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd3d 	bl	800656c <xQueueSemaphoreTake>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d001      	beq.n	8005afc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005af8:	23ff      	movs	r3, #255	@ 0xff
 8005afa:	e000      	b.n	8005afe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d011      	beq.n	8005b42 <osMessageCreate+0x36>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2400      	movs	r4, #0
 8005b38:	9400      	str	r4, [sp, #0]
 8005b3a:	f000 f929 	bl	8005d90 <xQueueGenericCreateStatic>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	e008      	b.n	8005b54 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f000 f99c 	bl	8005e8a <xQueueGenericCreate>
 8005b52:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0208 	add.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0208 	add.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d103      	bne.n	8005c18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e00c      	b.n	8005c32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e002      	b.n	8005c26 <vListInsert+0x2e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d2f6      	bcs.n	8005c20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6852      	ldr	r2, [r2, #4]
 8005c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d103      	bne.n	8005c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr
	...

08005cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ce8:	f002 f9b0 	bl	800804c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	441a      	add	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	22ff      	movs	r2, #255	@ 0xff
 8005d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	@ 0xff
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d114      	bne.n	8005d68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01a      	beq.n	8005d7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3310      	adds	r3, #16
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fc24 	bl	8007598 <xTaskRemoveFromEventList>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d012      	beq.n	8005d7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <xQueueGenericReset+0xd0>)
 8005d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	e009      	b.n	8005d7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3310      	adds	r3, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fef5 	bl	8005b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3324      	adds	r3, #36	@ 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fef0 	bl	8005b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d7c:	f002 f996 	bl	80080ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d80:	2301      	movs	r3, #1
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08e      	sub	sp, #56	@ 0x38
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10b      	bne.n	8005dda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <xQueueGenericCreateStatic+0x56>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <xQueueGenericCreateStatic+0x5a>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xQueueGenericCreateStatic+0x5c>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	623b      	str	r3, [r7, #32]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <xQueueGenericCreateStatic+0x84>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <xQueueGenericCreateStatic+0x88>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <xQueueGenericCreateStatic+0x8a>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e36:	2350      	movs	r3, #80	@ 0x50
 8005e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b50      	cmp	r3, #80	@ 0x50
 8005e3e:	d00b      	beq.n	8005e58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61bb      	str	r3, [r7, #24]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f840 	bl	8005f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3730      	adds	r7, #48	@ 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08a      	sub	sp, #40	@ 0x28
 8005e8e:	af02      	add	r7, sp, #8
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	613b      	str	r3, [r7, #16]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3350      	adds	r3, #80	@ 0x50
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f002 f9c3 	bl	8008250 <pvPortMalloc>
 8005eca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d011      	beq.n	8005ef6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	3350      	adds	r3, #80	@ 0x50
 8005eda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ee4:	79fa      	ldrb	r2, [r7, #7]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f805 	bl	8005f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f2e:	2101      	movs	r1, #1
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f7ff fec3 	bl	8005cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	@ 0x38
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f56:	2300      	movs	r3, #0
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <xQueueGenericSend+0x34>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <xQueueGenericSend+0x42>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <xQueueGenericSend+0x46>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <xQueueGenericSend+0x48>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <xQueueGenericSend+0x64>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSend+0x72>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <xQueueGenericSend+0x76>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGenericSend+0x78>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <xQueueGenericSend+0x94>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	623b      	str	r3, [r7, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fdc:	f001 fd22 	bl	8007a24 <xTaskGetSchedulerState>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <xQueueGenericSend+0xa4>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <xQueueGenericSend+0xa8>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <xQueueGenericSend+0xaa>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <xQueueGenericSend+0xc6>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61fb      	str	r3, [r7, #28]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800600e:	f002 f81d 	bl	800804c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <xQueueGenericSend+0xdc>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d129      	bne.n	8006078 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800602a:	f000 fc48 	bl	80068be <prvCopyDataToQueue>
 800602e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	3324      	adds	r3, #36	@ 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f001 faab 	bl	8007598 <xTaskRemoveFromEventList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006048:	4b3f      	ldr	r3, [pc, #252]	@ (8006148 <xQueueGenericSend+0x200>)
 800604a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	e00a      	b.n	8006070 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006060:	4b39      	ldr	r3, [pc, #228]	@ (8006148 <xQueueGenericSend+0x200>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006070:	f002 f81c 	bl	80080ac <vPortExitCritical>
				return pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	e063      	b.n	8006140 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800607e:	f002 f815 	bl	80080ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006082:	2300      	movs	r3, #0
 8006084:	e05c      	b.n	8006140 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fae5 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800609a:	f002 f807 	bl	80080ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609e:	f000 ffab 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a2:	f001 ffd3 	bl	800804c <vPortEnterCritical>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSend+0x174>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSend+0x18a>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d2:	f001 ffeb 	bl	80080ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d6:	1d3a      	adds	r2, r7, #4
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fad4 	bl	800768c <xTaskCheckForTimeOut>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d124      	bne.n	8006134 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060ec:	f000 fcdf 	bl	8006aae <prvIsQueueFull>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	3310      	adds	r3, #16
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fa24 	bl	800754c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006106:	f000 fc6a 	bl	80069de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800610a:	f000 ff83 	bl	8007014 <xTaskResumeAll>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	f47f af7c 	bne.w	800600e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006116:	4b0c      	ldr	r3, [pc, #48]	@ (8006148 <xQueueGenericSend+0x200>)
 8006118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	e772      	b.n	800600e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800612a:	f000 fc58 	bl	80069de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800612e:	f000 ff71 	bl	8007014 <xTaskResumeAll>
 8006132:	e76c      	b.n	800600e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006136:	f000 fc52 	bl	80069de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613a:	f000 ff6b 	bl	8007014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800613e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	@ 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b090      	sub	sp, #64	@ 0x40
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <xQueueGenericSendFromISR+0x3e>
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueGenericSendFromISR+0x42>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericSendFromISR+0x44>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSendFromISR+0x6e>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <xQueueGenericSendFromISR+0x72>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <xQueueGenericSendFromISR+0x74>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10b      	bne.n	80061dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	623b      	str	r3, [r7, #32]
}
 80061d6:	bf00      	nop
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061dc:	f001 fff8 	bl	80081d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061e0:	f3ef 8211 	mrs	r2, BASEPRI
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <xQueueGenericSendFromISR+0xc2>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d12f      	bne.n	800626e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006214:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006224:	f000 fb4b 	bl	80068be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006228:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d112      	bne.n	8006258 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d016      	beq.n	8006268 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	3324      	adds	r3, #36	@ 0x24
 800623e:	4618      	mov	r0, r3
 8006240:	f001 f9aa 	bl	8007598 <xTaskRemoveFromEventList>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e007      	b.n	8006268 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006258:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800625c:	3301      	adds	r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	b25a      	sxtb	r2, r3
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006268:	2301      	movs	r3, #1
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800626c:	e001      	b.n	8006272 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800626e:	2300      	movs	r3, #0
 8006270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800627c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800627e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006280:	4618      	mov	r0, r3
 8006282:	3740      	adds	r7, #64	@ 0x40
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	@ 0x38
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	61fb      	str	r3, [r7, #28]
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d103      	bne.n	80062e4 <xQueueGiveFromISR+0x5c>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <xQueueGiveFromISR+0x60>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <xQueueGiveFromISR+0x62>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006306:	f001 ff63 	bl	80081d0 <vPortValidateInterruptPriority>
	__asm volatile
 800630a:	f3ef 8211 	mrs	r2, BASEPRI
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617a      	str	r2, [r7, #20]
 8006320:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006322:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006332:	429a      	cmp	r2, r3
 8006334:	d22b      	bcs.n	800638e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800633c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006348:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d112      	bne.n	8006378 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	3324      	adds	r3, #36	@ 0x24
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f91a 	bl	8007598 <xTaskRemoveFromEventList>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00e      	beq.n	8006388 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e007      	b.n	8006388 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637c:	3301      	adds	r3, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	b25a      	sxtb	r2, r3
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006388:	2301      	movs	r3, #1
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
 800638c:	e001      	b.n	8006392 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800638e:	2300      	movs	r3, #0
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
 8006392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006394:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f383 8811 	msr	BASEPRI, r3
}
 800639c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800639e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3738      	adds	r7, #56	@ 0x38
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08c      	sub	sp, #48	@ 0x30
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <xQueueReceive+0x32>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	623b      	str	r3, [r7, #32]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <xQueueReceive+0x40>
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <xQueueReceive+0x44>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <xQueueReceive+0x46>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <xQueueReceive+0x62>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	61fb      	str	r3, [r7, #28]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800640a:	f001 fb0b 	bl	8007a24 <xTaskGetSchedulerState>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xQueueReceive+0x72>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueReceive+0x76>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueReceive+0x78>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xQueueReceive+0x94>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61bb      	str	r3, [r7, #24]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800643c:	f001 fe06 	bl	800804c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01f      	beq.n	800648c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006450:	f000 fa9f 	bl	8006992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00f      	beq.n	8006484 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	3310      	adds	r3, #16
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f895 	bl	8007598 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006474:	4b3c      	ldr	r3, [pc, #240]	@ (8006568 <xQueueReceive+0x1c0>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006484:	f001 fe12 	bl	80080ac <vPortExitCritical>
				return pdPASS;
 8006488:	2301      	movs	r3, #1
 800648a:	e069      	b.n	8006560 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006492:	f001 fe0b 	bl	80080ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006496:	2300      	movs	r3, #0
 8006498:	e062      	b.n	8006560 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f8db 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064aa:	2301      	movs	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ae:	f001 fdfd 	bl	80080ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b2:	f000 fda1 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064b6:	f001 fdc9 	bl	800804c <vPortEnterCritical>
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d103      	bne.n	80064d0 <xQueueReceive+0x128>
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d103      	bne.n	80064e6 <xQueueReceive+0x13e>
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064e6:	f001 fde1 	bl	80080ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ea:	1d3a      	adds	r2, r7, #4
 80064ec:	f107 0310 	add.w	r3, r7, #16
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 f8ca 	bl	800768c <xTaskCheckForTimeOut>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d123      	bne.n	8006546 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006500:	f000 fabf 	bl	8006a82 <prvIsQueueEmpty>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650c:	3324      	adds	r3, #36	@ 0x24
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f81a 	bl	800754c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800651a:	f000 fa60 	bl	80069de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800651e:	f000 fd79 	bl	8007014 <xTaskResumeAll>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d189      	bne.n	800643c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006528:	4b0f      	ldr	r3, [pc, #60]	@ (8006568 <xQueueReceive+0x1c0>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	e780      	b.n	800643c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800653a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800653c:	f000 fa4f 	bl	80069de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006540:	f000 fd68 	bl	8007014 <xTaskResumeAll>
 8006544:	e77a      	b.n	800643c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006548:	f000 fa49 	bl	80069de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800654c:	f000 fd62 	bl	8007014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006552:	f000 fa96 	bl	8006a82 <prvIsQueueEmpty>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	f43f af6f 	beq.w	800643c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800655e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	@ 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08e      	sub	sp, #56	@ 0x38
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	61fb      	str	r3, [r7, #28]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c0:	f001 fa30 	bl	8007a24 <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <xQueueSemaphoreTake+0x64>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xQueueSemaphoreTake+0x68>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xQueueSemaphoreTake+0x6a>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	61bb      	str	r3, [r7, #24]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f2:	f001 fd2b 	bl	800804c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d024      	beq.n	800664c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006612:	f001 fbb3 	bl	8007d7c <pvTaskIncrementMutexHeldCount>
 8006616:	4602      	mov	r2, r0
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00f      	beq.n	8006644 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	3310      	adds	r3, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f000 ffb5 	bl	8007598 <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006634:	4b54      	ldr	r3, [pc, #336]	@ (8006788 <xQueueSemaphoreTake+0x21c>)
 8006636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006644:	f001 fd32 	bl	80080ac <vPortExitCritical>
				return pdPASS;
 8006648:	2301      	movs	r3, #1
 800664a:	e098      	b.n	800677e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d112      	bne.n	8006678 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	617b      	str	r3, [r7, #20]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006670:	f001 fd1c 	bl	80080ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006674:	2300      	movs	r3, #0
 8006676:	e082      	b.n	800677e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800667e:	f107 030c 	add.w	r3, r7, #12
 8006682:	4618      	mov	r0, r3
 8006684:	f000 ffec 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800668c:	f001 fd0e 	bl	80080ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006690:	f000 fcb2 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006694:	f001 fcda 	bl	800804c <vPortEnterCritical>
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d103      	bne.n	80066ae <xQueueSemaphoreTake+0x142>
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066b4:	b25b      	sxtb	r3, r3
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d103      	bne.n	80066c4 <xQueueSemaphoreTake+0x158>
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c4:	f001 fcf2 	bl	80080ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c8:	463a      	mov	r2, r7
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 ffdb 	bl	800768c <xTaskCheckForTimeOut>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d132      	bne.n	8006742 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066de:	f000 f9d0 	bl	8006a82 <prvIsQueueEmpty>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d026      	beq.n	8006736 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80066f0:	f001 fcac 	bl	800804c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f9b1 	bl	8007a60 <xTaskPriorityInherit>
 80066fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006700:	f001 fcd4 	bl	80080ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f000 ff1d 	bl	800754c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006712:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006714:	f000 f963 	bl	80069de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006718:	f000 fc7c 	bl	8007014 <xTaskResumeAll>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	f47f af67 	bne.w	80065f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006724:	4b18      	ldr	r3, [pc, #96]	@ (8006788 <xQueueSemaphoreTake+0x21c>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	e75d      	b.n	80065f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006738:	f000 f951 	bl	80069de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800673c:	f000 fc6a 	bl	8007014 <xTaskResumeAll>
 8006740:	e757      	b.n	80065f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006742:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006744:	f000 f94b 	bl	80069de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006748:	f000 fc64 	bl	8007014 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800674c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800674e:	f000 f998 	bl	8006a82 <prvIsQueueEmpty>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	f43f af4c 	beq.w	80065f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006760:	f001 fc74 	bl	800804c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006766:	f000 f893 	bl	8006890 <prvGetDisinheritPriorityAfterTimeout>
 800676a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006772:	4618      	mov	r0, r3
 8006774:	f001 fa72 	bl	8007c5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006778:	f001 fc98 	bl	80080ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800677c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800677e:	4618      	mov	r0, r3
 8006780:	3738      	adds	r7, #56	@ 0x38
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08e      	sub	sp, #56	@ 0x38
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	623b      	str	r3, [r7, #32]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <xQueueReceiveFromISR+0x3c>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <xQueueReceiveFromISR+0x40>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <xQueueReceiveFromISR+0x42>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61fb      	str	r3, [r7, #28]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ea:	f001 fcf1 	bl	80081d0 <vPortValidateInterruptPriority>
	__asm volatile
 80067ee:	f3ef 8211 	mrs	r2, BASEPRI
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	61ba      	str	r2, [r7, #24]
 8006804:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006806:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006808:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	2b00      	cmp	r3, #0
 8006814:	d02f      	beq.n	8006876 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800681c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006824:	f000 f8b5 	bl	8006992 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	1e5a      	subs	r2, r3, #1
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006830:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d112      	bne.n	8006860 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	3310      	adds	r3, #16
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fea6 	bl	8007598 <xTaskRemoveFromEventList>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e007      	b.n	8006870 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006864:	3301      	adds	r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	b25a      	sxtb	r2, r3
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006870:	2301      	movs	r3, #1
 8006872:	637b      	str	r3, [r7, #52]	@ 0x34
 8006874:	e001      	b.n	800687a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006888:	4618      	mov	r0, r3
 800688a:	3738      	adds	r7, #56	@ 0x38
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f1c3 0306 	rsb	r3, r3, #6
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e001      	b.n	80068b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068b2:	68fb      	ldr	r3, [r7, #12]
	}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b086      	sub	sp, #24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d14d      	bne.n	8006980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f92f 	bl	8007b4c <xTaskPriorityDisinherit>
 80068ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	e043      	b.n	8006980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d119      	bne.n	8006932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6858      	ldr	r0, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	461a      	mov	r2, r3
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	f002 f94f 	bl	8008bac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d32b      	bcc.n	8006980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e026      	b.n	8006980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68d8      	ldr	r0, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	461a      	mov	r2, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	f002 f935 	bl	8008bac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	425b      	negs	r3, r3
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d207      	bcs.n	800696e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	425b      	negs	r3, r3
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d105      	bne.n	8006980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3b01      	subs	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006988:	697b      	ldr	r3, [r7, #20]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	441a      	add	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d303      	bcc.n	80069c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	461a      	mov	r2, r3
 80069d0:	6838      	ldr	r0, [r7, #0]
 80069d2:	f002 f8eb 	bl	8008bac <memcpy>
	}
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069e6:	f001 fb31 	bl	800804c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f2:	e011      	b.n	8006a18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3324      	adds	r3, #36	@ 0x24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fdc9 	bl	8007598 <xTaskRemoveFromEventList>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a0c:	f000 fea2 	bl	8007754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dce9      	bgt.n	80069f4 <prvUnlockQueue+0x16>
 8006a20:	e000      	b.n	8006a24 <prvUnlockQueue+0x46>
					break;
 8006a22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22ff      	movs	r2, #255	@ 0xff
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a2c:	f001 fb3e 	bl	80080ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a30:	f001 fb0c 	bl	800804c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	e011      	b.n	8006a62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d012      	beq.n	8006a6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3310      	adds	r3, #16
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fda4 	bl	8007598 <xTaskRemoveFromEventList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a56:	f000 fe7d 	bl	8007754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dce9      	bgt.n	8006a3e <prvUnlockQueue+0x60>
 8006a6a:	e000      	b.n	8006a6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	22ff      	movs	r2, #255	@ 0xff
 8006a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fb19 	bl	80080ac <vPortExitCritical>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a8a:	f001 fadf 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e001      	b.n	8006aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aa0:	f001 fb04 	bl	80080ac <vPortExitCritical>

	return xReturn;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab6:	f001 fac9 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d102      	bne.n	8006acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad0:	f001 faec 	bl	80080ac <vPortExitCritical>

	return xReturn;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b08e      	sub	sp, #56	@ 0x38
 8006ae2:	af04      	add	r7, sp, #16
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <xTaskCreateStatic+0x2c>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	623b      	str	r3, [r7, #32]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	61fb      	str	r3, [r7, #28]
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b28:	23a8      	movs	r3, #168	@ 0xa8
 8006b2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b30:	d00b      	beq.n	8006b4a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	61bb      	str	r3, [r7, #24]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01e      	beq.n	8006b90 <xTaskCreateStatic+0xb2>
 8006b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01b      	beq.n	8006b90 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b60:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f850 	bl	8006c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b8a:	f000 f8f5 	bl	8006d78 <prvAddNewTaskToReadyList>
 8006b8e:	e001      	b.n	8006b94 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b94:	697b      	ldr	r3, [r7, #20]
	}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3728      	adds	r7, #40	@ 0x28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08c      	sub	sp, #48	@ 0x30
 8006ba2:	af04      	add	r7, sp, #16
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fb4c 	bl	8008250 <pvPortMalloc>
 8006bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bc0:	20a8      	movs	r0, #168	@ 0xa8
 8006bc2:	f001 fb45 	bl	8008250 <pvPortMalloc>
 8006bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bd4:	e005      	b.n	8006be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f001 fc08 	bl	80083ec <vPortFree>
 8006bdc:	e001      	b.n	8006be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bf0:	88fa      	ldrh	r2, [r7, #6]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9303      	str	r3, [sp, #12]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f80e 	bl	8006c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c0c:	69f8      	ldr	r0, [r7, #28]
 8006c0e:	f000 f8b3 	bl	8006d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c12:	2301      	movs	r3, #1
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	e002      	b.n	8006c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	461a      	mov	r2, r3
 8006c40:	21a5      	movs	r1, #165	@ 0xa5
 8006c42:	f001 ff29 	bl	8008a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c50:	3b01      	subs	r3, #1
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	617b      	str	r3, [r7, #20]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01f      	beq.n	8006cc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e012      	b.n	8006cb4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	7819      	ldrb	r1, [r3, #0]
 8006c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	3334      	adds	r3, #52	@ 0x34
 8006c9e:	460a      	mov	r2, r1
 8006ca0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d006      	beq.n	8006cbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b0f      	cmp	r3, #15
 8006cb8:	d9e9      	bls.n	8006c8e <prvInitialiseNewTask+0x66>
 8006cba:	e000      	b.n	8006cbe <prvInitialiseNewTask+0x96>
			{
				break;
 8006cbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cc6:	e003      	b.n	8006cd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d901      	bls.n	8006cda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cd6:	2305      	movs	r3, #5
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	2200      	movs	r2, #0
 8006cea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe ff52 	bl	8005b9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	3318      	adds	r3, #24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe ff4d 	bl	8005b9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	f1c3 0206 	rsb	r2, r3, #6
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	3354      	adds	r3, #84	@ 0x54
 8006d2a:	224c      	movs	r2, #76	@ 0x4c
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 feb2 	bl	8008a98 <memset>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	4a0d      	ldr	r2, [pc, #52]	@ (8006d6c <prvInitialiseNewTask+0x144>)
 8006d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <prvInitialiseNewTask+0x148>)
 8006d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <prvInitialiseNewTask+0x14c>)
 8006d44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	69b8      	ldr	r0, [r7, #24]
 8006d4c:	f001 f890 	bl	8007e70 <pxPortInitialiseStack>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d62:	bf00      	nop
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200032d8 	.word	0x200032d8
 8006d70:	20003340 	.word	0x20003340
 8006d74:	200033a8 	.word	0x200033a8

08006d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d80:	f001 f964 	bl	800804c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d84:	4b2c      	ldr	r3, [pc, #176]	@ (8006e38 <prvAddNewTaskToReadyList+0xc0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006e38 <prvAddNewTaskToReadyList+0xc0>)
 8006d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d96:	4a29      	ldr	r2, [pc, #164]	@ (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d9c:	4b26      	ldr	r3, [pc, #152]	@ (8006e38 <prvAddNewTaskToReadyList+0xc0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da4:	f000 fcfa 	bl	800779c <prvInitialiseTaskLists>
 8006da8:	e00d      	b.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006daa:	4b25      	ldr	r3, [pc, #148]	@ (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006db2:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d802      	bhi.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	2201      	movs	r2, #1
 8006dde:	409a      	lsls	r2, r3
 8006de0:	4b19      	ldr	r3, [pc, #100]	@ (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4a15      	ldr	r2, [pc, #84]	@ (8006e4c <prvAddNewTaskToReadyList+0xd4>)
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f7fe fed6 	bl	8005bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e06:	f001 f951 	bl	80080ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e12:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d207      	bcs.n	8006e30 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <prvAddNewTaskToReadyList+0xd8>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	2000077c 	.word	0x2000077c
 8006e3c:	20000690 	.word	0x20000690
 8006e40:	20000788 	.word	0x20000788
 8006e44:	20000798 	.word	0x20000798
 8006e48:	20000784 	.word	0x20000784
 8006e4c:	20000694 	.word	0x20000694
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <eTaskGetState+0x2a>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006e7e:	4b24      	ldr	r3, [pc, #144]	@ (8006f10 <eTaskGetState+0xbc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d102      	bne.n	8006e8e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e03a      	b.n	8006f04 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8006e8e:	f001 f8dd 	bl	800804c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006e98:	4b1e      	ldr	r3, [pc, #120]	@ (8006f14 <eTaskGetState+0xc0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <eTaskGetState+0xc4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006ea4:	f001 f902 	bl	80080ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d003      	beq.n	8006eb8 <eTaskGetState+0x64>
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d102      	bne.n	8006ebe <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e022      	b.n	8006f04 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <eTaskGetState+0xc8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d112      	bne.n	8006eec <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8006eda:	2302      	movs	r3, #2
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e011      	b.n	8006f04 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e00e      	b.n	8006f04 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e00b      	b.n	8006f04 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4a0c      	ldr	r2, [pc, #48]	@ (8006f20 <eTaskGetState+0xcc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d002      	beq.n	8006efa <eTaskGetState+0xa6>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006efa:	2304      	movs	r3, #4
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e001      	b.n	8006f04 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006f04:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000690 	.word	0x20000690
 8006f14:	20000734 	.word	0x20000734
 8006f18:	20000738 	.word	0x20000738
 8006f1c:	20000768 	.word	0x20000768
 8006f20:	20000750 	.word	0x20000750

08006f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	@ 0x28
 8006f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f32:	463a      	mov	r2, r7
 8006f34:	1d39      	adds	r1, r7, #4
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 f9ac 	bl	8000298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	9202      	str	r2, [sp, #8]
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	460a      	mov	r2, r1
 8006f52:	4921      	ldr	r1, [pc, #132]	@ (8006fd8 <vTaskStartScheduler+0xb4>)
 8006f54:	4821      	ldr	r0, [pc, #132]	@ (8006fdc <vTaskStartScheduler+0xb8>)
 8006f56:	f7ff fdc2 	bl	8006ade <xTaskCreateStatic>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4a20      	ldr	r2, [pc, #128]	@ (8006fe0 <vTaskStartScheduler+0xbc>)
 8006f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f60:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe0 <vTaskStartScheduler+0xbc>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	e001      	b.n	8006f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d11b      	bne.n	8006fb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f8c:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <vTaskStartScheduler+0xc0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3354      	adds	r3, #84	@ 0x54
 8006f92:	4a15      	ldr	r2, [pc, #84]	@ (8006fe8 <vTaskStartScheduler+0xc4>)
 8006f94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f96:	4b15      	ldr	r3, [pc, #84]	@ (8006fec <vTaskStartScheduler+0xc8>)
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ff0 <vTaskStartScheduler+0xcc>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fa4:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <vTaskStartScheduler+0xd0>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006faa:	f000 ffdd 	bl	8007f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fae:	e00f      	b.n	8006fd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d10b      	bne.n	8006fd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <vTaskStartScheduler+0xa8>
}
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	080096dc 	.word	0x080096dc
 8006fdc:	0800776d 	.word	0x0800776d
 8006fe0:	200007a0 	.word	0x200007a0
 8006fe4:	20000690 	.word	0x20000690
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	2000079c 	.word	0x2000079c
 8006ff0:	20000788 	.word	0x20000788
 8006ff4:	20000780 	.word	0x20000780

08006ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <vTaskSuspendAll+0x18>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	4a03      	ldr	r2, [pc, #12]	@ (8007010 <vTaskSuspendAll+0x18>)
 8007004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200007a4 	.word	0x200007a4

08007014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007022:	4b42      	ldr	r3, [pc, #264]	@ (800712c <xTaskResumeAll+0x118>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xTaskResumeAll+0x2e>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	603b      	str	r3, [r7, #0]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007042:	f001 f803 	bl	800804c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007046:	4b39      	ldr	r3, [pc, #228]	@ (800712c <xTaskResumeAll+0x118>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a37      	ldr	r2, [pc, #220]	@ (800712c <xTaskResumeAll+0x118>)
 800704e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007050:	4b36      	ldr	r3, [pc, #216]	@ (800712c <xTaskResumeAll+0x118>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d161      	bne.n	800711c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007058:	4b35      	ldr	r3, [pc, #212]	@ (8007130 <xTaskResumeAll+0x11c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d05d      	beq.n	800711c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007060:	e02e      	b.n	80070c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007062:	4b34      	ldr	r3, [pc, #208]	@ (8007134 <xTaskResumeAll+0x120>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3318      	adds	r3, #24
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fdfa 	bl	8005c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fdf5 	bl	8005c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	2201      	movs	r2, #1
 8007084:	409a      	lsls	r2, r3
 8007086:	4b2c      	ldr	r3, [pc, #176]	@ (8007138 <xTaskResumeAll+0x124>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <xTaskResumeAll+0x124>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a27      	ldr	r2, [pc, #156]	@ (800713c <xTaskResumeAll+0x128>)
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fd83 	bl	8005bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b0:	4b23      	ldr	r3, [pc, #140]	@ (8007140 <xTaskResumeAll+0x12c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80070ba:	4b22      	ldr	r3, [pc, #136]	@ (8007144 <xTaskResumeAll+0x130>)
 80070bc:	2201      	movs	r2, #1
 80070be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007134 <xTaskResumeAll+0x120>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1cc      	bne.n	8007062 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070ce:	f000 fc89 	bl	80079e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <xTaskResumeAll+0x134>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d010      	beq.n	8007100 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070de:	f000 f919 	bl	8007314 <xTaskIncrementTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070e8:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <xTaskResumeAll+0x130>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1f1      	bne.n	80070de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070fa:	4b13      	ldr	r3, [pc, #76]	@ (8007148 <xTaskResumeAll+0x134>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007100:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <xTaskResumeAll+0x130>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d009      	beq.n	800711c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800710c:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <xTaskResumeAll+0x138>)
 800710e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800711c:	f000 ffc6 	bl	80080ac <vPortExitCritical>

	return xAlreadyYielded;
 8007120:	68bb      	ldr	r3, [r7, #8]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200007a4 	.word	0x200007a4
 8007130:	2000077c 	.word	0x2000077c
 8007134:	2000073c 	.word	0x2000073c
 8007138:	20000784 	.word	0x20000784
 800713c:	20000694 	.word	0x20000694
 8007140:	20000690 	.word	0x20000690
 8007144:	20000790 	.word	0x20000790
 8007148:	2000078c 	.word	0x2000078c
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007156:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <xTaskGetTickCount+0x18>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800715c:	687b      	ldr	r3, [r7, #4]
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr
 8007168:	20000780 	.word	0x20000780

0800716c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800716c:	b480      	push	{r7}
 800716e:	b08b      	sub	sp, #44	@ 0x2c
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d05b      	beq.n	800723a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	605a      	str	r2, [r3, #4]
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3308      	adds	r3, #8
 8007198:	429a      	cmp	r2, r3
 800719a:	d104      	bne.n	80071a6 <prvSearchForNameWithinSingleList+0x3a>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3308      	adds	r3, #8
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d104      	bne.n	80071d2 <prvSearchForNameWithinSingleList+0x66>
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071de:	2300      	movs	r3, #0
 80071e0:	623b      	str	r3, [r7, #32]
 80071e2:	e01c      	b.n	800721e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	4413      	add	r3, r2
 80071ea:	3334      	adds	r3, #52	@ 0x34
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	4413      	add	r3, r2
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	7afa      	ldrb	r2, [r7, #11]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d002      	beq.n	8007204 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 80071fe:	2301      	movs	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e006      	b.n	8007212 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	3301      	adds	r3, #1
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d9df      	bls.n	80071e4 <prvSearchForNameWithinSingleList+0x78>
 8007224:	e000      	b.n	8007228 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 8007226:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	429a      	cmp	r2, r3
 8007234:	d1bb      	bne.n	80071ae <prvSearchForNameWithinSingleList+0x42>
 8007236:	e000      	b.n	800723a <prvSearchForNameWithinSingleList+0xce>
					break;
 8007238:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800723c:	4618      	mov	r0, r3
 800723e:	372c      	adds	r7, #44	@ 0x2c
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
	...

08007248 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8007250:	2306      	movs	r3, #6
 8007252:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7f8 ff85 	bl	8000164 <strlen>
 800725a:	4603      	mov	r3, r0
 800725c:	2b0f      	cmp	r3, #15
 800725e:	d90b      	bls.n	8007278 <xTaskGetHandle+0x30>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 8007278:	f7ff febe 	bl	8006ff8 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3b01      	subs	r3, #1
 8007280:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a1c      	ldr	r2, [pc, #112]	@ (8007300 <xTaskGetHandle+0xb8>)
 800728e:	4413      	add	r3, r2
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff ff6a 	bl	800716c <prvSearchForNameWithinSingleList>
 8007298:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ea      	bne.n	800727c <xTaskGetHandle+0x34>
 80072a6:	e000      	b.n	80072aa <xTaskGetHandle+0x62>
					break;
 80072a8:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80072b0:	4b14      	ldr	r3, [pc, #80]	@ (8007304 <xTaskGetHandle+0xbc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff ff58 	bl	800716c <prvSearchForNameWithinSingleList>
 80072bc:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80072c4:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <xTaskGetHandle+0xc0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff ff4e 	bl	800716c <prvSearchForNameWithinSingleList>
 80072d0:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	480c      	ldr	r0, [pc, #48]	@ (800730c <xTaskGetHandle+0xc4>)
 80072dc:	f7ff ff46 	bl	800716c <prvSearchForNameWithinSingleList>
 80072e0:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4809      	ldr	r0, [pc, #36]	@ (8007310 <xTaskGetHandle+0xc8>)
 80072ec:	f7ff ff3e 	bl	800716c <prvSearchForNameWithinSingleList>
 80072f0:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 80072f2:	f7ff fe8f 	bl	8007014 <xTaskResumeAll>

		return pxTCB;
 80072f6:	693b      	ldr	r3, [r7, #16]
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000694 	.word	0x20000694
 8007304:	20000734 	.word	0x20000734
 8007308:	20000738 	.word	0x20000738
 800730c:	20000768 	.word	0x20000768
 8007310:	20000750 	.word	0x20000750

08007314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731e:	4b4f      	ldr	r3, [pc, #316]	@ (800745c <xTaskIncrementTick+0x148>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f040 808f 	bne.w	8007446 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007328:	4b4d      	ldr	r3, [pc, #308]	@ (8007460 <xTaskIncrementTick+0x14c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007330:	4a4b      	ldr	r2, [pc, #300]	@ (8007460 <xTaskIncrementTick+0x14c>)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d121      	bne.n	8007380 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800733c:	4b49      	ldr	r3, [pc, #292]	@ (8007464 <xTaskIncrementTick+0x150>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	603b      	str	r3, [r7, #0]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <xTaskIncrementTick+0x46>
 800735e:	4b41      	ldr	r3, [pc, #260]	@ (8007464 <xTaskIncrementTick+0x150>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	4b40      	ldr	r3, [pc, #256]	@ (8007468 <xTaskIncrementTick+0x154>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a3e      	ldr	r2, [pc, #248]	@ (8007464 <xTaskIncrementTick+0x150>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4a3e      	ldr	r2, [pc, #248]	@ (8007468 <xTaskIncrementTick+0x154>)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	4b3e      	ldr	r3, [pc, #248]	@ (800746c <xTaskIncrementTick+0x158>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3301      	adds	r3, #1
 8007378:	4a3c      	ldr	r2, [pc, #240]	@ (800746c <xTaskIncrementTick+0x158>)
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	f000 fb32 	bl	80079e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007380:	4b3b      	ldr	r3, [pc, #236]	@ (8007470 <xTaskIncrementTick+0x15c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	429a      	cmp	r2, r3
 8007388:	d348      	bcc.n	800741c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738a:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <xTaskIncrementTick+0x150>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007394:	4b36      	ldr	r3, [pc, #216]	@ (8007470 <xTaskIncrementTick+0x15c>)
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	601a      	str	r2, [r3, #0]
					break;
 800739c:	e03e      	b.n	800741c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739e:	4b31      	ldr	r3, [pc, #196]	@ (8007464 <xTaskIncrementTick+0x150>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d203      	bcs.n	80073be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007470 <xTaskIncrementTick+0x15c>)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073bc:	e02e      	b.n	800741c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fc50 	bl	8005c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	3318      	adds	r3, #24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fc47 	bl	8005c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	2201      	movs	r2, #1
 80073e0:	409a      	lsls	r2, r3
 80073e2:	4b24      	ldr	r3, [pc, #144]	@ (8007474 <xTaskIncrementTick+0x160>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <xTaskIncrementTick+0x160>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007478 <xTaskIncrementTick+0x164>)
 80073fa:	441a      	add	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7fe fbd5 	bl	8005bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740c:	4b1b      	ldr	r3, [pc, #108]	@ (800747c <xTaskIncrementTick+0x168>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	429a      	cmp	r2, r3
 8007414:	d3b9      	bcc.n	800738a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007416:	2301      	movs	r3, #1
 8007418:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800741a:	e7b6      	b.n	800738a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800741c:	4b17      	ldr	r3, [pc, #92]	@ (800747c <xTaskIncrementTick+0x168>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007422:	4915      	ldr	r1, [pc, #84]	@ (8007478 <xTaskIncrementTick+0x164>)
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d901      	bls.n	8007438 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007438:	4b11      	ldr	r3, [pc, #68]	@ (8007480 <xTaskIncrementTick+0x16c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e004      	b.n	8007450 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <xTaskIncrementTick+0x170>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3301      	adds	r3, #1
 800744c:	4a0d      	ldr	r2, [pc, #52]	@ (8007484 <xTaskIncrementTick+0x170>)
 800744e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007450:	697b      	ldr	r3, [r7, #20]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200007a4 	.word	0x200007a4
 8007460:	20000780 	.word	0x20000780
 8007464:	20000734 	.word	0x20000734
 8007468:	20000738 	.word	0x20000738
 800746c:	20000794 	.word	0x20000794
 8007470:	2000079c 	.word	0x2000079c
 8007474:	20000784 	.word	0x20000784
 8007478:	20000694 	.word	0x20000694
 800747c:	20000690 	.word	0x20000690
 8007480:	20000790 	.word	0x20000790
 8007484:	2000078c 	.word	0x2000078c

08007488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800748e:	4b29      	ldr	r3, [pc, #164]	@ (8007534 <vTaskSwitchContext+0xac>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007496:	4b28      	ldr	r3, [pc, #160]	@ (8007538 <vTaskSwitchContext+0xb0>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800749c:	e045      	b.n	800752a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800749e:	4b26      	ldr	r3, [pc, #152]	@ (8007538 <vTaskSwitchContext+0xb0>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a4:	4b25      	ldr	r3, [pc, #148]	@ (800753c <vTaskSwitchContext+0xb4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	f1c3 031f 	rsb	r3, r3, #31
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	4921      	ldr	r1, [pc, #132]	@ (8007540 <vTaskSwitchContext+0xb8>)
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vTaskSwitchContext+0x5a>
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a13      	ldr	r2, [pc, #76]	@ (8007540 <vTaskSwitchContext+0xb8>)
 80074f2:	4413      	add	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3308      	adds	r3, #8
 8007508:	429a      	cmp	r2, r3
 800750a:	d104      	bne.n	8007516 <vTaskSwitchContext+0x8e>
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	605a      	str	r2, [r3, #4]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a09      	ldr	r2, [pc, #36]	@ (8007544 <vTaskSwitchContext+0xbc>)
 800751e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007520:	4b08      	ldr	r3, [pc, #32]	@ (8007544 <vTaskSwitchContext+0xbc>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3354      	adds	r3, #84	@ 0x54
 8007526:	4a08      	ldr	r2, [pc, #32]	@ (8007548 <vTaskSwitchContext+0xc0>)
 8007528:	6013      	str	r3, [r2, #0]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr
 8007534:	200007a4 	.word	0x200007a4
 8007538:	20000790 	.word	0x20000790
 800753c:	20000784 	.word	0x20000784
 8007540:	20000694 	.word	0x20000694
 8007544:	20000690 	.word	0x20000690
 8007548:	20000014 	.word	0x20000014

0800754c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60fb      	str	r3, [r7, #12]
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007574:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <vTaskPlaceOnEventList+0x48>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3318      	adds	r3, #24
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fe fb3b 	bl	8005bf8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007582:	2101      	movs	r1, #1
 8007584:	6838      	ldr	r0, [r7, #0]
 8007586:	f000 fc0d 	bl	8007da4 <prvAddCurrentTaskToDelayedList>
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000690 	.word	0x20000690

08007598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60fb      	str	r3, [r7, #12]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3318      	adds	r3, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fb4c 	bl	8005c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <xTaskRemoveFromEventList+0xb0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11c      	bne.n	8007612 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe fb43 	bl	8005c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	2201      	movs	r2, #1
 80075e8:	409a      	lsls	r2, r3
 80075ea:	4b18      	ldr	r3, [pc, #96]	@ (800764c <xTaskRemoveFromEventList+0xb4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	4a16      	ldr	r2, [pc, #88]	@ (800764c <xTaskRemoveFromEventList+0xb4>)
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4a13      	ldr	r2, [pc, #76]	@ (8007650 <xTaskRemoveFromEventList+0xb8>)
 8007602:	441a      	add	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fe fad1 	bl	8005bb2 <vListInsertEnd>
 8007610:	e005      	b.n	800761e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	3318      	adds	r3, #24
 8007616:	4619      	mov	r1, r3
 8007618:	480e      	ldr	r0, [pc, #56]	@ (8007654 <xTaskRemoveFromEventList+0xbc>)
 800761a:	f7fe faca 	bl	8005bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <xTaskRemoveFromEventList+0xc0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d905      	bls.n	8007638 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800762c:	2301      	movs	r3, #1
 800762e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <xTaskRemoveFromEventList+0xc4>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e001      	b.n	800763c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800763c:	697b      	ldr	r3, [r7, #20]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200007a4 	.word	0x200007a4
 800764c:	20000784 	.word	0x20000784
 8007650:	20000694 	.word	0x20000694
 8007654:	2000073c 	.word	0x2000073c
 8007658:	20000690 	.word	0x20000690
 800765c:	20000790 	.word	0x20000790

08007660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007668:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <vTaskInternalSetTimeOutState+0x24>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007670:	4b05      	ldr	r3, [pc, #20]	@ (8007688 <vTaskInternalSetTimeOutState+0x28>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000794 	.word	0x20000794
 8007688:	20000780 	.word	0x20000780

0800768c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	60fb      	str	r3, [r7, #12]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80076d2:	f000 fcbb 	bl	800804c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076d6:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <xTaskCheckForTimeOut+0xc0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d102      	bne.n	80076f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	e023      	b.n	800773e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <xTaskCheckForTimeOut+0xc4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d007      	beq.n	8007712 <xTaskCheckForTimeOut+0x86>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	d302      	bcc.n	8007712 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	e015      	b.n	800773e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	429a      	cmp	r2, r3
 800771a:	d20b      	bcs.n	8007734 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ff99 	bl	8007660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	e004      	b.n	800773e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800773e:	f000 fcb5 	bl	80080ac <vPortExitCritical>

	return xReturn;
 8007742:	69fb      	ldr	r3, [r7, #28]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20000780 	.word	0x20000780
 8007750:	20000794 	.word	0x20000794

08007754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007758:	4b03      	ldr	r3, [pc, #12]	@ (8007768 <vTaskMissedYield+0x14>)
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000790 	.word	0x20000790

0800776c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007774:	f000 f852 	bl	800781c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007778:	4b06      	ldr	r3, [pc, #24]	@ (8007794 <prvIdleTask+0x28>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d9f9      	bls.n	8007774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <prvIdleTask+0x2c>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007790:	e7f0      	b.n	8007774 <prvIdleTask+0x8>
 8007792:	bf00      	nop
 8007794:	20000694 	.word	0x20000694
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	e00c      	b.n	80077c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a12      	ldr	r2, [pc, #72]	@ (80077fc <prvInitialiseTaskLists+0x60>)
 80077b4:	4413      	add	r3, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f9d0 	bl	8005b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	d9ef      	bls.n	80077a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077c8:	480d      	ldr	r0, [pc, #52]	@ (8007800 <prvInitialiseTaskLists+0x64>)
 80077ca:	f7fe f9c7 	bl	8005b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ce:	480d      	ldr	r0, [pc, #52]	@ (8007804 <prvInitialiseTaskLists+0x68>)
 80077d0:	f7fe f9c4 	bl	8005b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077d4:	480c      	ldr	r0, [pc, #48]	@ (8007808 <prvInitialiseTaskLists+0x6c>)
 80077d6:	f7fe f9c1 	bl	8005b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077da:	480c      	ldr	r0, [pc, #48]	@ (800780c <prvInitialiseTaskLists+0x70>)
 80077dc:	f7fe f9be 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077e0:	480b      	ldr	r0, [pc, #44]	@ (8007810 <prvInitialiseTaskLists+0x74>)
 80077e2:	f7fe f9bb 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <prvInitialiseTaskLists+0x78>)
 80077e8:	4a05      	ldr	r2, [pc, #20]	@ (8007800 <prvInitialiseTaskLists+0x64>)
 80077ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <prvInitialiseTaskLists+0x7c>)
 80077ee:	4a05      	ldr	r2, [pc, #20]	@ (8007804 <prvInitialiseTaskLists+0x68>)
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000694 	.word	0x20000694
 8007800:	2000070c 	.word	0x2000070c
 8007804:	20000720 	.word	0x20000720
 8007808:	2000073c 	.word	0x2000073c
 800780c:	20000750 	.word	0x20000750
 8007810:	20000768 	.word	0x20000768
 8007814:	20000734 	.word	0x20000734
 8007818:	20000738 	.word	0x20000738

0800781c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007822:	e019      	b.n	8007858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007824:	f000 fc12 	bl	800804c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007828:	4b10      	ldr	r3, [pc, #64]	@ (800786c <prvCheckTasksWaitingTermination+0x50>)
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3304      	adds	r3, #4
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fa17 	bl	8005c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <prvCheckTasksWaitingTermination+0x54>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3b01      	subs	r3, #1
 8007840:	4a0b      	ldr	r2, [pc, #44]	@ (8007870 <prvCheckTasksWaitingTermination+0x54>)
 8007842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <prvCheckTasksWaitingTermination+0x58>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3b01      	subs	r3, #1
 800784a:	4a0a      	ldr	r2, [pc, #40]	@ (8007874 <prvCheckTasksWaitingTermination+0x58>)
 800784c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800784e:	f000 fc2d 	bl	80080ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f891 	bl	800797a <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007858:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <prvCheckTasksWaitingTermination+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e1      	bne.n	8007824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000750 	.word	0x20000750
 8007870:	2000077c 	.word	0x2000077c
 8007874:	20000764 	.word	0x20000764

08007878 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <vTaskGetInfo+0x1a>
 800788c:	4b2c      	ldr	r3, [pc, #176]	@ (8007940 <vTaskGetInfo+0xc8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	e000      	b.n	8007894 <vTaskGetInfo+0x1c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2200      	movs	r2, #0
 80078ca:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d01a      	beq.n	8007908 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <vTaskGetInfo+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d103      	bne.n	80078e4 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	731a      	strb	r2, [r3, #12]
 80078e2:	e018      	b.n	8007916 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	78fa      	ldrb	r2, [r7, #3]
 80078e8:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d112      	bne.n	8007916 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80078f0:	f7ff fb82 	bl	8006ff8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2202      	movs	r2, #2
 8007900:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8007902:	f7ff fb87 	bl	8007014 <xTaskResumeAll>
 8007906:	e006      	b.n	8007916 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007908:	6978      	ldr	r0, [r7, #20]
 800790a:	f7ff faa3 	bl	8006e54 <eTaskGetState>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f80f 	bl	8007944 <prvTaskCheckFreeStackSpace>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800792e:	e002      	b.n	8007936 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	841a      	strh	r2, [r3, #32]
	}
 8007936:	bf00      	nop
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000690 	.word	0x20000690

08007944 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007950:	e005      	b.n	800795e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3301      	adds	r3, #1
 8007956:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2ba5      	cmp	r3, #165	@ 0xa5
 8007964:	d0f5      	beq.n	8007952 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	b29b      	uxth	r3, r3
	}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	bc80      	pop	{r7}
 8007978:	4770      	bx	lr

0800797a <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3354      	adds	r3, #84	@ 0x54
 8007986:	4618      	mov	r0, r3
 8007988:	f001 f88e 	bl	8008aa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007992:	2b00      	cmp	r3, #0
 8007994:	d108      	bne.n	80079a8 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fd26 	bl	80083ec <vPortFree>
				vPortFree( pxTCB );
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fd23 	bl	80083ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079a6:	e019      	b.n	80079dc <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d103      	bne.n	80079ba <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fd1a 	bl	80083ec <vPortFree>
	}
 80079b8:	e010      	b.n	80079dc <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d00b      	beq.n	80079dc <prvDeleteTCB+0x62>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	60fb      	str	r3, [r7, #12]
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <prvDeleteTCB+0x5e>
	}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ea:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <prvResetNextTaskUnblockTime+0x38>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007a20 <prvResetNextTaskUnblockTime+0x3c>)
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295
 80079fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079fc:	e008      	b.n	8007a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fe:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <prvResetNextTaskUnblockTime+0x38>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4a04      	ldr	r2, [pc, #16]	@ (8007a20 <prvResetNextTaskUnblockTime+0x3c>)
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000734 	.word	0x20000734
 8007a20:	2000079c 	.word	0x2000079c

08007a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <xTaskGetSchedulerState+0x34>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a32:	2301      	movs	r3, #1
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	e008      	b.n	8007a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a38:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <xTaskGetSchedulerState+0x38>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a40:	2302      	movs	r3, #2
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e001      	b.n	8007a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a4a:	687b      	ldr	r3, [r7, #4]
	}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000788 	.word	0x20000788
 8007a5c:	200007a4 	.word	0x200007a4

08007a60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d05e      	beq.n	8007b34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7a:	4b31      	ldr	r3, [pc, #196]	@ (8007b40 <xTaskPriorityInherit+0xe0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d24e      	bcs.n	8007b22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db06      	blt.n	8007a9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8007b40 <xTaskPriorityInherit+0xe0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a92:	f1c3 0206 	rsb	r2, r3, #6
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6959      	ldr	r1, [r3, #20]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4a26      	ldr	r2, [pc, #152]	@ (8007b44 <xTaskPriorityInherit+0xe4>)
 8007aac:	4413      	add	r3, r2
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	d12f      	bne.n	8007b12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe f8d6 	bl	8005c68 <uxListRemove>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	43da      	mvns	r2, r3
 8007ace:	4b1e      	ldr	r3, [pc, #120]	@ (8007b48 <xTaskPriorityInherit+0xe8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b48 <xTaskPriorityInherit+0xe8>)
 8007ad6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ad8:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <xTaskPriorityInherit+0xe0>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	4b17      	ldr	r3, [pc, #92]	@ (8007b48 <xTaskPriorityInherit+0xe8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <xTaskPriorityInherit+0xe8>)
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4a10      	ldr	r2, [pc, #64]	@ (8007b44 <xTaskPriorityInherit+0xe4>)
 8007b02:	441a      	add	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fe f851 	bl	8005bb2 <vListInsertEnd>
 8007b10:	e004      	b.n	8007b1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b12:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <xTaskPriorityInherit+0xe0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e008      	b.n	8007b34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b26:	4b06      	ldr	r3, [pc, #24]	@ (8007b40 <xTaskPriorityInherit+0xe0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d201      	bcs.n	8007b34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b34:	68fb      	ldr	r3, [r7, #12]
	}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000690 	.word	0x20000690
 8007b44:	20000694 	.word	0x20000694
 8007b48:	20000784 	.word	0x20000784

08007b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d070      	beq.n	8007c44 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b62:	4b3b      	ldr	r3, [pc, #236]	@ (8007c50 <xTaskPriorityDisinherit+0x104>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d00b      	beq.n	8007b84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	e7fd      	b.n	8007b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	60bb      	str	r3, [r7, #8]
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	e7fd      	b.n	8007ba0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba8:	1e5a      	subs	r2, r3, #1
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d044      	beq.n	8007c44 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d140      	bne.n	8007c44 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe f84e 	bl	8005c68 <uxListRemove>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d115      	bne.n	8007bfe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd6:	491f      	ldr	r1, [pc, #124]	@ (8007c54 <xTaskPriorityDisinherit+0x108>)
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xTaskPriorityDisinherit+0xb2>
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	4b18      	ldr	r3, [pc, #96]	@ (8007c58 <xTaskPriorityDisinherit+0x10c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	4a17      	ldr	r2, [pc, #92]	@ (8007c58 <xTaskPriorityDisinherit+0x10c>)
 8007bfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0a:	f1c3 0206 	rsb	r2, r3, #6
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	2201      	movs	r2, #1
 8007c18:	409a      	lsls	r2, r3
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <xTaskPriorityDisinherit+0x10c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	4a0d      	ldr	r2, [pc, #52]	@ (8007c58 <xTaskPriorityDisinherit+0x10c>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4a08      	ldr	r2, [pc, #32]	@ (8007c54 <xTaskPriorityDisinherit+0x108>)
 8007c32:	441a      	add	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fd ffb9 	bl	8005bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c44:	697b      	ldr	r3, [r7, #20]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000690 	.word	0x20000690
 8007c54:	20000694 	.word	0x20000694
 8007c58:	20000784 	.word	0x20000784

08007c5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d079      	beq.n	8007d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60fb      	str	r3, [r7, #12]
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	e7fd      	b.n	8007c90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d902      	bls.n	8007ca4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	e002      	b.n	8007caa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d059      	beq.n	8007d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d154      	bne.n	8007d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007d70 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d10b      	bne.n	8007ce0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60bb      	str	r3, [r7, #8]
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	e7fd      	b.n	8007cdc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	db04      	blt.n	8007cfe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f1c3 0206 	rsb	r2, r3, #6
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a19      	ldr	r2, [pc, #100]	@ (8007d74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d129      	bne.n	8007d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd ffa5 	bl	8005c68 <uxListRemove>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	2201      	movs	r2, #1
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43da      	mvns	r2, r3
 8007d30:	4b11      	ldr	r3, [pc, #68]	@ (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4013      	ands	r3, r2
 8007d36:	4a10      	ldr	r2, [pc, #64]	@ (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	2201      	movs	r2, #1
 8007d40:	409a      	lsls	r2, r3
 8007d42:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	4a0b      	ldr	r2, [pc, #44]	@ (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4a06      	ldr	r2, [pc, #24]	@ (8007d74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d5a:	441a      	add	r2, r3
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fd ff25 	bl	8005bb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d68:	bf00      	nop
 8007d6a:	3720      	adds	r7, #32
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000690 	.word	0x20000690
 8007d74:	20000694 	.word	0x20000694
 8007d78:	20000784 	.word	0x20000784

08007d7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d88:	4b05      	ldr	r3, [pc, #20]	@ (8007da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d8e:	3201      	adds	r2, #1
 8007d90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007d92:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d94:	681b      	ldr	r3, [r3, #0]
	}
 8007d96:	4618      	mov	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000690 	.word	0x20000690

08007da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dae:	4b29      	ldr	r3, [pc, #164]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db4:	4b28      	ldr	r3, [pc, #160]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd ff54 	bl	8005c68 <uxListRemove>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dc6:	4b24      	ldr	r3, [pc, #144]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	2201      	movs	r2, #1
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43da      	mvns	r2, r3
 8007dd4:	4b21      	ldr	r3, [pc, #132]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	4a20      	ldr	r2, [pc, #128]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d10a      	bne.n	8007dfc <prvAddCurrentTaskToDelayedList+0x58>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dec:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	481a      	ldr	r0, [pc, #104]	@ (8007e60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007df6:	f7fd fedc 	bl	8005bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dfa:	e026      	b.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e04:	4b14      	ldr	r3, [pc, #80]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d209      	bcs.n	8007e28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7fd fee9 	bl	8005bf8 <vListInsert>
}
 8007e26:	e010      	b.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e28:	4b0f      	ldr	r3, [pc, #60]	@ (8007e68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7fd fedf 	bl	8005bf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d202      	bcs.n	8007e4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e44:	4a09      	ldr	r2, [pc, #36]	@ (8007e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6013      	str	r3, [r2, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000780 	.word	0x20000780
 8007e58:	20000690 	.word	0x20000690
 8007e5c:	20000784 	.word	0x20000784
 8007e60:	20000768 	.word	0x20000768
 8007e64:	20000738 	.word	0x20000738
 8007e68:	20000734 	.word	0x20000734
 8007e6c:	2000079c 	.word	0x2000079c

08007e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea0:	4a08      	ldr	r2, [pc, #32]	@ (8007ec4 <pxPortInitialiseStack+0x54>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b14      	subs	r3, #20
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b20      	subs	r3, #32
 8007eb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	08007ec9 	.word	0x08007ec9

08007ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ed2:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <prvTaskExitError+0x54>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d00b      	beq.n	8007ef4 <prvTaskExitError+0x2c>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60fb      	str	r3, [r7, #12]
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	e7fd      	b.n	8007ef0 <prvTaskExitError+0x28>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60bb      	str	r3, [r7, #8]
}
 8007f06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f08:	bf00      	nop
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0fc      	beq.n	8007f0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	2000000c 	.word	0x2000000c

08007f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f20:	4b07      	ldr	r3, [pc, #28]	@ (8007f40 <pxCurrentTCBConst2>)
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	6808      	ldr	r0, [r1, #0]
 8007f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f2a:	f380 8809 	msr	PSP, r0
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8811 	msr	BASEPRI, r0
 8007f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f3e:	4770      	bx	lr

08007f40 <pxCurrentTCBConst2>:
 8007f40:	20000690 	.word	0x20000690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f48:	4806      	ldr	r0, [pc, #24]	@ (8007f64 <prvPortStartFirstTask+0x1c>)
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	6800      	ldr	r0, [r0, #0]
 8007f4e:	f380 8808 	msr	MSP, r0
 8007f52:	b662      	cpsie	i
 8007f54:	b661      	cpsie	f
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	df00      	svc	0
 8007f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f62:	bf00      	nop
 8007f64:	e000ed08 	.word	0xe000ed08

08007f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f6e:	4b32      	ldr	r3, [pc, #200]	@ (8008038 <xPortStartScheduler+0xd0>)
 8007f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22ff      	movs	r2, #255	@ 0xff
 8007f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	4b2a      	ldr	r3, [pc, #168]	@ (800803c <xPortStartScheduler+0xd4>)
 8007f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f96:	4b2a      	ldr	r3, [pc, #168]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007f98:	2207      	movs	r2, #7
 8007f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9c:	e009      	b.n	8007fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f9e:	4b28      	ldr	r3, [pc, #160]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4a26      	ldr	r2, [pc, #152]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fba:	2b80      	cmp	r3, #128	@ 0x80
 8007fbc:	d0ef      	beq.n	8007f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fbe:	4b20      	ldr	r3, [pc, #128]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1c3 0307 	rsb	r3, r3, #7
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d00b      	beq.n	8007fe2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	e7fd      	b.n	8007fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fe2:	4b17      	ldr	r3, [pc, #92]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	4a15      	ldr	r2, [pc, #84]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fec:	4b14      	ldr	r3, [pc, #80]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ff4:	4a12      	ldr	r2, [pc, #72]	@ (8008040 <xPortStartScheduler+0xd8>)
 8007ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008000:	4b10      	ldr	r3, [pc, #64]	@ (8008044 <xPortStartScheduler+0xdc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0f      	ldr	r2, [pc, #60]	@ (8008044 <xPortStartScheduler+0xdc>)
 8008006:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800800a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800800c:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <xPortStartScheduler+0xdc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0c      	ldr	r2, [pc, #48]	@ (8008044 <xPortStartScheduler+0xdc>)
 8008012:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008018:	f000 f8b8 	bl	800818c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800801c:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <xPortStartScheduler+0xe0>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008022:	f7ff ff91 	bl	8007f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008026:	f7ff fa2f 	bl	8007488 <vTaskSwitchContext>
	prvTaskExitError();
 800802a:	f7ff ff4d 	bl	8007ec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000e400 	.word	0xe000e400
 800803c:	200007a8 	.word	0x200007a8
 8008040:	200007ac 	.word	0x200007ac
 8008044:	e000ed20 	.word	0xe000ed20
 8008048:	2000000c 	.word	0x2000000c

0800804c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
}
 8008064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008066:	4b0f      	ldr	r3, [pc, #60]	@ (80080a4 <vPortEnterCritical+0x58>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a0d      	ldr	r2, [pc, #52]	@ (80080a4 <vPortEnterCritical+0x58>)
 800806e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008070:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <vPortEnterCritical+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d110      	bne.n	800809a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008078:	4b0b      	ldr	r3, [pc, #44]	@ (80080a8 <vPortEnterCritical+0x5c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <vPortEnterCritical+0x4e>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	603b      	str	r3, [r7, #0]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <vPortEnterCritical+0x4a>
	}
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr
 80080a4:	2000000c 	.word	0x2000000c
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080b2:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <vPortExitCritical+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <vPortExitCritical+0x26>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	607b      	str	r3, [r7, #4]
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	e7fd      	b.n	80080ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <vPortExitCritical+0x50>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4a08      	ldr	r2, [pc, #32]	@ (80080fc <vPortExitCritical+0x50>)
 80080da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080dc:	4b07      	ldr	r3, [pc, #28]	@ (80080fc <vPortExitCritical+0x50>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <vPortExitCritical+0x44>
 80080e4:	2300      	movs	r3, #0
 80080e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	f383 8811 	msr	BASEPRI, r3
}
 80080ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	2000000c 	.word	0x2000000c

08008100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008100:	f3ef 8009 	mrs	r0, PSP
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4b0d      	ldr	r3, [pc, #52]	@ (8008140 <pxCurrentTCBConst>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008110:	6010      	str	r0, [r2, #0]
 8008112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008116:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800811a:	f380 8811 	msr	BASEPRI, r0
 800811e:	f7ff f9b3 	bl	8007488 <vTaskSwitchContext>
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008136:	f380 8809 	msr	PSP, r0
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	4770      	bx	lr

08008140 <pxCurrentTCBConst>:
 8008140:	20000690 	.word	0x20000690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008162:	f7ff f8d7 	bl	8007314 <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <xPortSysTickHandler+0x40>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008190:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <vPortSetupTimerInterrupt+0x30>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008196:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <vPortSetupTimerInterrupt+0x34>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800819c:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <vPortSetupTimerInterrupt+0x38>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a09      	ldr	r2, [pc, #36]	@ (80081c8 <vPortSetupTimerInterrupt+0x3c>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <vPortSetupTimerInterrupt+0x40>)
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <vPortSetupTimerInterrupt+0x30>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr
 80081bc:	e000e010 	.word	0xe000e010
 80081c0:	e000e018 	.word	0xe000e018
 80081c4:	20000000 	.word	0x20000000
 80081c8:	10624dd3 	.word	0x10624dd3
 80081cc:	e000e014 	.word	0xe000e014

080081d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081d6:	f3ef 8305 	mrs	r3, IPSR
 80081da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b0f      	cmp	r3, #15
 80081e0:	d915      	bls.n	800820e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081e2:	4a17      	ldr	r2, [pc, #92]	@ (8008240 <vPortValidateInterruptPriority+0x70>)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081ec:	4b15      	ldr	r3, [pc, #84]	@ (8008244 <vPortValidateInterruptPriority+0x74>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	7afa      	ldrb	r2, [r7, #11]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d20b      	bcs.n	800820e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	607b      	str	r3, [r7, #4]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800820e:	4b0e      	ldr	r3, [pc, #56]	@ (8008248 <vPortValidateInterruptPriority+0x78>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008216:	4b0d      	ldr	r3, [pc, #52]	@ (800824c <vPortValidateInterruptPriority+0x7c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d90b      	bls.n	8008236 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	603b      	str	r3, [r7, #0]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <vPortValidateInterruptPriority+0x62>
	}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr
 8008240:	e000e3f0 	.word	0xe000e3f0
 8008244:	200007a8 	.word	0x200007a8
 8008248:	e000ed0c 	.word	0xe000ed0c
 800824c:	200007ac 	.word	0x200007ac

08008250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	@ 0x28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800825c:	f7fe fecc 	bl	8006ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008260:	4b5c      	ldr	r3, [pc, #368]	@ (80083d4 <pvPortMalloc+0x184>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008268:	f000 f92e 	bl	80084c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800826c:	4b5a      	ldr	r3, [pc, #360]	@ (80083d8 <pvPortMalloc+0x188>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4013      	ands	r3, r2
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8095 	bne.w	80083a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01e      	beq.n	80082be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008280:	2208      	movs	r2, #8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b00      	cmp	r3, #0
 8008290:	d015      	beq.n	80082be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f023 0307 	bic.w	r3, r3, #7
 8008298:	3308      	adds	r3, #8
 800829a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <pvPortMalloc+0x6e>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	617b      	str	r3, [r7, #20]
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d06f      	beq.n	80083a4 <pvPortMalloc+0x154>
 80082c4:	4b45      	ldr	r3, [pc, #276]	@ (80083dc <pvPortMalloc+0x18c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d86a      	bhi.n	80083a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ce:	4b44      	ldr	r3, [pc, #272]	@ (80083e0 <pvPortMalloc+0x190>)
 80082d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082d2:	4b43      	ldr	r3, [pc, #268]	@ (80083e0 <pvPortMalloc+0x190>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d8:	e004      	b.n	80082e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <pvPortMalloc+0xa6>
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f1      	bne.n	80082da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082f6:	4b37      	ldr	r3, [pc, #220]	@ (80083d4 <pvPortMalloc+0x184>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d051      	beq.n	80083a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2208      	movs	r2, #8
 8008306:	4413      	add	r3, r2
 8008308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	1ad2      	subs	r2, r2, r3
 800831a:	2308      	movs	r3, #8
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	429a      	cmp	r2, r3
 8008320:	d920      	bls.n	8008364 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <pvPortMalloc+0xfc>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	613b      	str	r3, [r7, #16]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800835e:	69b8      	ldr	r0, [r7, #24]
 8008360:	f000 f914 	bl	800858c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008364:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <pvPortMalloc+0x18c>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	4a1b      	ldr	r2, [pc, #108]	@ (80083dc <pvPortMalloc+0x18c>)
 8008370:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008372:	4b1a      	ldr	r3, [pc, #104]	@ (80083dc <pvPortMalloc+0x18c>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4b1b      	ldr	r3, [pc, #108]	@ (80083e4 <pvPortMalloc+0x194>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d203      	bcs.n	8008386 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800837e:	4b17      	ldr	r3, [pc, #92]	@ (80083dc <pvPortMalloc+0x18c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a18      	ldr	r2, [pc, #96]	@ (80083e4 <pvPortMalloc+0x194>)
 8008384:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	4b13      	ldr	r3, [pc, #76]	@ (80083d8 <pvPortMalloc+0x188>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	431a      	orrs	r2, r3
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800839a:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <pvPortMalloc+0x198>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3301      	adds	r3, #1
 80083a0:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <pvPortMalloc+0x198>)
 80083a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083a4:	f7fe fe36 	bl	8007014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <pvPortMalloc+0x17a>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	60fb      	str	r3, [r7, #12]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <pvPortMalloc+0x176>
	return pvReturn;
 80083ca:	69fb      	ldr	r3, [r7, #28]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3728      	adds	r7, #40	@ 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200032b0 	.word	0x200032b0
 80083d8:	200032c4 	.word	0x200032c4
 80083dc:	200032b4 	.word	0x200032b4
 80083e0:	200032a8 	.word	0x200032a8
 80083e4:	200032b8 	.word	0x200032b8
 80083e8:	200032bc 	.word	0x200032bc

080083ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d04f      	beq.n	800849e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083fe:	2308      	movs	r3, #8
 8008400:	425b      	negs	r3, r3
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4413      	add	r3, r2
 8008406:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	4b25      	ldr	r3, [pc, #148]	@ (80084a8 <vPortFree+0xbc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4013      	ands	r3, r2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <vPortFree+0x46>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	60fb      	str	r3, [r7, #12]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <vPortFree+0x66>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	60bb      	str	r3, [r7, #8]
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	4b14      	ldr	r3, [pc, #80]	@ (80084a8 <vPortFree+0xbc>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01e      	beq.n	800849e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d11a      	bne.n	800849e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0e      	ldr	r3, [pc, #56]	@ (80084a8 <vPortFree+0xbc>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	43db      	mvns	r3, r3
 8008472:	401a      	ands	r2, r3
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008478:	f7fe fdbe 	bl	8006ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <vPortFree+0xc0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4413      	add	r3, r2
 8008486:	4a09      	ldr	r2, [pc, #36]	@ (80084ac <vPortFree+0xc0>)
 8008488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800848a:	6938      	ldr	r0, [r7, #16]
 800848c:	f000 f87e 	bl	800858c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008490:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <vPortFree+0xc4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	4a06      	ldr	r2, [pc, #24]	@ (80084b0 <vPortFree+0xc4>)
 8008498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800849a:	f7fe fdbb 	bl	8007014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800849e:	bf00      	nop
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200032c4 	.word	0x200032c4
 80084ac:	200032b4 	.word	0x200032b4
 80084b0:	200032c0 	.word	0x200032c0

080084b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80084b8:	4b02      	ldr	r3, [pc, #8]	@ (80084c4 <xPortGetFreeHeapSize+0x10>)
 80084ba:	681b      	ldr	r3, [r3, #0]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	200032b4 	.word	0x200032b4

080084c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ce:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 80084d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d4:	4b27      	ldr	r3, [pc, #156]	@ (8008574 <prvHeapInit+0xac>)
 80084d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00c      	beq.n	80084fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3307      	adds	r3, #7
 80084e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008574 <prvHeapInit+0xac>)
 80084f8:	4413      	add	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008500:	4a1d      	ldr	r2, [pc, #116]	@ (8008578 <prvHeapInit+0xb0>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008506:	4b1c      	ldr	r3, [pc, #112]	@ (8008578 <prvHeapInit+0xb0>)
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008514:	2208      	movs	r2, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4a15      	ldr	r2, [pc, #84]	@ (800857c <prvHeapInit+0xb4>)
 8008528:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <prvHeapInit+0xb4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <prvHeapInit+0xb4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008548:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <prvHeapInit+0xb4>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a0a      	ldr	r2, [pc, #40]	@ (8008580 <prvHeapInit+0xb8>)
 8008556:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4a09      	ldr	r2, [pc, #36]	@ (8008584 <prvHeapInit+0xbc>)
 800855e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008560:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <prvHeapInit+0xc0>)
 8008562:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008566:	601a      	str	r2, [r3, #0]
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200007b0 	.word	0x200007b0
 8008578:	200032a8 	.word	0x200032a8
 800857c:	200032b0 	.word	0x200032b0
 8008580:	200032b8 	.word	0x200032b8
 8008584:	200032b4 	.word	0x200032b4
 8008588:	200032c4 	.word	0x200032c4

0800858c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008594:	4b27      	ldr	r3, [pc, #156]	@ (8008634 <prvInsertBlockIntoFreeList+0xa8>)
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e002      	b.n	80085a0 <prvInsertBlockIntoFreeList+0x14>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d8f7      	bhi.n	800859a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d108      	bne.n	80085ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d118      	bne.n	8008614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4b14      	ldr	r3, [pc, #80]	@ (8008638 <prvInsertBlockIntoFreeList+0xac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d00d      	beq.n	800860a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	441a      	add	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e008      	b.n	800861c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800860a:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <prvInsertBlockIntoFreeList+0xac>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e003      	b.n	800861c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d002      	beq.n	800862a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr
 8008634:	200032a8 	.word	0x200032a8
 8008638:	200032b0 	.word	0x200032b0

0800863c <RxContLoRaCmpl>:
	SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER );
//	SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER_SINGLE  );
}

//Start by interrupt DIO0==1 RxDone (when parcel reception is finished)
uint32_t RxContLoRaCmpl(uint8_t *Arr,SPI_HandleTypeDef *hspi){
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	// Data is always written regardless of whether I have time to read it or not
	// if not transferred to STANDBY

	// switch off the reception mode to standby mode
	SX1276LoRaSetOpMode(RFLR_OPMODE_STANDBY);
 8008646:	2001      	movs	r0, #1
 8008648:	f000 f8fe 	bl	8008848 <SX1276LoRaSetOpMode>

	SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
 800864c:	2140      	movs	r1, #64	@ 0x40
 800864e:	2012      	movs	r0, #18
 8008650:	f000 f884 	bl	800875c <SX1276Write>
	SX1276Read( REG_LR_IRQFLAGS, &SX1276LR->RegIrqFlags );
 8008654:	4b28      	ldr	r3, [pc, #160]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3312      	adds	r3, #18
 800865a:	4619      	mov	r1, r3
 800865c:	2012      	movs	r0, #18
 800865e:	f000 f8e3 	bl	8008828 <SX1276Read>
	if( ( SX1276LR->RegIrqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR ) == RFLR_IRQFLAGS_PAYLOADCRCERROR ){
 8008662:	4b25      	ldr	r3, [pc, #148]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	7c9b      	ldrb	r3, [r3, #18]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <RxContLoRaCmpl+0x50>
		PayLoadCRCError++; // corrupted CRC
 8008670:	4b22      	ldr	r3, [pc, #136]	@ (80086fc <RxContLoRaCmpl+0xc0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	4a21      	ldr	r2, [pc, #132]	@ (80086fc <RxContLoRaCmpl+0xc0>)
 8008678:	6013      	str	r3, [r2, #0]
		SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR  );
 800867a:	2120      	movs	r1, #32
 800867c:	2012      	movs	r0, #18
 800867e:	f000 f86d 	bl	800875c <SX1276Write>
		SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER );
 8008682:	2005      	movs	r0, #5
 8008684:	f000 f8e0 	bl	8008848 <SX1276LoRaSetOpMode>
		//If the package is corrupted do nothing
		return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e030      	b.n	80086ee <RxContLoRaCmpl+0xb2>
	}
	NumSuccessPack++;
 800868c:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <RxContLoRaCmpl+0xc4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <RxContLoRaCmpl+0xc4>)
 8008694:	6013      	str	r3, [r2, #0]
//	SX1276Read( REG_LR_PKTSNRVALUE, &SX1276LR->RegPktSnrValue );
//	SX1276Read( REG_LR_PKTRSSIVALUE, &SX1276LR->RegPktRssiValue );
	//???
	SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR  );
 8008696:	2120      	movs	r1, #32
 8008698:	2012      	movs	r0, #18
 800869a:	f000 f85f 	bl	800875c <SX1276Write>

	SX1276Read( REG_LR_FIFORXCURRENTADDR, &SX1276LR->RegFifoRxCurrentAddr );
 800869e:	4b16      	ldr	r3, [pc, #88]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3310      	adds	r3, #16
 80086a4:	4619      	mov	r1, r3
 80086a6:	2010      	movs	r0, #16
 80086a8:	f000 f8be 	bl	8008828 <SX1276Read>
	SX1276Read( REG_LR_NBRXBYTES, &SX1276LR->RegNbRxBytes );
 80086ac:	4b12      	ldr	r3, [pc, #72]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3313      	adds	r3, #19
 80086b2:	4619      	mov	r1, r3
 80086b4:	2013      	movs	r0, #19
 80086b6:	f000 f8b7 	bl	8008828 <SX1276Read>
	SX1276LR->RegFifoAddrPtr = SX1276LR->RegFifoRxCurrentAddr;
 80086ba:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	7c12      	ldrb	r2, [r2, #16]
 80086c4:	735a      	strb	r2, [r3, #13]
	SX1276Write( REG_LR_FIFOADDRPTR, SX1276LR->RegFifoAddrPtr );
 80086c6:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	7b5b      	ldrb	r3, [r3, #13]
 80086cc:	4619      	mov	r1, r3
 80086ce:	200d      	movs	r0, #13
 80086d0:	f000 f844 	bl	800875c <SX1276Write>
//	RxParamCalc();
//	// check the packet data, and save the best
//	// data at which the CRC was corrupted
//	CheckParam();
//#else
	if(SX1276LR->RegNbRxBytes > NumberCommands - 1  ){
 80086d4:	4b08      	ldr	r3, [pc, #32]	@ (80086f8 <RxContLoRaCmpl+0xbc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	7cdb      	ldrb	r3, [r3, #19]
 80086da:	2b0a      	cmp	r3, #10
 80086dc:	d906      	bls.n	80086ec <RxContLoRaCmpl+0xb0>
		SX1276ReadBuffer(REG_LR_FIFO, Arr,NumberCommands);
 80086de:	220b      	movs	r2, #11
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	2000      	movs	r0, #0
 80086e4:	f000 f876 	bl	80087d4 <SX1276ReadBuffer>
	}

//#endif
	// maybe we need to return pointers to the right position?
//	SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER );
	return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <RxContLoRaCmpl+0xb2>
		return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	200032d4 	.word	0x200032d4
 80086fc:	20000080 	.word	0x20000080
 8008700:	20000084 	.word	0x20000084

08008704 <SpiInOut>:
extern SPI_HandleTypeDef hspi1;
#endif


uint8_t SpiInOut(uint8_t *outData, uint8_t size )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
    /* Send SPIy data */
    //SPI_I2S_SendData( SPI_INTERFACE, outData );
#ifndef G03108
	HAL_SPI_Transmit(&hspi1, outData, (uint16_t)size, 2000);
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b29a      	uxth	r2, r3
 8008714:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4804      	ldr	r0, [pc, #16]	@ (800872c <SpiInOut+0x28>)
 800871c:	f7fa f8f2 	bl	8002904 <HAL_SPI_Transmit>
#else
	HAL_SPI_Transmit(&hspi1, outData, (uint16_t)size, 2000);
#endif
	//while( SPI_I2S_GetFlagStatus( SPI_INTERFACE, SPI_I2S_FLAG_RXNE ) == RESET );
    //return SPI_I2S_ReceiveData( SPI_INTERFACE );
	return 0;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200003a8 	.word	0x200003a8

08008730 <SpiReceive>:

uint8_t SpiReceive(uint8_t *outData, uint8_t size){
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]

#ifndef G03108
	HAL_SPI_Receive(&hspi1, outData, (uint16_t)size,2000);
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	b29a      	uxth	r2, r3
 8008740:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4804      	ldr	r0, [pc, #16]	@ (8008758 <SpiReceive+0x28>)
 8008748:	f7fa fa20 	bl	8002b8c <HAL_SPI_Receive>
#else
	HAL_SPI_Receive(&hspi1, outData, (uint16_t)size,2000);
#endif
	return 0;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200003a8 	.word	0x200003a8

0800875c <SX1276Write>:
        HAL_GPIO_WritePin( Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET );
    }
}

void SX1276Write( uint8_t addr, uint8_t data )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	460a      	mov	r2, r1
 8008766:	71fb      	strb	r3, [r7, #7]
 8008768:	4613      	mov	r3, r2
 800876a:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800876c:	1db9      	adds	r1, r7, #6
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	2201      	movs	r2, #1
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f804 	bl	8008780 <SX1276WriteBuffer>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
 800878c:	4613      	mov	r3, r2
 800878e:	71bb      	strb	r3, [r7, #6]
    //NSS = 0;
    HAL_GPIO_WritePin( NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET );
 8008790:	2200      	movs	r2, #0
 8008792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008796:	480e      	ldr	r0, [pc, #56]	@ (80087d0 <SX1276WriteBuffer+0x50>)
 8008798:	f7f9 fb3a 	bl	8001e10 <HAL_GPIO_WritePin>
    // rewritten using HAL_SPI_Transmit
    uint8_t adr = addr | 0x80;
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	73fb      	strb	r3, [r7, #15]
    SpiInOut( &adr , 1);
 80087a6:	f107 030f 	add.w	r3, r7, #15
 80087aa:	2101      	movs	r1, #1
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff ffa9 	bl	8008704 <SpiInOut>

    SpiInOut(buffer,size);
 80087b2:	79bb      	ldrb	r3, [r7, #6]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6838      	ldr	r0, [r7, #0]
 80087b8:	f7ff ffa4 	bl	8008704 <SpiInOut>

    //NSS = 1;
    HAL_GPIO_WritePin( NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80087bc:	2201      	movs	r2, #1
 80087be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80087c2:	4803      	ldr	r0, [pc, #12]	@ (80087d0 <SX1276WriteBuffer+0x50>)
 80087c4:	f7f9 fb24 	bl	8001e10 <HAL_GPIO_WritePin>
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	40010800 	.word	0x40010800

080087d4 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	71fb      	strb	r3, [r7, #7]
 80087e0:	4613      	mov	r3, r2
 80087e2:	71bb      	strb	r3, [r7, #6]
    //NSS = 0;
    HAL_GPIO_WritePin( NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET );
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80087ea:	480e      	ldr	r0, [pc, #56]	@ (8008824 <SX1276ReadBuffer+0x50>)
 80087ec:	f7f9 fb10 	bl	8001e10 <HAL_GPIO_WritePin>

    uint8_t adr = addr & 0x7F;
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	73fb      	strb	r3, [r7, #15]
    SpiInOut( &adr, 1 );
 80087fa:	f107 030f 	add.w	r3, r7, #15
 80087fe:	2101      	movs	r1, #1
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff ff7f 	bl	8008704 <SpiInOut>
    //This one is written, maybe it makes sense to change both to Hal transmitRecieve?
    SpiReceive(buffer, size);
 8008806:	79bb      	ldrb	r3, [r7, #6]
 8008808:	4619      	mov	r1, r3
 800880a:	6838      	ldr	r0, [r7, #0]
 800880c:	f7ff ff90 	bl	8008730 <SpiReceive>

    //NSS = 1;
    HAL_GPIO_WritePin( NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8008810:	2201      	movs	r2, #1
 8008812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008816:	4803      	ldr	r0, [pc, #12]	@ (8008824 <SX1276ReadBuffer+0x50>)
 8008818:	f7f9 fafa 	bl	8001e10 <HAL_GPIO_WritePin>
}
 800881c:	bf00      	nop
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40010800 	.word	0x40010800

08008828 <SX1276Read>:

void SX1276Read( uint8_t addr, uint8_t *data )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
    SX1276ReadBuffer( addr, data, 1 );
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2201      	movs	r2, #1
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff ffca 	bl	80087d4 <SX1276ReadBuffer>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SX1276LoRaSetOpMode>:
        SX1276ReadBuffer( REG_OPMODE, SX1276Regs + 1, 0x70 - 1 );
    }
}

void SX1276LoRaSetOpMode( uint8_t opMode )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]
    static uint8_t opModePrev = RFLR_OPMODE_STANDBY;
    static bool antennaSwitchTxOnPrev = true;
    bool antennaSwitchTxOn = false;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]

    opModePrev = SX1276LR->RegOpMode & ~RFLR_OPMODE_MASK;
 8008856:	4b1b      	ldr	r3, [pc, #108]	@ (80088c4 <SX1276LoRaSetOpMode+0x7c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	b2da      	uxtb	r2, r3
 8008862:	4b19      	ldr	r3, [pc, #100]	@ (80088c8 <SX1276LoRaSetOpMode+0x80>)
 8008864:	701a      	strb	r2, [r3, #0]

    if( opMode != opModePrev )
 8008866:	4b18      	ldr	r3, [pc, #96]	@ (80088c8 <SX1276LoRaSetOpMode+0x80>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	79fa      	ldrb	r2, [r7, #7]
 800886c:	429a      	cmp	r2, r3
 800886e:	d00f      	beq.n	8008890 <SX1276LoRaSetOpMode+0x48>
    {
        if( opMode == RFLR_OPMODE_TRANSMITTER )
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b03      	cmp	r3, #3
 8008874:	d102      	bne.n	800887c <SX1276LoRaSetOpMode+0x34>
        {
            antennaSwitchTxOn = true;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
 800887a:	e001      	b.n	8008880 <SX1276LoRaSetOpMode+0x38>
        }
        else
        {
            antennaSwitchTxOn = false;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
        }
        if( antennaSwitchTxOn != antennaSwitchTxOnPrev )
 8008880:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <SX1276LoRaSetOpMode+0x84>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	429a      	cmp	r2, r3
 8008888:	d002      	beq.n	8008890 <SX1276LoRaSetOpMode+0x48>
        {
            antennaSwitchTxOnPrev = antennaSwitchTxOn;
 800888a:	4a10      	ldr	r2, [pc, #64]	@ (80088cc <SX1276LoRaSetOpMode+0x84>)
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	7013      	strb	r3, [r2, #0]
            RXTX( antennaSwitchTxOn ); // Antenna switch control
			#endif

        }
    }
    SX1276LR->RegOpMode = ( SX1276LR->RegOpMode & RFLR_OPMODE_MASK ) | opMode;
 8008890:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <SX1276LoRaSetOpMode+0x7c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	b25b      	sxtb	r3, r3
 8008898:	f023 0307 	bic.w	r3, r3, #7
 800889c:	b25a      	sxtb	r2, r3
 800889e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b25a      	sxtb	r2, r3
 80088a6:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <SX1276LoRaSetOpMode+0x7c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	705a      	strb	r2, [r3, #1]

    SX1276Write( REG_LR_OPMODE, SX1276LR->RegOpMode );
 80088ae:	4b05      	ldr	r3, [pc, #20]	@ (80088c4 <SX1276LoRaSetOpMode+0x7c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	4619      	mov	r1, r3
 80088b6:	2001      	movs	r0, #1
 80088b8:	f7ff ff50 	bl	800875c <SX1276Write>
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200032d4 	.word	0x200032d4
 80088c8:	20000010 	.word	0x20000010
 80088cc:	20000011 	.word	0x20000011

080088d0 <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)Mas, LenStr+1);

}

// Переходит в это прерывание после отправки массива в UART используя DMA
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	// перешли после удачной передачи сюда
	if (huart->Instance == USART1){
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008910 <HAL_UART_TxCpltCallback+0x40>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d112      	bne.n	8008908 <HAL_UART_TxCpltCallback+0x38>
		BaseType_t xHigherPriorityTaskWoken;
		xSemaphoreGiveFromISR(SemDMA_UARTHandle,&xHigherPriorityTaskWoken);
 80088e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008914 <HAL_UART_TxCpltCallback+0x44>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f107 020c 	add.w	r2, r7, #12
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fd fccb 	bl	8006288 <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <HAL_UART_TxCpltCallback+0x38>
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <HAL_UART_TxCpltCallback+0x48>)
 80088fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	f3bf 8f6f 	isb	sy
	}
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40013800 	.word	0x40013800
 8008914:	2000052c 	.word	0x2000052c
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <_strtol_l.constprop.0>:
 800891c:	2b24      	cmp	r3, #36	@ 0x24
 800891e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008922:	4686      	mov	lr, r0
 8008924:	4690      	mov	r8, r2
 8008926:	d801      	bhi.n	800892c <_strtol_l.constprop.0+0x10>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <_strtol_l.constprop.0+0x1e>
 800892c:	f000 f912 	bl	8008b54 <__errno>
 8008930:	2316      	movs	r3, #22
 8008932:	6003      	str	r3, [r0, #0]
 8008934:	2000      	movs	r0, #0
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	460d      	mov	r5, r1
 800893c:	4833      	ldr	r0, [pc, #204]	@ (8008a0c <_strtol_l.constprop.0+0xf0>)
 800893e:	462a      	mov	r2, r5
 8008940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008944:	5d06      	ldrb	r6, [r0, r4]
 8008946:	f016 0608 	ands.w	r6, r6, #8
 800894a:	d1f8      	bne.n	800893e <_strtol_l.constprop.0+0x22>
 800894c:	2c2d      	cmp	r4, #45	@ 0x2d
 800894e:	d12d      	bne.n	80089ac <_strtol_l.constprop.0+0x90>
 8008950:	2601      	movs	r6, #1
 8008952:	782c      	ldrb	r4, [r5, #0]
 8008954:	1c95      	adds	r5, r2, #2
 8008956:	f033 0210 	bics.w	r2, r3, #16
 800895a:	d109      	bne.n	8008970 <_strtol_l.constprop.0+0x54>
 800895c:	2c30      	cmp	r4, #48	@ 0x30
 800895e:	d12a      	bne.n	80089b6 <_strtol_l.constprop.0+0x9a>
 8008960:	782a      	ldrb	r2, [r5, #0]
 8008962:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008966:	2a58      	cmp	r2, #88	@ 0x58
 8008968:	d125      	bne.n	80089b6 <_strtol_l.constprop.0+0x9a>
 800896a:	2310      	movs	r3, #16
 800896c:	786c      	ldrb	r4, [r5, #1]
 800896e:	3502      	adds	r5, #2
 8008970:	2200      	movs	r2, #0
 8008972:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008976:	f10c 3cff 	add.w	ip, ip, #4294967295
 800897a:	fbbc f9f3 	udiv	r9, ip, r3
 800897e:	4610      	mov	r0, r2
 8008980:	fb03 ca19 	mls	sl, r3, r9, ip
 8008984:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008988:	2f09      	cmp	r7, #9
 800898a:	d81b      	bhi.n	80089c4 <_strtol_l.constprop.0+0xa8>
 800898c:	463c      	mov	r4, r7
 800898e:	42a3      	cmp	r3, r4
 8008990:	dd27      	ble.n	80089e2 <_strtol_l.constprop.0+0xc6>
 8008992:	1c57      	adds	r7, r2, #1
 8008994:	d007      	beq.n	80089a6 <_strtol_l.constprop.0+0x8a>
 8008996:	4581      	cmp	r9, r0
 8008998:	d320      	bcc.n	80089dc <_strtol_l.constprop.0+0xc0>
 800899a:	d101      	bne.n	80089a0 <_strtol_l.constprop.0+0x84>
 800899c:	45a2      	cmp	sl, r4
 800899e:	db1d      	blt.n	80089dc <_strtol_l.constprop.0+0xc0>
 80089a0:	2201      	movs	r2, #1
 80089a2:	fb00 4003 	mla	r0, r0, r3, r4
 80089a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089aa:	e7eb      	b.n	8008984 <_strtol_l.constprop.0+0x68>
 80089ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80089ae:	bf04      	itt	eq
 80089b0:	782c      	ldrbeq	r4, [r5, #0]
 80089b2:	1c95      	addeq	r5, r2, #2
 80089b4:	e7cf      	b.n	8008956 <_strtol_l.constprop.0+0x3a>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1da      	bne.n	8008970 <_strtol_l.constprop.0+0x54>
 80089ba:	2c30      	cmp	r4, #48	@ 0x30
 80089bc:	bf0c      	ite	eq
 80089be:	2308      	moveq	r3, #8
 80089c0:	230a      	movne	r3, #10
 80089c2:	e7d5      	b.n	8008970 <_strtol_l.constprop.0+0x54>
 80089c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80089c8:	2f19      	cmp	r7, #25
 80089ca:	d801      	bhi.n	80089d0 <_strtol_l.constprop.0+0xb4>
 80089cc:	3c37      	subs	r4, #55	@ 0x37
 80089ce:	e7de      	b.n	800898e <_strtol_l.constprop.0+0x72>
 80089d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80089d4:	2f19      	cmp	r7, #25
 80089d6:	d804      	bhi.n	80089e2 <_strtol_l.constprop.0+0xc6>
 80089d8:	3c57      	subs	r4, #87	@ 0x57
 80089da:	e7d8      	b.n	800898e <_strtol_l.constprop.0+0x72>
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	e7e1      	b.n	80089a6 <_strtol_l.constprop.0+0x8a>
 80089e2:	1c53      	adds	r3, r2, #1
 80089e4:	d108      	bne.n	80089f8 <_strtol_l.constprop.0+0xdc>
 80089e6:	2322      	movs	r3, #34	@ 0x22
 80089e8:	4660      	mov	r0, ip
 80089ea:	f8ce 3000 	str.w	r3, [lr]
 80089ee:	f1b8 0f00 	cmp.w	r8, #0
 80089f2:	d0a0      	beq.n	8008936 <_strtol_l.constprop.0+0x1a>
 80089f4:	1e69      	subs	r1, r5, #1
 80089f6:	e006      	b.n	8008a06 <_strtol_l.constprop.0+0xea>
 80089f8:	b106      	cbz	r6, 80089fc <_strtol_l.constprop.0+0xe0>
 80089fa:	4240      	negs	r0, r0
 80089fc:	f1b8 0f00 	cmp.w	r8, #0
 8008a00:	d099      	beq.n	8008936 <_strtol_l.constprop.0+0x1a>
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	d1f6      	bne.n	80089f4 <_strtol_l.constprop.0+0xd8>
 8008a06:	f8c8 1000 	str.w	r1, [r8]
 8008a0a:	e794      	b.n	8008936 <_strtol_l.constprop.0+0x1a>
 8008a0c:	08009771 	.word	0x08009771

08008a10 <strtol>:
 8008a10:	4613      	mov	r3, r2
 8008a12:	460a      	mov	r2, r1
 8008a14:	4601      	mov	r1, r0
 8008a16:	4802      	ldr	r0, [pc, #8]	@ (8008a20 <strtol+0x10>)
 8008a18:	6800      	ldr	r0, [r0, #0]
 8008a1a:	f7ff bf7f 	b.w	800891c <_strtol_l.constprop.0>
 8008a1e:	bf00      	nop
 8008a20:	20000014 	.word	0x20000014

08008a24 <siprintf>:
 8008a24:	b40e      	push	{r1, r2, r3}
 8008a26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a2a:	b500      	push	{lr}
 8008a2c:	b09c      	sub	sp, #112	@ 0x70
 8008a2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a30:	9002      	str	r0, [sp, #8]
 8008a32:	9006      	str	r0, [sp, #24]
 8008a34:	9107      	str	r1, [sp, #28]
 8008a36:	9104      	str	r1, [sp, #16]
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <siprintf+0x38>)
 8008a3a:	4909      	ldr	r1, [pc, #36]	@ (8008a60 <siprintf+0x3c>)
 8008a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a40:	9105      	str	r1, [sp, #20]
 8008a42:	6800      	ldr	r0, [r0, #0]
 8008a44:	a902      	add	r1, sp, #8
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	f000 fa10 	bl	8008e6c <_svfiprintf_r>
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	9b02      	ldr	r3, [sp, #8]
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	b01c      	add	sp, #112	@ 0x70
 8008a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a58:	b003      	add	sp, #12
 8008a5a:	4770      	bx	lr
 8008a5c:	20000014 	.word	0x20000014
 8008a60:	ffff0208 	.word	0xffff0208

08008a64 <memmove>:
 8008a64:	4288      	cmp	r0, r1
 8008a66:	b510      	push	{r4, lr}
 8008a68:	eb01 0402 	add.w	r4, r1, r2
 8008a6c:	d902      	bls.n	8008a74 <memmove+0x10>
 8008a6e:	4284      	cmp	r4, r0
 8008a70:	4623      	mov	r3, r4
 8008a72:	d807      	bhi.n	8008a84 <memmove+0x20>
 8008a74:	1e43      	subs	r3, r0, #1
 8008a76:	42a1      	cmp	r1, r4
 8008a78:	d008      	beq.n	8008a8c <memmove+0x28>
 8008a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a82:	e7f8      	b.n	8008a76 <memmove+0x12>
 8008a84:	4601      	mov	r1, r0
 8008a86:	4402      	add	r2, r0
 8008a88:	428a      	cmp	r2, r1
 8008a8a:	d100      	bne.n	8008a8e <memmove+0x2a>
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a96:	e7f7      	b.n	8008a88 <memmove+0x24>

08008a98 <memset>:
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4402      	add	r2, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <_reclaim_reent>:
 8008aa8:	4b29      	ldr	r3, [pc, #164]	@ (8008b50 <_reclaim_reent+0xa8>)
 8008aaa:	b570      	push	{r4, r5, r6, lr}
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4283      	cmp	r3, r0
 8008ab2:	d04b      	beq.n	8008b4c <_reclaim_reent+0xa4>
 8008ab4:	69c3      	ldr	r3, [r0, #28]
 8008ab6:	b1ab      	cbz	r3, 8008ae4 <_reclaim_reent+0x3c>
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	b16b      	cbz	r3, 8008ad8 <_reclaim_reent+0x30>
 8008abc:	2500      	movs	r5, #0
 8008abe:	69e3      	ldr	r3, [r4, #28]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	5959      	ldr	r1, [r3, r5]
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d13b      	bne.n	8008b40 <_reclaim_reent+0x98>
 8008ac8:	3504      	adds	r5, #4
 8008aca:	2d80      	cmp	r5, #128	@ 0x80
 8008acc:	d1f7      	bne.n	8008abe <_reclaim_reent+0x16>
 8008ace:	69e3      	ldr	r3, [r4, #28]
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	f000 f878 	bl	8008bc8 <_free_r>
 8008ad8:	69e3      	ldr	r3, [r4, #28]
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	b111      	cbz	r1, 8008ae4 <_reclaim_reent+0x3c>
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 f872 	bl	8008bc8 <_free_r>
 8008ae4:	6961      	ldr	r1, [r4, #20]
 8008ae6:	b111      	cbz	r1, 8008aee <_reclaim_reent+0x46>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 f86d 	bl	8008bc8 <_free_r>
 8008aee:	69e1      	ldr	r1, [r4, #28]
 8008af0:	b111      	cbz	r1, 8008af8 <_reclaim_reent+0x50>
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f868 	bl	8008bc8 <_free_r>
 8008af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008afa:	b111      	cbz	r1, 8008b02 <_reclaim_reent+0x5a>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f863 	bl	8008bc8 <_free_r>
 8008b02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b04:	b111      	cbz	r1, 8008b0c <_reclaim_reent+0x64>
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f85e 	bl	8008bc8 <_free_r>
 8008b0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008b0e:	b111      	cbz	r1, 8008b16 <_reclaim_reent+0x6e>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f859 	bl	8008bc8 <_free_r>
 8008b16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008b18:	b111      	cbz	r1, 8008b20 <_reclaim_reent+0x78>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f854 	bl	8008bc8 <_free_r>
 8008b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008b22:	b111      	cbz	r1, 8008b2a <_reclaim_reent+0x82>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f84f 	bl	8008bc8 <_free_r>
 8008b2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b2c:	b111      	cbz	r1, 8008b34 <_reclaim_reent+0x8c>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f84a 	bl	8008bc8 <_free_r>
 8008b34:	6a23      	ldr	r3, [r4, #32]
 8008b36:	b14b      	cbz	r3, 8008b4c <_reclaim_reent+0xa4>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b3e:	4718      	bx	r3
 8008b40:	680e      	ldr	r6, [r1, #0]
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f840 	bl	8008bc8 <_free_r>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	e7bb      	b.n	8008ac4 <_reclaim_reent+0x1c>
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000014 	.word	0x20000014

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	@ (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000014 	.word	0x20000014

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	2600      	movs	r6, #0
 8008b64:	4d0c      	ldr	r5, [pc, #48]	@ (8008b98 <__libc_init_array+0x38>)
 8008b66:	4c0d      	ldr	r4, [pc, #52]	@ (8008b9c <__libc_init_array+0x3c>)
 8008b68:	1b64      	subs	r4, r4, r5
 8008b6a:	10a4      	asrs	r4, r4, #2
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	f000 fc5e 	bl	8009430 <_init>
 8008b74:	2600      	movs	r6, #0
 8008b76:	4d0a      	ldr	r5, [pc, #40]	@ (8008ba0 <__libc_init_array+0x40>)
 8008b78:	4c0a      	ldr	r4, [pc, #40]	@ (8008ba4 <__libc_init_array+0x44>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	080098ac 	.word	0x080098ac
 8008b9c:	080098ac 	.word	0x080098ac
 8008ba0:	080098ac 	.word	0x080098ac
 8008ba4:	080098b0 	.word	0x080098b0

08008ba8 <__retarget_lock_acquire_recursive>:
 8008ba8:	4770      	bx	lr

08008baa <__retarget_lock_release_recursive>:
 8008baa:	4770      	bx	lr

08008bac <memcpy>:
 8008bac:	440a      	add	r2, r1
 8008bae:	4291      	cmp	r1, r2
 8008bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb4:	d100      	bne.n	8008bb8 <memcpy+0xc>
 8008bb6:	4770      	bx	lr
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bbe:	4291      	cmp	r1, r2
 8008bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc4:	d1f9      	bne.n	8008bba <memcpy+0xe>
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <_free_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4605      	mov	r5, r0
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d040      	beq.n	8008c52 <_free_r+0x8a>
 8008bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd4:	1f0c      	subs	r4, r1, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	18e4      	addlt	r4, r4, r3
 8008bdc:	f000 f8de 	bl	8008d9c <__malloc_lock>
 8008be0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c54 <_free_r+0x8c>)
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	b933      	cbnz	r3, 8008bf4 <_free_r+0x2c>
 8008be6:	6063      	str	r3, [r4, #4]
 8008be8:	6014      	str	r4, [r2, #0]
 8008bea:	4628      	mov	r0, r5
 8008bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf0:	f000 b8da 	b.w	8008da8 <__malloc_unlock>
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	d908      	bls.n	8008c0a <_free_r+0x42>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	1821      	adds	r1, r4, r0
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf01      	itttt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	1809      	addeq	r1, r1, r0
 8008c06:	6021      	streq	r1, [r4, #0]
 8008c08:	e7ed      	b.n	8008be6 <_free_r+0x1e>
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b10b      	cbz	r3, 8008c14 <_free_r+0x4c>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d9fa      	bls.n	8008c0a <_free_r+0x42>
 8008c14:	6811      	ldr	r1, [r2, #0]
 8008c16:	1850      	adds	r0, r2, r1
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d10b      	bne.n	8008c34 <_free_r+0x6c>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	4401      	add	r1, r0
 8008c20:	1850      	adds	r0, r2, r1
 8008c22:	4283      	cmp	r3, r0
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	d1e0      	bne.n	8008bea <_free_r+0x22>
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4408      	add	r0, r1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	6053      	str	r3, [r2, #4]
 8008c32:	e7da      	b.n	8008bea <_free_r+0x22>
 8008c34:	d902      	bls.n	8008c3c <_free_r+0x74>
 8008c36:	230c      	movs	r3, #12
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	e7d6      	b.n	8008bea <_free_r+0x22>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf01      	itttt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	1809      	addeq	r1, r1, r0
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6054      	str	r4, [r2, #4]
 8008c50:	e7cb      	b.n	8008bea <_free_r+0x22>
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	2000341c 	.word	0x2000341c

08008c58 <sbrk_aligned>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008c98 <sbrk_aligned+0x40>)
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	6831      	ldr	r1, [r6, #0]
 8008c60:	4605      	mov	r5, r0
 8008c62:	b911      	cbnz	r1, 8008c6a <sbrk_aligned+0x12>
 8008c64:	f000 fb90 	bl	8009388 <_sbrk_r>
 8008c68:	6030      	str	r0, [r6, #0]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 fb8b 	bl	8009388 <_sbrk_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d103      	bne.n	8008c7e <sbrk_aligned+0x26>
 8008c76:	f04f 34ff 	mov.w	r4, #4294967295
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d0f8      	beq.n	8008c7a <sbrk_aligned+0x22>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 fb7c 	bl	8009388 <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d1f2      	bne.n	8008c7a <sbrk_aligned+0x22>
 8008c94:	e7ef      	b.n	8008c76 <sbrk_aligned+0x1e>
 8008c96:	bf00      	nop
 8008c98:	20003418 	.word	0x20003418

08008c9c <_malloc_r>:
 8008c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca0:	1ccd      	adds	r5, r1, #3
 8008ca2:	f025 0503 	bic.w	r5, r5, #3
 8008ca6:	3508      	adds	r5, #8
 8008ca8:	2d0c      	cmp	r5, #12
 8008caa:	bf38      	it	cc
 8008cac:	250c      	movcc	r5, #12
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	db01      	blt.n	8008cb8 <_malloc_r+0x1c>
 8008cb4:	42a9      	cmp	r1, r5
 8008cb6:	d904      	bls.n	8008cc2 <_malloc_r+0x26>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	6033      	str	r3, [r6, #0]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d98 <_malloc_r+0xfc>
 8008cc6:	f000 f869 	bl	8008d9c <__malloc_lock>
 8008cca:	f8d8 3000 	ldr.w	r3, [r8]
 8008cce:	461c      	mov	r4, r3
 8008cd0:	bb44      	cbnz	r4, 8008d24 <_malloc_r+0x88>
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff ffbf 	bl	8008c58 <sbrk_aligned>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	4604      	mov	r4, r0
 8008cde:	d158      	bne.n	8008d92 <_malloc_r+0xf6>
 8008ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ce4:	4627      	mov	r7, r4
 8008ce6:	2f00      	cmp	r7, #0
 8008ce8:	d143      	bne.n	8008d72 <_malloc_r+0xd6>
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	d04b      	beq.n	8008d86 <_malloc_r+0xea>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	eb04 0903 	add.w	r9, r4, r3
 8008cf8:	f000 fb46 	bl	8009388 <_sbrk_r>
 8008cfc:	4581      	cmp	r9, r0
 8008cfe:	d142      	bne.n	8008d86 <_malloc_r+0xea>
 8008d00:	6821      	ldr	r1, [r4, #0]
 8008d02:	4630      	mov	r0, r6
 8008d04:	1a6d      	subs	r5, r5, r1
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7ff ffa6 	bl	8008c58 <sbrk_aligned>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d03a      	beq.n	8008d86 <_malloc_r+0xea>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	442b      	add	r3, r5
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	bb62      	cbnz	r2, 8008d78 <_malloc_r+0xdc>
 8008d1e:	f8c8 7000 	str.w	r7, [r8]
 8008d22:	e00f      	b.n	8008d44 <_malloc_r+0xa8>
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	1b52      	subs	r2, r2, r5
 8008d28:	d420      	bmi.n	8008d6c <_malloc_r+0xd0>
 8008d2a:	2a0b      	cmp	r2, #11
 8008d2c:	d917      	bls.n	8008d5e <_malloc_r+0xc2>
 8008d2e:	1961      	adds	r1, r4, r5
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	6025      	str	r5, [r4, #0]
 8008d34:	bf18      	it	ne
 8008d36:	6059      	strne	r1, [r3, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	bf08      	it	eq
 8008d3c:	f8c8 1000 	streq.w	r1, [r8]
 8008d40:	5162      	str	r2, [r4, r5]
 8008d42:	604b      	str	r3, [r1, #4]
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 f82f 	bl	8008da8 <__malloc_unlock>
 8008d4a:	f104 000b 	add.w	r0, r4, #11
 8008d4e:	1d23      	adds	r3, r4, #4
 8008d50:	f020 0007 	bic.w	r0, r0, #7
 8008d54:	1ac2      	subs	r2, r0, r3
 8008d56:	bf1c      	itt	ne
 8008d58:	1a1b      	subne	r3, r3, r0
 8008d5a:	50a3      	strne	r3, [r4, r2]
 8008d5c:	e7af      	b.n	8008cbe <_malloc_r+0x22>
 8008d5e:	6862      	ldr	r2, [r4, #4]
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	bf0c      	ite	eq
 8008d64:	f8c8 2000 	streq.w	r2, [r8]
 8008d68:	605a      	strne	r2, [r3, #4]
 8008d6a:	e7eb      	b.n	8008d44 <_malloc_r+0xa8>
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	6864      	ldr	r4, [r4, #4]
 8008d70:	e7ae      	b.n	8008cd0 <_malloc_r+0x34>
 8008d72:	463c      	mov	r4, r7
 8008d74:	687f      	ldr	r7, [r7, #4]
 8008d76:	e7b6      	b.n	8008ce6 <_malloc_r+0x4a>
 8008d78:	461a      	mov	r2, r3
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	d1fb      	bne.n	8008d78 <_malloc_r+0xdc>
 8008d80:	2300      	movs	r3, #0
 8008d82:	6053      	str	r3, [r2, #4]
 8008d84:	e7de      	b.n	8008d44 <_malloc_r+0xa8>
 8008d86:	230c      	movs	r3, #12
 8008d88:	4630      	mov	r0, r6
 8008d8a:	6033      	str	r3, [r6, #0]
 8008d8c:	f000 f80c 	bl	8008da8 <__malloc_unlock>
 8008d90:	e794      	b.n	8008cbc <_malloc_r+0x20>
 8008d92:	6005      	str	r5, [r0, #0]
 8008d94:	e7d6      	b.n	8008d44 <_malloc_r+0xa8>
 8008d96:	bf00      	nop
 8008d98:	2000341c 	.word	0x2000341c

08008d9c <__malloc_lock>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	@ (8008da4 <__malloc_lock+0x8>)
 8008d9e:	f7ff bf03 	b.w	8008ba8 <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	20003414 	.word	0x20003414

08008da8 <__malloc_unlock>:
 8008da8:	4801      	ldr	r0, [pc, #4]	@ (8008db0 <__malloc_unlock+0x8>)
 8008daa:	f7ff befe 	b.w	8008baa <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	20003414 	.word	0x20003414

08008db4 <__ssputs_r>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	461f      	mov	r7, r3
 8008dba:	688e      	ldr	r6, [r1, #8]
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	42be      	cmp	r6, r7
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4690      	mov	r8, r2
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	d82d      	bhi.n	8008e24 <__ssputs_r+0x70>
 8008dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dd0:	d026      	beq.n	8008e20 <__ssputs_r+0x6c>
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	6909      	ldr	r1, [r1, #16]
 8008dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dda:	eba3 0901 	sub.w	r9, r3, r1
 8008dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de2:	1c7b      	adds	r3, r7, #1
 8008de4:	444b      	add	r3, r9
 8008de6:	106d      	asrs	r5, r5, #1
 8008de8:	429d      	cmp	r5, r3
 8008dea:	bf38      	it	cc
 8008dec:	461d      	movcc	r5, r3
 8008dee:	0553      	lsls	r3, r2, #21
 8008df0:	d527      	bpl.n	8008e42 <__ssputs_r+0x8e>
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7ff ff52 	bl	8008c9c <_malloc_r>
 8008df8:	4606      	mov	r6, r0
 8008dfa:	b360      	cbz	r0, 8008e56 <__ssputs_r+0xa2>
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	6921      	ldr	r1, [r4, #16]
 8008e00:	f7ff fed4 	bl	8008bac <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	6126      	str	r6, [r4, #16]
 8008e12:	444e      	add	r6, r9
 8008e14:	6026      	str	r6, [r4, #0]
 8008e16:	463e      	mov	r6, r7
 8008e18:	6165      	str	r5, [r4, #20]
 8008e1a:	eba5 0509 	sub.w	r5, r5, r9
 8008e1e:	60a5      	str	r5, [r4, #8]
 8008e20:	42be      	cmp	r6, r7
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x72>
 8008e24:	463e      	mov	r6, r7
 8008e26:	4632      	mov	r2, r6
 8008e28:	4641      	mov	r1, r8
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	f7ff fe1a 	bl	8008a64 <memmove>
 8008e30:	2000      	movs	r0, #0
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	4433      	add	r3, r6
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	462a      	mov	r2, r5
 8008e44:	f000 fabe 	bl	80093c4 <_realloc_r>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1e0      	bne.n	8008e10 <__ssputs_r+0x5c>
 8008e4e:	4650      	mov	r0, sl
 8008e50:	6921      	ldr	r1, [r4, #16]
 8008e52:	f7ff feb9 	bl	8008bc8 <_free_r>
 8008e56:	230c      	movs	r3, #12
 8008e58:	f8ca 3000 	str.w	r3, [sl]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	e7e9      	b.n	8008e3e <__ssputs_r+0x8a>
	...

08008e6c <_svfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4698      	mov	r8, r3
 8008e72:	898b      	ldrh	r3, [r1, #12]
 8008e74:	4607      	mov	r7, r0
 8008e76:	061b      	lsls	r3, r3, #24
 8008e78:	460d      	mov	r5, r1
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	b09d      	sub	sp, #116	@ 0x74
 8008e7e:	d510      	bpl.n	8008ea2 <_svfiprintf_r+0x36>
 8008e80:	690b      	ldr	r3, [r1, #16]
 8008e82:	b973      	cbnz	r3, 8008ea2 <_svfiprintf_r+0x36>
 8008e84:	2140      	movs	r1, #64	@ 0x40
 8008e86:	f7ff ff09 	bl	8008c9c <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	6128      	str	r0, [r5, #16]
 8008e8e:	b930      	cbnz	r0, 8008e9e <_svfiprintf_r+0x32>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b01d      	add	sp, #116	@ 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	2340      	movs	r3, #64	@ 0x40
 8008ea0:	616b      	str	r3, [r5, #20]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eac:	2330      	movs	r3, #48	@ 0x30
 8008eae:	f04f 0901 	mov.w	r9, #1
 8008eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009050 <_svfiprintf_r+0x1e4>
 8008eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec6:	b10a      	cbz	r2, 8008ecc <_svfiprintf_r+0x60>
 8008ec8:	2a25      	cmp	r2, #37	@ 0x25
 8008eca:	d1f9      	bne.n	8008ec0 <_svfiprintf_r+0x54>
 8008ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed0:	d00b      	beq.n	8008eea <_svfiprintf_r+0x7e>
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ff6b 	bl	8008db4 <__ssputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80a7 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee6:	445a      	add	r2, fp
 8008ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eea:	f89a 3000 	ldrb.w	r3, [sl]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 809f 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efe:	f10a 0a01 	add.w	sl, sl, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0c:	4654      	mov	r4, sl
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	484e      	ldr	r0, [pc, #312]	@ (8009050 <_svfiprintf_r+0x1e4>)
 8008f16:	f000 fa47 	bl	80093a8 <memchr>
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_svfiprintf_r+0xea>
 8008f1e:	06d0      	lsls	r0, r2, #27
 8008f20:	bf44      	itt	mi
 8008f22:	2320      	movmi	r3, #32
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	0711      	lsls	r1, r2, #28
 8008f2a:	bf44      	itt	mi
 8008f2c:	232b      	movmi	r3, #43	@ 0x2b
 8008f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xfa>
 8008f3a:	4654      	mov	r4, sl
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	4621      	mov	r1, r4
 8008f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4a:	3b30      	subs	r3, #48	@ 0x30
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d94b      	bls.n	8008fe8 <_svfiprintf_r+0x17c>
 8008f50:	b1b0      	cbz	r0, 8008f80 <_svfiprintf_r+0x114>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e014      	b.n	8008f80 <_svfiprintf_r+0x114>
 8008f56:	eba0 0308 	sub.w	r3, r0, r8
 8008f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	46a2      	mov	sl, r4
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	e7d2      	b.n	8008f0c <_svfiprintf_r+0xa0>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbb      	ittet	lt
 8008f72:	425b      	neglt	r3, r3
 8008f74:	f042 0202 	orrlt.w	r2, r2, #2
 8008f78:	9307      	strge	r3, [sp, #28]
 8008f7a:	9307      	strlt	r3, [sp, #28]
 8008f7c:	bfb8      	it	lt
 8008f7e:	9204      	strlt	r2, [sp, #16]
 8008f80:	7823      	ldrb	r3, [r4, #0]
 8008f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f84:	d10a      	bne.n	8008f9c <_svfiprintf_r+0x130>
 8008f86:	7863      	ldrb	r3, [r4, #1]
 8008f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8a:	d132      	bne.n	8008ff2 <_svfiprintf_r+0x186>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	3402      	adds	r4, #2
 8008f90:	1d1a      	adds	r2, r3, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	9203      	str	r2, [sp, #12]
 8008f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009054 <_svfiprintf_r+0x1e8>
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	7821      	ldrb	r1, [r4, #0]
 8008fa6:	f000 f9ff 	bl	80093a8 <memchr>
 8008faa:	b138      	cbz	r0, 8008fbc <_svfiprintf_r+0x150>
 8008fac:	2240      	movs	r2, #64	@ 0x40
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	eba0 000a 	sub.w	r0, r0, sl
 8008fb4:	4082      	lsls	r2, r0
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	2206      	movs	r2, #6
 8008fc2:	4825      	ldr	r0, [pc, #148]	@ (8009058 <_svfiprintf_r+0x1ec>)
 8008fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc8:	f000 f9ee 	bl	80093a8 <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d036      	beq.n	800903e <_svfiprintf_r+0x1d2>
 8008fd0:	4b22      	ldr	r3, [pc, #136]	@ (800905c <_svfiprintf_r+0x1f0>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_svfiprintf_r+0x1b0>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	4433      	add	r3, r6
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	e76a      	b.n	8008ebe <_svfiprintf_r+0x52>
 8008fe8:	460c      	mov	r4, r1
 8008fea:	2001      	movs	r0, #1
 8008fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff0:	e7a8      	b.n	8008f44 <_svfiprintf_r+0xd8>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	3401      	adds	r4, #1
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	@ 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x1a6>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <_svfiprintf_r+0x130>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c4      	b.n	8008f9c <_svfiprintf_r+0x130>
 8009012:	4604      	mov	r4, r0
 8009014:	2301      	movs	r3, #1
 8009016:	fb0c 2101 	mla	r1, ip, r1, r2
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x192>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4638      	mov	r0, r7
 8009024:	4b0e      	ldr	r3, [pc, #56]	@ (8009060 <_svfiprintf_r+0x1f4>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	f3af 8000 	nop.w
 800902c:	1c42      	adds	r2, r0, #1
 800902e:	4606      	mov	r6, r0
 8009030:	d1d6      	bne.n	8008fe0 <_svfiprintf_r+0x174>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	065b      	lsls	r3, r3, #25
 8009036:	f53f af2d 	bmi.w	8008e94 <_svfiprintf_r+0x28>
 800903a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800903c:	e72c      	b.n	8008e98 <_svfiprintf_r+0x2c>
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462a      	mov	r2, r5
 8009044:	4638      	mov	r0, r7
 8009046:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <_svfiprintf_r+0x1f4>)
 8009048:	a904      	add	r1, sp, #16
 800904a:	f000 f87d 	bl	8009148 <_printf_i>
 800904e:	e7ed      	b.n	800902c <_svfiprintf_r+0x1c0>
 8009050:	08009871 	.word	0x08009871
 8009054:	08009877 	.word	0x08009877
 8009058:	0800987b 	.word	0x0800987b
 800905c:	00000000 	.word	0x00000000
 8009060:	08008db5 	.word	0x08008db5

08009064 <_printf_common>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	4616      	mov	r6, r2
 800906a:	4698      	mov	r8, r3
 800906c:	688a      	ldr	r2, [r1, #8]
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	4607      	mov	r7, r0
 8009072:	4293      	cmp	r3, r2
 8009074:	bfb8      	it	lt
 8009076:	4613      	movlt	r3, r2
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800907e:	460c      	mov	r4, r1
 8009080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009084:	b10a      	cbz	r2, 800908a <_printf_common+0x26>
 8009086:	3301      	adds	r3, #1
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	0699      	lsls	r1, r3, #26
 800908e:	bf42      	ittt	mi
 8009090:	6833      	ldrmi	r3, [r6, #0]
 8009092:	3302      	addmi	r3, #2
 8009094:	6033      	strmi	r3, [r6, #0]
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	f015 0506 	ands.w	r5, r5, #6
 800909c:	d106      	bne.n	80090ac <_printf_common+0x48>
 800909e:	f104 0a19 	add.w	sl, r4, #25
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	6832      	ldr	r2, [r6, #0]
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc2b      	bgt.n	8009104 <_printf_common+0xa0>
 80090ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	3b00      	subs	r3, #0
 80090b4:	bf18      	it	ne
 80090b6:	2301      	movne	r3, #1
 80090b8:	0692      	lsls	r2, r2, #26
 80090ba:	d430      	bmi.n	800911e <_printf_common+0xba>
 80090bc:	4641      	mov	r1, r8
 80090be:	4638      	mov	r0, r7
 80090c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c4:	47c8      	blx	r9
 80090c6:	3001      	adds	r0, #1
 80090c8:	d023      	beq.n	8009112 <_printf_common+0xae>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	f003 0306 	and.w	r3, r3, #6
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	bf14      	ite	ne
 80090d6:	2500      	movne	r5, #0
 80090d8:	6833      	ldreq	r3, [r6, #0]
 80090da:	f04f 0600 	mov.w	r6, #0
 80090de:	bf08      	it	eq
 80090e0:	68e5      	ldreq	r5, [r4, #12]
 80090e2:	f104 041a 	add.w	r4, r4, #26
 80090e6:	bf08      	it	eq
 80090e8:	1aed      	subeq	r5, r5, r3
 80090ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090ee:	bf08      	it	eq
 80090f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bfc4      	itt	gt
 80090f8:	1a9b      	subgt	r3, r3, r2
 80090fa:	18ed      	addgt	r5, r5, r3
 80090fc:	42b5      	cmp	r5, r6
 80090fe:	d11a      	bne.n	8009136 <_printf_common+0xd2>
 8009100:	2000      	movs	r0, #0
 8009102:	e008      	b.n	8009116 <_printf_common+0xb2>
 8009104:	2301      	movs	r3, #1
 8009106:	4652      	mov	r2, sl
 8009108:	4641      	mov	r1, r8
 800910a:	4638      	mov	r0, r7
 800910c:	47c8      	blx	r9
 800910e:	3001      	adds	r0, #1
 8009110:	d103      	bne.n	800911a <_printf_common+0xb6>
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911a:	3501      	adds	r5, #1
 800911c:	e7c1      	b.n	80090a2 <_printf_common+0x3e>
 800911e:	2030      	movs	r0, #48	@ 0x30
 8009120:	18e1      	adds	r1, r4, r3
 8009122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800912c:	4422      	add	r2, r4
 800912e:	3302      	adds	r3, #2
 8009130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009134:	e7c2      	b.n	80090bc <_printf_common+0x58>
 8009136:	2301      	movs	r3, #1
 8009138:	4622      	mov	r2, r4
 800913a:	4641      	mov	r1, r8
 800913c:	4638      	mov	r0, r7
 800913e:	47c8      	blx	r9
 8009140:	3001      	adds	r0, #1
 8009142:	d0e6      	beq.n	8009112 <_printf_common+0xae>
 8009144:	3601      	adds	r6, #1
 8009146:	e7d9      	b.n	80090fc <_printf_common+0x98>

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	7e0f      	ldrb	r7, [r1, #24]
 800914e:	4691      	mov	r9, r2
 8009150:	2f78      	cmp	r7, #120	@ 0x78
 8009152:	4680      	mov	r8, r0
 8009154:	460c      	mov	r4, r1
 8009156:	469a      	mov	sl, r3
 8009158:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800915a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	@ 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d3 	beq.w	8009310 <_printf_i+0x1c8>
 800916a:	2f58      	cmp	r7, #88	@ 0x58
 800916c:	f000 80ba 	beq.w	80092e4 <_printf_i+0x19c>
 8009170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a101      	add	r1, pc, #4	@ (adr r1, 8009188 <_printf_i+0x40>)
 8009184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	080092f7 	.word	0x080092f7
 80091b8:	0800921f 	.word	0x0800921f
 80091bc:	080092b1 	.word	0x080092b1
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	08009319 	.word	0x08009319
 80091cc:	08009171 	.word	0x08009171
 80091d0:	0800921f 	.word	0x0800921f
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092b9 	.word	0x080092b9
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6032      	str	r2, [r6, #0]
 80091e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e09e      	b.n	8009332 <_printf_i+0x1ea>
 80091f4:	6833      	ldr	r3, [r6, #0]
 80091f6:	6820      	ldr	r0, [r4, #0]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	6031      	str	r1, [r6, #0]
 80091fc:	0606      	lsls	r6, r0, #24
 80091fe:	d501      	bpl.n	8009204 <_printf_i+0xbc>
 8009200:	681d      	ldr	r5, [r3, #0]
 8009202:	e003      	b.n	800920c <_printf_i+0xc4>
 8009204:	0645      	lsls	r5, r0, #25
 8009206:	d5fb      	bpl.n	8009200 <_printf_i+0xb8>
 8009208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800920c:	2d00      	cmp	r5, #0
 800920e:	da03      	bge.n	8009218 <_printf_i+0xd0>
 8009210:	232d      	movs	r3, #45	@ 0x2d
 8009212:	426d      	negs	r5, r5
 8009214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009218:	230a      	movs	r3, #10
 800921a:	4859      	ldr	r0, [pc, #356]	@ (8009380 <_printf_i+0x238>)
 800921c:	e011      	b.n	8009242 <_printf_i+0xfa>
 800921e:	6821      	ldr	r1, [r4, #0]
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	0608      	lsls	r0, r1, #24
 8009224:	f853 5b04 	ldr.w	r5, [r3], #4
 8009228:	d402      	bmi.n	8009230 <_printf_i+0xe8>
 800922a:	0649      	lsls	r1, r1, #25
 800922c:	bf48      	it	mi
 800922e:	b2ad      	uxthmi	r5, r5
 8009230:	2f6f      	cmp	r7, #111	@ 0x6f
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	bf14      	ite	ne
 8009236:	230a      	movne	r3, #10
 8009238:	2308      	moveq	r3, #8
 800923a:	4851      	ldr	r0, [pc, #324]	@ (8009380 <_printf_i+0x238>)
 800923c:	2100      	movs	r1, #0
 800923e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009242:	6866      	ldr	r6, [r4, #4]
 8009244:	2e00      	cmp	r6, #0
 8009246:	bfa8      	it	ge
 8009248:	6821      	ldrge	r1, [r4, #0]
 800924a:	60a6      	str	r6, [r4, #8]
 800924c:	bfa4      	itt	ge
 800924e:	f021 0104 	bicge.w	r1, r1, #4
 8009252:	6021      	strge	r1, [r4, #0]
 8009254:	b90d      	cbnz	r5, 800925a <_printf_i+0x112>
 8009256:	2e00      	cmp	r6, #0
 8009258:	d04b      	beq.n	80092f2 <_printf_i+0x1aa>
 800925a:	4616      	mov	r6, r2
 800925c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009260:	fb03 5711 	mls	r7, r3, r1, r5
 8009264:	5dc7      	ldrb	r7, [r0, r7]
 8009266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800926a:	462f      	mov	r7, r5
 800926c:	42bb      	cmp	r3, r7
 800926e:	460d      	mov	r5, r1
 8009270:	d9f4      	bls.n	800925c <_printf_i+0x114>
 8009272:	2b08      	cmp	r3, #8
 8009274:	d10b      	bne.n	800928e <_printf_i+0x146>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	07df      	lsls	r7, r3, #31
 800927a:	d508      	bpl.n	800928e <_printf_i+0x146>
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	6861      	ldr	r1, [r4, #4]
 8009280:	4299      	cmp	r1, r3
 8009282:	bfde      	ittt	le
 8009284:	2330      	movle	r3, #48	@ 0x30
 8009286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800928a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800928e:	1b92      	subs	r2, r2, r6
 8009290:	6122      	str	r2, [r4, #16]
 8009292:	464b      	mov	r3, r9
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f8cd a000 	str.w	sl, [sp]
 800929c:	aa03      	add	r2, sp, #12
 800929e:	f7ff fee1 	bl	8009064 <_printf_common>
 80092a2:	3001      	adds	r0, #1
 80092a4:	d14a      	bne.n	800933c <_printf_i+0x1f4>
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295
 80092aa:	b004      	add	sp, #16
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	f043 0320 	orr.w	r3, r3, #32
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	2778      	movs	r7, #120	@ 0x78
 80092ba:	4832      	ldr	r0, [pc, #200]	@ (8009384 <_printf_i+0x23c>)
 80092bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	6831      	ldr	r1, [r6, #0]
 80092c4:	061f      	lsls	r7, r3, #24
 80092c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80092ca:	d402      	bmi.n	80092d2 <_printf_i+0x18a>
 80092cc:	065f      	lsls	r7, r3, #25
 80092ce:	bf48      	it	mi
 80092d0:	b2ad      	uxthmi	r5, r5
 80092d2:	6031      	str	r1, [r6, #0]
 80092d4:	07d9      	lsls	r1, r3, #31
 80092d6:	bf44      	itt	mi
 80092d8:	f043 0320 	orrmi.w	r3, r3, #32
 80092dc:	6023      	strmi	r3, [r4, #0]
 80092de:	b11d      	cbz	r5, 80092e8 <_printf_i+0x1a0>
 80092e0:	2310      	movs	r3, #16
 80092e2:	e7ab      	b.n	800923c <_printf_i+0xf4>
 80092e4:	4826      	ldr	r0, [pc, #152]	@ (8009380 <_printf_i+0x238>)
 80092e6:	e7e9      	b.n	80092bc <_printf_i+0x174>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	f023 0320 	bic.w	r3, r3, #32
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	e7f6      	b.n	80092e0 <_printf_i+0x198>
 80092f2:	4616      	mov	r6, r2
 80092f4:	e7bd      	b.n	8009272 <_printf_i+0x12a>
 80092f6:	6833      	ldr	r3, [r6, #0]
 80092f8:	6825      	ldr	r5, [r4, #0]
 80092fa:	1d18      	adds	r0, r3, #4
 80092fc:	6961      	ldr	r1, [r4, #20]
 80092fe:	6030      	str	r0, [r6, #0]
 8009300:	062e      	lsls	r6, r5, #24
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	d501      	bpl.n	800930a <_printf_i+0x1c2>
 8009306:	6019      	str	r1, [r3, #0]
 8009308:	e002      	b.n	8009310 <_printf_i+0x1c8>
 800930a:	0668      	lsls	r0, r5, #25
 800930c:	d5fb      	bpl.n	8009306 <_printf_i+0x1be>
 800930e:	8019      	strh	r1, [r3, #0]
 8009310:	2300      	movs	r3, #0
 8009312:	4616      	mov	r6, r2
 8009314:	6123      	str	r3, [r4, #16]
 8009316:	e7bc      	b.n	8009292 <_printf_i+0x14a>
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	2100      	movs	r1, #0
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	681e      	ldr	r6, [r3, #0]
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f83f 	bl	80093a8 <memchr>
 800932a:	b108      	cbz	r0, 8009330 <_printf_i+0x1e8>
 800932c:	1b80      	subs	r0, r0, r6
 800932e:	6060      	str	r0, [r4, #4]
 8009330:	6863      	ldr	r3, [r4, #4]
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	2300      	movs	r3, #0
 8009336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800933a:	e7aa      	b.n	8009292 <_printf_i+0x14a>
 800933c:	4632      	mov	r2, r6
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	47d0      	blx	sl
 8009346:	3001      	adds	r0, #1
 8009348:	d0ad      	beq.n	80092a6 <_printf_i+0x15e>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	079b      	lsls	r3, r3, #30
 800934e:	d413      	bmi.n	8009378 <_printf_i+0x230>
 8009350:	68e0      	ldr	r0, [r4, #12]
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	4298      	cmp	r0, r3
 8009356:	bfb8      	it	lt
 8009358:	4618      	movlt	r0, r3
 800935a:	e7a6      	b.n	80092aa <_printf_i+0x162>
 800935c:	2301      	movs	r3, #1
 800935e:	4632      	mov	r2, r6
 8009360:	4649      	mov	r1, r9
 8009362:	4640      	mov	r0, r8
 8009364:	47d0      	blx	sl
 8009366:	3001      	adds	r0, #1
 8009368:	d09d      	beq.n	80092a6 <_printf_i+0x15e>
 800936a:	3501      	adds	r5, #1
 800936c:	68e3      	ldr	r3, [r4, #12]
 800936e:	9903      	ldr	r1, [sp, #12]
 8009370:	1a5b      	subs	r3, r3, r1
 8009372:	42ab      	cmp	r3, r5
 8009374:	dcf2      	bgt.n	800935c <_printf_i+0x214>
 8009376:	e7eb      	b.n	8009350 <_printf_i+0x208>
 8009378:	2500      	movs	r5, #0
 800937a:	f104 0619 	add.w	r6, r4, #25
 800937e:	e7f5      	b.n	800936c <_printf_i+0x224>
 8009380:	08009882 	.word	0x08009882
 8009384:	08009893 	.word	0x08009893

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	2300      	movs	r3, #0
 800938c:	4d05      	ldr	r5, [pc, #20]	@ (80093a4 <_sbrk_r+0x1c>)
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f7 fdc0 	bl	8000f18 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20003410 	.word	0x20003410

080093a8 <memchr>:
 80093a8:	4603      	mov	r3, r0
 80093aa:	b510      	push	{r4, lr}
 80093ac:	b2c9      	uxtb	r1, r1
 80093ae:	4402      	add	r2, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	d101      	bne.n	80093ba <memchr+0x12>
 80093b6:	2000      	movs	r0, #0
 80093b8:	e003      	b.n	80093c2 <memchr+0x1a>
 80093ba:	7804      	ldrb	r4, [r0, #0]
 80093bc:	3301      	adds	r3, #1
 80093be:	428c      	cmp	r4, r1
 80093c0:	d1f6      	bne.n	80093b0 <memchr+0x8>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <_realloc_r>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	4680      	mov	r8, r0
 80093ca:	4615      	mov	r5, r2
 80093cc:	460c      	mov	r4, r1
 80093ce:	b921      	cbnz	r1, 80093da <_realloc_r+0x16>
 80093d0:	4611      	mov	r1, r2
 80093d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d6:	f7ff bc61 	b.w	8008c9c <_malloc_r>
 80093da:	b92a      	cbnz	r2, 80093e8 <_realloc_r+0x24>
 80093dc:	f7ff fbf4 	bl	8008bc8 <_free_r>
 80093e0:	2400      	movs	r4, #0
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	f000 f81a 	bl	8009420 <_malloc_usable_size_r>
 80093ec:	4285      	cmp	r5, r0
 80093ee:	4606      	mov	r6, r0
 80093f0:	d802      	bhi.n	80093f8 <_realloc_r+0x34>
 80093f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093f6:	d8f4      	bhi.n	80093e2 <_realloc_r+0x1e>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fc4e 	bl	8008c9c <_malloc_r>
 8009400:	4607      	mov	r7, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d0ec      	beq.n	80093e0 <_realloc_r+0x1c>
 8009406:	42b5      	cmp	r5, r6
 8009408:	462a      	mov	r2, r5
 800940a:	4621      	mov	r1, r4
 800940c:	bf28      	it	cs
 800940e:	4632      	movcs	r2, r6
 8009410:	f7ff fbcc 	bl	8008bac <memcpy>
 8009414:	4621      	mov	r1, r4
 8009416:	4640      	mov	r0, r8
 8009418:	f7ff fbd6 	bl	8008bc8 <_free_r>
 800941c:	463c      	mov	r4, r7
 800941e:	e7e0      	b.n	80093e2 <_realloc_r+0x1e>

08009420 <_malloc_usable_size_r>:
 8009420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009424:	1f18      	subs	r0, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfbc      	itt	lt
 800942a:	580b      	ldrlt	r3, [r1, r0]
 800942c:	18c0      	addlt	r0, r0, r3
 800942e:	4770      	bx	lr

08009430 <_init>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr

0800943c <_fini>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr
